<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式—前言</title>
      <link href="/posts/92e28e2a.html"/>
      <url>/posts/92e28e2a.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码质量好坏如何评价"><a href="#代码质量好坏如何评价" class="headerlink" title="代码质量好坏如何评价?"></a>代码质量好坏如何评价?</h2><p>要想学习设计模式呢 我们就必须搞清楚设计模式到底在我们的编程过程中起到了怎样的作用,在编程世界中它处在一个什么样的位置,它到底是一种抽象的设计思想,还是一套具体的落地方案. </p><p>在学习设计模式之前呢 我们需要了解一下 代码质量的评价标准和编程的方法论</p><p>我们经常会听到有人对项目代码进行评价,一般就会说：“代码写得很烂”或者“代码写得很好”。<br>用“好”“烂”这样的词汇来描述代码质量，非常地笼统。</p><p>对于程序员来说，辨别代码写得“好”还是“烂”，是一个非常重要的能力。这也是我们写出好代码的前提。</p><p>代码质量的评价标准非常之多,我这里就给大家介绍一下最常用的几个标准</p><p><strong>评价代码的质量,有以下几个常用标准:</strong> </p><p><strong>1 ) 可维护性</strong></p><p>可维护性强的代码指的是:  在不去破坏原有的代码设计以及不引入新的BUG的前提下,能够快速的修改或者新增代码.</p><p>不易维护的代码指的是: 在添加或者修改一些功能逻辑的时候,存在极大的引入新的BUG的风险,并且需要花费的时间也很长.</p><blockquote><p>代码可维护性的评判标准比较模糊, 因为是否易维护是针对维护的人员来说的,不同水平的人对于同一份代码的维护能力是不同的. 所谓 ‘’难者不会 会者不难’’. 对于同样的系统,熟悉它的资深工程师会觉得代码可维护性还可以,而新人则会因为能力不足、了解不够深入等原因觉得代码的可维护性不是很好.</p></blockquote><p><strong>2 ) 可读性</strong></p><p>软件开发教父，Martin Fowler曾经说过一句话: “任何傻瓜都能够编写计算机能理解的代码，而优秀的程序员能够编写人类能理解的代码。” 这句话的意思非常容易理解,就是要求我们写出的代码是易读的、易理解的,因为代码的可读性会在很大程度上影响代码的可维护行性.</p><blockquote><p>code review ( 代码审查,一种测试代码可读性的手段 )</p><p>1.检查代码风格和编程规范: 代码是否符合编码规范、命名是否达意、注释是否详尽、模块划分是否清晰等</p><p>2.检查常规的 bad smell 和代码 bug: 是否存在重复代码、过长函数、过大类、过于亲密的两个 classes等</p></blockquote><p><strong>3 ) 可扩展性</strong></p><p>代码的可扩展性表示，我们在不修改或少量修改原有代码的情况下，通过扩展的方式添加新的功能代码。</p><blockquote><p>可扩展性的背后其实就是: “对修改关闭,对扩展开放” 这条设计原则,后面我们会详细的讲解</p></blockquote><p><strong>4 ) 灵活性</strong></p><p>“灵活” 是指在添加新代码的时候，已有代码能够不受影响，不产生冲突，不出现排斥，在保证自身不遭到破坏的前提下灵活地接纳新代码。</p><blockquote><p>下面的几个场景,可以体现代码的灵活性</p><p>1.添加新的功能代码时,原有代码已经预留了扩展点,我们不需要修改 直接在扩展点上新增代码即可.</p><p>2.当我们想实现一个功能模块时,发现原有代码中,已经抽象出了很多底层可以复用的模块、类等代码,我们可以直接拿来使用</p><p>3.当我们使用某组接口时,这组接口可以应对各种使用场景,满足不同需求,这个接口设计的十分的灵活易用.</p></blockquote><p><strong>5 ) 简洁性</strong></p><p>我们要遵从KISS ( Keep It Simple Stupid) 原则，代码要尽可能的简单；但是思从深而行从简，真正的高手能云淡风轻地用最简单的方法解决最复杂的问题。这也是一个编程老手跟编程新手的本质区别之一。</p><blockquote><p>代码的写法应当使别人理解它所需的时间最小化.  </p></blockquote><p><strong>6 ) 可复用性</strong> </p><p>代码的可复用性可以简单地理解为，尽量减少重复代码的编写，复用已有的代码.</p><blockquote><p>可复用性也是一个非常重要的代码评价标准，是很多设计原则、思想、模式等所 要达到的最终效果</p><p>可复用性与DRY(Don’t Repeat Yourself) 避免编写重复的代码逻辑. 原则关系紧密,后面我们会介绍有哪些编程方法可以提高代码复用性.</p></blockquote><p><strong>7 ) 可测试性</strong></p><p>单元测试在一个完整的软件开发流程中是必不可少的、非常重要的一个环节。通常写单元测试并不难，但有的时候，有的代码和功能难以测试，导致写起测试来困难重重。所以写出的代码具有可测试性，具有很重要的作用。</p><blockquote><p>代码可测试性的好坏，能从侧面上非常准确地反应代码质量的好坏</p></blockquote><h2 id="编程方法论"><a href="#编程方法论" class="headerlink" title="编程方法论"></a>编程方法论</h2><p>想要拥有编写高质量代码的能力,我们就要学习一些编程的方法论.其中就包含面向对象（我们可以把它看成一种设计思想）、设计原则、设计模式、编程规范、重构技巧等等</p><blockquote><p>接下来我就给大家介绍一下这几个概念和他们之间的联系,介绍这些呢 有助于大家对于整个课程中包含的知识点, 有一个全局的了解,将我们学到的知识有序的组织在头脑中,方便大家记忆.</p></blockquote><p><img src="https://bu.dusays.com/2024/06/18/6670ef45e7b58.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><p><strong>代码重构的工具就是面向对象设计思想、设计原则、设计模式、编码规范。</strong> </p><p><strong>1 ) 面向对象</strong></p><p>面向对象是一种编程思想,也是一种编程范式. 现在比较流行的编程语言大部分都是面向对象编程语言.而大部分项目也都是基于面向对象编程风格进行开发的.</p><blockquote><p>作为一名Java程序员,相信同学们对于面向对象的特点,以及面向对象思想在实际工作中的应用,都有一定深度的了解,这里边关于面向对象的一些相关知识点我们就不做赘述了.</p></blockquote><p><strong>2 ) 设计原则 (本次课程重点讲解)</strong></p><p>设计原则是指导我们代码设计的一些经验总结。在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据设计原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p><p>常用的设计原则</p><ul><li>单一职责原则</li><li>开闭原则</li><li>里氏代换原则</li><li>依赖倒转原则</li><li>接口隔离原则</li><li>迪米特法则</li></ul><blockquote><p>设计原则的特点就是比较的抽象,大家不需要死记硬背.每个人根据自己所积累的经验和所处的业务场景, 去灵活的运用这些原则即可</p></blockquote><p><strong>3 ) 设计模式 (本次课程重点讲解)</strong> </p><p>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思 路。大部分设计模式要解决的都是代码的可扩展性问题。</p><blockquote><p>设计模式是遵循设计原则的, 设计模式相对于设计原则来说，没有那么抽象，而且大部分都不难理解，代码实现也并不复杂。这一块的学习难点是了解它们 都能解决哪些问题，掌握典型的应用场景，并且懂得不过度应用。</p></blockquote><p><strong>4 ) 编程规范</strong></p><p>编程规范主要解决的是代码的可读性问题。编码规范相对于设计原则、设计模式，更加具 体、更加偏重代码细节。</p><blockquote><p>对于编码规范，考虑到很多书籍已经讲得很好了（比如《编写可读性代码的艺术》《代码大全》《代码整洁之 道》等）。而且，每条编码规范都非常简单、非常明确，比较偏向于记忆，你只要照着来做 可以。</p></blockquote><p><strong>5 ) 重构</strong></p><p>维基百科:  在软件工程学里，<strong>重构</strong>代码一词通常是指在不改变代码的外部行为情况下而修改源代码，有时非正式地称为“清理干净”。在极限编程或其他敏捷方法学中，重构常常是软件开发循环的一部分：开发者轮流增加新的测试和功能，并重构代码来增进内部的清晰性和一致性。</p><blockquote><p>在软件开发中，只要软件在不停地迭代，就没有一劳永逸的设计。随着需求的变化，代码的 不停堆砌，原有的设计必定会存在这样那样的问题。针对这些问题，我们就需要进行代码重构。重构是软件开发中非常重要的一个环节。持续重构是保持代码质量不下降的有效手段， 能有效避免代码腐化到无可救药的地步。</p></blockquote><p><strong>6 ) 总结</strong></p><p>提高代码质量的方法论包含: </p><ul><li>面向对象思想 (基础)</li><li>设计原则 (指导方针) </li><li>设计模式 (设计原则的具体实现) </li><li>编程规范  (提高代码可读性) </li><li>重构 (面向对象设计思想、设计原则、设计模式、编码规范的融合贯通)</li></ul><blockquote><p>设计原则是高手的内功，设计模式是少林，武当，峨眉派的武术套路，规范是招式 出拳还 是横扫，重构是组合拳 融汇贯通各种组合，而想练好这些武功还要有扎实的基本功 面向对 象,在这里呢 也提醒同学们一句,不要一味的去追求最新的技术(并不是说这样做不好,但是千万不要本末倒置),而忘记了一个程序员最重要的能力 是写出高质量的代码.</p></blockquote><h2 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h2><ul><li><p><strong>设计模式（Design pattern）</strong>是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结</p><blockquote><p>在GOF编写的设计模式(可复用面向对象软件的基础)一书中说道:  本书涉及的设计模式<strong>并不描述新的或未经证实的设计</strong>，我们只<strong>收录那些在不同系统中多次使用过的成功设计</strong>。</p></blockquote></li><li><p>大部分设计模式要解决的都是代码的可重用性、可扩展性问题</p></li></ul><blockquote><p>如果说数据结构和算法是教你如何写出高效代码，那设计模式讲的是如何写出可扩展、可读、可维护的高质量代码，所以，它们跟平时的编码会有直接的关系，也会直接影响到你的开发能力。</p></blockquote><ul><li><p>学习设计模式的好处</p><ul><li><p>能够从容应对面试中的设计模式相关问题</p><blockquote><p>我们学习技术从最功利的角度讲,就是为了拿到心仪的offer,得到想要的薪资.所以在面试时特别是面试一些BAT大厂时,如果被问到设计模式的问题, 因为我们学了本次课程, 就不会再惧怕这些问题,设计模式反而会成为你面试中的亮点.</p></blockquote></li><li><p>不再编写 bullshit-code</p><blockquote><p>代码能力是一个程序员最基础的能力，是基本功，是展示一个程序员基础素养的最直接的衡量标准。你写的代码，实 际上就是你名片。我们通过学习设计模式,告别烂代码的编写,避免比如类设计不合理,代码结构混乱,分层不清晰 等等这样的代码问题. 让我们编写的代码成为团队中的标杆.</p></blockquote></li><li><p>提高复杂代码的设计和开发能力</p><blockquote><p>不再只是根据业务需求翻译代码,填充代码. 而是能够通过所学习的设计模式的相关知识写出高质量的代码.即使面对复杂代码功能或者系统的设计开发也能得心应手.</p></blockquote></li><li><p>有助于我们读懂源码,学习框架更加事半功倍</p><blockquote><p>对于一个有追求的程序员来说，对技术的积累，既要有广度，也要有深度。所以我们需要更多的去学习研究各种框架,中间件的底层原理,而这些优秀的框架 中间件的源码中会使用到很多设计思想 设计原则 设计模式 ,所以为了更好的独懂这些开源项目,我们必须好设计模式相关知识.</p></blockquote></li></ul></li></ul><h2 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h2><p><strong>“设计模式”</strong> 最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p><p><img src="https://bu.dusays.com/2024/06/18/6670f58512c27.png" alt="image-20220113152017462" style="zoom:70%;" /></p><p><strong>四人帮（GOF）</strong></p><p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。</p><blockquote><p>在之前设计模式的<strong>绝大部分以往并无文本记录</strong>，它们或是来源于面向对象设计者圈子里的非正式交流，或是来源于某些成功的面向对象系统的某些部分，但对<strong>设计新手</strong>来说，这些东西是很难学得到的。尽管这些设计<strong>不包括新的思路</strong>，但我们<strong>用一种新的、便于理解的方式将其展现给读者</strong>，即：具有统一格式的、已分类编目的若干组设计模式。</p></blockquote><p>1994 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。</p><p>备注：由于书名太长， 人们将其简称为 “四人组 （Gang of Four， GoF） 的书”， 并且很快进一步简化为 “GoF 的书</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><blockquote><p>按照不同的业务领域和场景的复杂程度，以及选择不同的设计模式，在整个系统建设落地中都会有不同的呈现形式。</p><p>就像出行可以选择不同的交通工具一样，如近距离骑自行车、中短程驾车、远程乘坐高铁或飞机等</p></blockquote><p>GoF设计模式只有23个，但是它们各具特色 ，每个模式都为某一个可重复的设计问题提供了一套解决方案。</p><p>根据它们的用途，设计模式可分为 <strong>创建型(Creational) </strong>，<strong>结构型(Structural)  </strong>和<strong>行为型(Behavioral)</strong></p><ul><li><p><strong>创建型模式(5种)：提供创建对象的机制，提升已有代码的灵活性和可复用性</strong></p><p>常用的有：单例模式、工厂模式（工厂方法和抽象工厂）、建造者模式。 </p><p>不常用的有：原型模式。</p><p><img src="https://bu.dusays.com/2024/06/18/6670f590b258a.jpg" alt="image-20220530160637842"  />   </p></li></ul><ul><li><p><strong>结构型模式(7种)：介绍如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效</strong></p><p>常用的有：代理模式、桥接模式、装饰者模式、适配器模式。 </p><p>不常用的有：门面模式、组合模式、享元模式。</p><p><img src="https://bu.dusays.com/2024/06/18/6670f5925c81f.jpg" alt="image-20220530160637842"  /> </p></li></ul><ul><li><p><strong>行为模式(11种)：负责对象间的高效沟通和职责传递委派</strong></p><p>常用的有：观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式。<br>不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、中介模式。</p></li></ul><p><img src="https://bu.dusays.com/2024/06/18/6670f5991bd50.jpg" alt="image-20220530160637842"  /> </p><h1 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h1><p>统一建模语言（Unified  Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。  </p><p>这里我们只介绍类图.</p><blockquote><p>我们要去研究一个设计模式的时候,是需要借助UML类图更加准确的描述所使用的设计模式,和设计模式下类与类之间的关系</p></blockquote><h2 id="类图概述"><a href="#类图概述" class="headerlink" title="类图概述"></a>类图概述</h2><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p><h2 id="类图的作用"><a href="#类图的作用" class="headerlink" title="类图的作用"></a>类图的作用</h2><ul><li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h2 id="类图表示法"><a href="#类图表示法" class="headerlink" title="类图表示法"></a>类图表示法</h2><p>UML类图中具体类、抽象类、接口和包有不同的表示方法。</p><h3 id="在UML类图中表示具体类"><a href="#在UML类图中表示具体类" class="headerlink" title="在UML类图中表示具体类"></a>在UML类图中表示具体类</h3><p>具体类在类图中用矩形框表示，矩形框分为三层：第一层是类名字。第二层是类的成员变量；第三层是类的方法。成员变量以及方法前的访问修饰符用符号来表示：</p><ul><li>“+” 表示 <code>public</code>；</li><li>“-” 表示 <code>private</code>；</li><li>“#” 表示 <code>protected</code>；</li><li>不带符号表示 <code>default</code>。</li></ul><p><img src="F:/学习资源/设计模式/架构师进阶-设计模式/181_抽丝剥茧设计模式精讲/文档_5/md文档/img/06.jpg" alt="image-20220530160637842" style="zoom: 50%;" />  </p><h3 id="在UML类图中表示抽象类"><a href="#在UML类图中表示抽象类" class="headerlink" title="在UML类图中表示抽象类"></a>在UML类图中表示抽象类</h3><p>抽象类在UML类图中同样用矩形框表示，但是抽象类的类名以及抽象方法的名字都用斜体字表示，如图所示。</p><p><img src="https://bu.dusays.com/2024/06/18/6670f5a3cd3e3.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><h3 id="在UML类图中表示接口"><a href="#在UML类图中表示接口" class="headerlink" title="在UML类图中表示接口"></a>在UML类图中表示接口</h3><p>接口在类图中也是用矩形框表示，但是与类的表示法不同的是，接口在类图中的第一层顶端用构造型 &lt;<interface>&gt;表示，下面是接口的名字，第二层是方法。</p><p><img src="https://bu.dusays.com/2024/06/18/6670f5a7e1428.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><blockquote><p>此外，接口还有另一种表示法，俗称棒棒糖表示法，就是类上面的一根棒棒糖（圆圈+实线）。圆圈旁为接口名称，接口方法在实现类中出现。</p></blockquote><h3 id="在类图中表示关系"><a href="#在类图中表示关系" class="headerlink" title="在类图中表示关系"></a>在类图中表示关系</h3><p>类和类、类和接口、接口和接口之间存在一定关系，UML类图中一般会有连线指明它们之间的关系。</p><p>关系共有六种类型 ,如下图: </p><p><img src="https://bu.dusays.com/2024/06/18/6670f5a0f358d.jpg" alt="image-20220530160637842" style="zoom: 50%;" />  </p><h4 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h4><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。</p><p>例如，汽车和船实现了交通工具，其类图:</p><p><img src="https://bu.dusays.com/2024/06/18/6670f5ad72dd7.jpg" alt="image-20220530160637842" style="zoom: 90%;" /> </p><h4 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h4><p>泛化关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。</p><p>例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p><p><img src="https://bu.dusays.com/2024/06/18/6670f5b22f7b6.jpg" alt="image-20220530160637842" style="zoom: 90%;" /> </p><h4 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h4><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。</p><p>我们先介绍一般关联关系, 一般关联关系又可以分为单向关联，双向关联，自关联。</p><p><strong>1) 单向关联</strong></p><p><img src="https://bu.dusays.com/2024/06/18/6670f5d2820f7.jpg" alt="image-20220530160637842" style="zoom: 100%;" /> </p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p><p><strong>2) 双向关联</strong></p><p>​                                <img src="https://bu.dusays.com/2024/06/18/6670f5d89b1d4.jpg" alt="image-20220530160637842" style="zoom: 100%;" /> </p><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List\<Product>，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p><p><strong>3) 自关联</strong></p><p>​                                                        <img src="https://bu.dusays.com/2024/06/18/6670f5eb103cd.jpg" alt="image-20220530160637842" style="zoom: 100%;" /> </p><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p><h5 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h5><p>聚合关系是关联关系的一种，表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，但是B对象不是A对象的一部分</p><blockquote><p>在代码中: 比如A 类对象包含 B 类对象，B 类对象的生命周期可以不依赖 A 类对象的生命周期，也就是说可以单独销毁 A 类对象而不影响 B 对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">A</span><span class="params">(B b)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。</p><p>下图所示是大学和教师的关系图：                            </p><p><img src="https://bu.dusays.com/2024/06/18/6670f5eea1c8f.jpg" alt="image-20220530160637842" style="zoom: 100%;" /></p><h5 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h5><p>组合关系是一种强‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的声明周期一样</p><blockquote><p>在代码中: 比如A 类对象包含 B 类对象，B 类对象的生命周期依赖A 类对象的生命周期，B 类对象不可以单独存在</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.b = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。</p><p>下图所示是头和嘴的关系图：</p><p>​                                <img src="https://bu.dusays.com/2024/06/18/6670f5fda43de.jpg" alt="image-20220530160637842" style="zoom: 100%;" /> </p><h5 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h5><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。</p><p>在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。</p><p>下图所示是司机和汽车的关系图，司机驾驶汽车：</p><p>​                            <img src="https://bu.dusays.com/2024/06/18/6670f5fdaa6d2.jpg" alt="image-20220530160637842" style="zoom: 100%;" /> </p><h2 id="UML类图总结"><a href="#UML类图总结" class="headerlink" title="UML类图总结"></a>UML类图总结</h2><p>之前我们一共学习了六种类关系的表示方式</p><ul><li>实现关系</li><li>泛化关系</li><li>关联关系</li><li>聚合关系</li><li>组合关系</li><li>依赖关系</li></ul><p>为了节省学习成本, 方便记忆,我们可以将类和类之间的关系重新调整一下,使其更加贴近编程的角度:</p><ul><li>实现关系</li><li>泛化关系</li><li>依赖关系</li><li>组合关系 (组合关系+关联关系+聚合关系)</li></ul><blockquote><p>我们也没有必要去区分组合与聚合这两个概念,只需要记住一点就是: 多用组合少用继承 </p><p>也就是说只要 B 类对象是 A 类对象的成员变量，那我们就称，A 类跟 B 类是组合关 系.</p></blockquote><h1 id="六大设计原则-SOLID"><a href="#六大设计原则-SOLID" class="headerlink" title="六大设计原则 (SOLID)"></a>六大设计原则 (SOLID)</h1><h2 id="设计原则概述"><a href="#设计原则概述" class="headerlink" title="设计原则概述"></a>设计原则概述</h2><blockquote><p>古人云: 有道无术,术可求.有术无道,止于术. </p><p>而设计模式通常需要遵循一些设计原则，在设计原则的基础之上衍生出了各种各样的设计模式。设计原则是设计要求，设计模式是设计方案，使用设计模式的代码则是具体的实现。</p></blockquote><p>设计模式中主要有六大设计原则，简称为SOLID ，是由于各个原则的首字母简称合并的来(两个L算一个,solid 稳定的)，六大设计原则分别如下：</p><p>​    <strong>1、单一职责原则（Single Responsibitity Principle）</strong></p><p>​    <strong>2、开放封闭原则（Open Close Principle）</strong></p><p>​    <strong>3、里氏替换原则（Liskov Substitution Principle）</strong></p><p>​    <strong>4、接口分离原则（Interface Segregation Principle）</strong></p><p>​    <strong>5、依赖倒置原则（Dependence Inversion Principle）</strong></p><p>​    <strong>6、迪米特法则（Law Of Demter）</strong></p><p>软件开发中我们要基于这六个原则,设计建立稳定、灵活、健壮的程序.</p><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><h3 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h3><p><strong>单一职责原则</strong>，英文缩写SRP，全称 Single Responsibility Principle。</p><p>在&lt;&lt;架构整洁之道&gt;&gt;一书中 关于这个原则的英文描述是这样的：A class or module should have a single responsibility 。如果我们把它翻译成中文，那就是<strong>：一个类或者模块只负责完成一个职责（或者功能）</strong>。</p><h3 id="通俗解释"><a href="#通俗解释" class="headerlink" title="通俗解释"></a>通俗解释</h3><p>单一职责原则的定义描述非常简单，也不难理解。<strong>一个类只负责完成一个职责或者功能。</strong></p><p>也就是说在类的设计中 我们不要设计大而全的类,而是要设计粒度小、功能单一的类. </p><blockquote><p>比如 我们设计一个类里面既包含了用户的一些操作,又包含了支付的一些操作,那这个类的职责就不够单一,应该将该类进行拆分,拆分成多个功能更加单一的,粒度更细的类.</p></blockquote><h3 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h3><p>那么该如何判断一个类的职责是否单一 ?</p><blockquote><p>其实在软件设计中，要真正用好单一职责原则并不简单，因为遵循这一原则最关键的地方在于职责的划分，而职责的划分是根据需求定的，同一个类（接口）的设计，在不同的需求里面，可能职责的划分并不一样.</p></blockquote><p>我们来看下面这个例子:</p><p>在一个社交媒体产品中,我们使用UserInfo去记录用户的信息,包括如下的属性.</p><p><img src="https://bu.dusays.com/2024/06/18/6670f5fdba73f.jpg" alt="image-20220530160637842" style="zoom: 50%;" />   </p><p>请问上面的UserInfo类是否满足单一职责原则呢 ?</p><ul><li>观点1: 满足,因为记录的都是跟用户相关的信息</li><li>观点2: 不满足,因为地址信息应该被拆分出来,单独放到地址表中保存.</li></ul><p>正确答案: 根据实际业务场景选择是否拆分</p><ul><li>该社交产品的有用户信息只是用来展示的,那么这个类这样设计就没有问题</li><li>假设后面这个社交产品又添加了电商模块, 那就需要将地址信息提取出来,单独设计一个类</li></ul><p><img src="https://bu.dusays.com/2024/06/18/6670f5fdb18a9.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><p><strong>总结: 不同的应用场景、不同阶段的需求背景下，对同一个类的职责是否单一的判定，可能都是不一样的,最好的方式就是: </strong></p><blockquote><p>我们可以先写一个粗粒度的类，满足业务需求。随着业务的发展，如果粗粒度的类越来越庞大，代码越来越多，这个时候，我们就可以将这个粗粒度的类，拆分成几个更细粒度的类。这就是所谓的持续重构</p></blockquote><p><strong>如何判断一个类的职责是否单一?</strong></p><p>这里没有一个具体的金科玉律，但从实际代码开发经验上，有一些可执行性的侧面判断指标，可供参考：</p><ul><li><p>类中的代码行数、函数、或者属性过多；</p></li><li><p>类依赖的其他类过多</p></li><li><p>私有方法过多</p></li><li><p>类中大量的方法都是集中操作类中的几个属性</p></li></ul><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><h3 id="官方定义-1"><a href="#官方定义-1" class="headerlink" title="官方定义"></a>官方定义</h3><p>一般认为最早提出开闭原则（Open-Close Principle，OCP）的是伯特兰·迈耶。他在1988 年发表的《面向对象软件构造》中给出的。在面向对象编程领域中，</p><p>开闭原则规定软件中的对象、类、模块和函数对扩展应该是开放的，但对于修改是封闭的。这意味着应该用抽象定义结构，用具体实现扩展细节，以此确保软件系统开发和维护过程的可靠性。</p><h3 id="通俗解释-1"><a href="#通俗解释-1" class="headerlink" title="通俗解释"></a>通俗解释</h3><p>定义：<strong>对扩展开放，对修改关闭</strong></p><blockquote><p>对扩展开放和对修改关闭表示当一个类或一个方法有新需求或者需求发生改变时应该采用扩展的方式而不应该采用修改原有逻辑的方式来实现。因为扩展了新的逻辑如果有问题只会影响新的业务，不会影响老业务；而如果采用修改的方式，很有可能就会影响到老业务受影响。</p><p>开闭原则是所有设计模式的最核心目标，也是最难实现的目标，但是所有的软件设计模式都应该以开闭原则当作标准，才能使软件更加的稳定和健壮。</p></blockquote><p>优点：</p><ol><li><p>新老逻辑解耦，需求发生改变不会影响老业务的逻辑</p></li><li><p>改动成本最小，只需要追加新逻辑，不需要改的老逻辑</p></li><li><p>提供代码的稳定性和可扩展性</p></li></ol><h4 id="场景示例-1"><a href="#场景示例-1" class="headerlink" title="场景示例"></a>场景示例</h4><p>系统A与系统B之间进行数据传输使用的是427版本的协议，一年以后对427版本的协议进行了修正。</p><p>设计时应该考虑的数据传输协议的可变性，抽象出具有报文解译、编制、校验等所有版本协议使用的通用方法，调用方针对接口进行编程即可，如上述示例设计类图如下</p><p><img src="https://bu.dusays.com/2024/06/18/6670f5ffbc8fd.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><p>调用方依赖于报文接口，报文接口是稳定的，而不针对具体的427协议或427修正协议。利用接口多态技术，实现了开闭原则。</p><p><strong>顶层设计思维</strong></p><ul><li>抽象意识</li><li>封装意识</li><li>扩展意识</li></ul><blockquote><p>在写代码的时候后，我们要多花点时间往前多思考一下，这段代码未来可能有哪些需求变 更、如何设计代码结构，事先留好扩展点，以便在未来需求变更的时候，不需要改动代码整 体结构、做到最小代码改动的情况下，新的代码能够很灵活地插入到扩展点上，做到“对扩 展开放、对修改关闭”。</p></blockquote><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><h3 id="官方定义-2"><a href="#官方定义-2" class="headerlink" title="官方定义"></a>官方定义</h3><p>里氏替换原则（Liskov Substitution Principle，LSP）是由麻省理工学院计算机科学系教授芭芭拉·利斯科夫于 1987 年在“面向对象技术的高峰会议”（OOPSLA）上发表的一篇论文《数据抽象和层次》（Data Abstractionand Hierarchy）里提出的.</p><p>她在论文中提到：如果S是T的子类型，对于S类型的任意对象，如果将他们看作是T类型的对象，则对象的行为也理应与期望的行为一致。</p><blockquote><p>子类对象能够替换程序中父类对象出现的任何地方，并且保证原来程序的逻辑行为不变及正确性不被破坏。</p></blockquote><h3 id="通俗解释-2"><a href="#通俗解释-2" class="headerlink" title="通俗解释"></a>通俗解释</h3><p><strong>如何理解里氏替换原则？</strong></p><p>要理解里氏替换原则，其实就是要理解两个问题：</p><ul><li>什么是替换？</li><li>什么是与期望行为一致的替换（Robert Martin所说的“必须能够替换”）？</li></ul><p><strong>1 ) 什么是替换 ?</strong></p><p>替换的前提是面向对象语言所支持的多态特性，同一个行为具有多个不同表现形式或形态的能力。</p><blockquote><p>以JDK的集合框架为例，<code>List</code>接口的定义为有序集合，<code>List</code>接口有多个派生类，比如大家耳熟能详的<code>ArrayList</code>, <code>LinkedList</code>。那当某个方法参数或变量是<code>List</code>接口类型时，既可以是<code>ArrayList</code>的实现, 也可以是<code>LinkedList</code>的实现，这就是替换。</p></blockquote><p><strong>2 ) 什么是与期望行为一致的替换？</strong> </p><p>在不了解派生类的情况下，仅通过接口或基类的方法，即可清楚的知道方法的行为，而不管哪种派生类的实现，都与接口或基类方法的期望行为一致。</p><blockquote><p>不需要关心是哪个类对接口进行了实现,因为不管底层如何实现,最终的结果都会符合接口中关于方法的描述(也就是与接口中方法的期望行为一致).</p><p>或者说接口或基类的方法是一种契约，使用方按照这个契约来使用，派生类也按照这个契约来实现。这就是与期望行为一致的替换。</p></blockquote><h3 id="场景示例-2"><a href="#场景示例-2" class="headerlink" title="场景示例"></a>场景示例</h3><p>里氏替换原则要求我们在编码时使用基类或接口去定义对象变量，使用时可以由具体实现对象进行赋值，实现变化的多样性，完成代码对修改的封闭，扩展的开放。</p><p>比如在一个商城项目中, 定义结算接口Istrategy，该接口有三个具体实现类，分别为 PromotionalStrategy （满减活动，两百以上百八折）、RebateStrategy （打折活动）、 ReduceStrategy（返现活动）</p><p><img src="https://bu.dusays.com/2024/06/18/6670f60376b6a.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Istrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">realPrice</span><span class="params">(<span class="type">double</span> consumePrice)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PromotionalStrategy</span> <span class="keyword">implements</span> <span class="title class_">Istrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">realPrice</span><span class="params">(<span class="type">double</span> consumePrice)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (consumePrice &gt; <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">200</span> + (consumePrice - <span class="number">200</span>) * <span class="number">0.8</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> consumePrice;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RebateStrategy</span> <span class="keyword">implements</span> <span class="title class_">Istrategy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> rate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RebateStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rate = <span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">realPrice</span><span class="params">(<span class="type">double</span> consumePrice)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> consumePrice * <span class="built_in">this</span>.rate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReduceStrategy</span> <span class="keyword">implements</span> <span class="title class_">Istrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">realPrice</span><span class="params">(<span class="type">double</span> consumePrice)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (consumePrice &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> consumePrice - <span class="number">200</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> consumePrice;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方为Context，在此类中使用接口定义了一个对象。</p><p> <img src="https://bu.dusays.com/2024/06/18/6670f60723c98.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="comment">//使用基类定义对象变量</span></span><br><span class="line">    <span class="keyword">private</span> Istrategy strategy;</span><br><span class="line">    <span class="comment">// 注入当前活动使用的具体对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(Istrategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算并返回费用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cul</span><span class="params">(<span class="type">double</span> consumePrice)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用具体商品促销策略获得实际消费金额</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">realPrice</span> <span class="operator">=</span> <span class="built_in">this</span>.strategy.realPrice(consumePrice);</span><br><span class="line">        <span class="comment">// 格式化保留小数点后1位，即：精确到角</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(realPrice);</span><br><span class="line">        bd = bd.setScale(<span class="number">1</span>, BigDecimal.ROUND_DOWN);</span><br><span class="line">        <span class="keyword">return</span> bd.doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Context 中代码使用接口定义对象变量，这个对象变量可以是实现了lStrategy接口的PromotionalStrategy、RebateStrategy 、 ReduceStrategy任意一个。</p><p>里氏代换原则与多态的区别 ?</p><blockquote><p>虽然从定义描述和代码实现上 来看，多态和里式替换有点类似，但它们关注的角度是不一样的。多态是面向对象编程的一 大特性，也是面向对象编程语言的一种语法。它是一种代码实现的思路。而里式替换是一种 设计原则，用来指导继承关系中子类该如何设计，子类的设计要保证在替换父类的时候，不 改变原有程序的逻辑及不破坏原有程序的正确性。</p></blockquote><p>里氏替换原则和依赖倒置原则，构成了面向接口编程的基础，正因为里氏替换原则，才使得程序呈现多样性。</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><h3 id="官方定义-3"><a href="#官方定义-3" class="headerlink" title="官方定义"></a>官方定义</h3><p>&lt;&lt;代码整洁之道&gt;&gt;作者<strong>罗伯特 C·马丁</strong> 为 “接口隔离原则” 的定义是：客户端不应该被迫依赖于它不使用的方法（Clients should not be forced to depend on methods they do not use）。</p><p>该原则还有另外一个定义：一<strong>个类对另一个类的依赖应该建立在最小的接口上</strong></p><h3 id="通俗解释-3"><a href="#通俗解释-3" class="headerlink" title="通俗解释"></a>通俗解释</h3><p>上面两个定义的含义用一句话概括就是：<strong>要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</strong> </p><p><strong>接口隔离原则与单一职责原则的区别</strong></p><p>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</p><ul><li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li><li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li></ul><h3 id="场景示例-3"><a href="#场景示例-3" class="headerlink" title="场景示例"></a>场景示例</h3><p>微服务用户系统提供了一组跟用户相关的 API 给其他系统 使用，比如：注册、登录、获取用户信息等。</p><p><img src="https://bu.dusays.com/2024/06/18/6670f60adc0f8.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">register</span><span class="params">(String cellphone, String password)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String cellphone, String password)</span>;</span><br><span class="line">    UserInfo <span class="title function_">getUserInfoById</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line">    UserInfo <span class="title function_">getUserInfoByCellphone</span><span class="params">(String cellphone)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求: 后台管理系统要实现删除用户的功能，希望用户系统提供一个删除用户的接口,应该如何设计这个接口(假设这里我们不去考虑使用鉴权框架).</p><ul><li><p>方案1: 直接在UserService接口中添加一个删除用户的接口</p><blockquote><p>这个方法可以解决问题，但是也隐藏了一些安全隐患。删除用户是一个非常慎重的操作，我们只希望通过后台管理系统来执行，所以这个接口只限于给后台管理系统使用。如果我们把它放到 UserService 中，那所有使用到 UserService<br>的系统，都可以调用这个接口。不加限制地被其他业务系统调用，就有可能导致误删用户。</p></blockquote></li><li><p>方案2: 遵照接口隔离原则,为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</p></li></ul><p>​      将删除接口单独放到另外 一个接口 RestrictedUserService 中, 然后将 RestrictedUserService 只打包提供给后台管理系统来      使用。</p><p>​     <img src="https://bu.dusays.com/2024/06/18/6670f60e5948e.jpg" alt="image-20220530160637842" style="zoom: 50%;" />     </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">register</span><span class="params">(String cellphone, String password)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String cellphone, String password)</span>;</span><br><span class="line">    UserInfo <span class="title function_">getUserInfoById</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line">    UserInfo <span class="title function_">getUserInfoByCellphone</span><span class="params">(String cellphone)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RestrictedUserService</span> &#123;</span><br><span class="line"> <span class="type">boolean</span> <span class="title function_">deleteUserByCellphone</span><span class="params">(String cellphone)</span>;</span><br><span class="line"> <span class="type">boolean</span> <span class="title function_">deleteUserById</span><span class="params">(<span class="type">long</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>, RestrictedUserService &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遵循接口隔离原则的优势</p><ol><li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</li><li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</li><li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码.</li></ol><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><h3 id="官方定义-4"><a href="#官方定义-4" class="headerlink" title="官方定义"></a>官方定义</h3><p>依赖倒置原则是Robert C.Martin于1996年在C++Report上发表的文章中提出的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">High level modules should not depend upon low level modules. Both should depend upon abstractions.</span><br><span class="line">Abstractions should not depend upon details. Details should depend upon abstractions</span><br></pre></td></tr></table></figure><p>依赖倒置原则（Dependence Inversion Principle，DIP）是指在设计代码架构时，高层模块不应该依赖于底层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p><h3 id="通俗解释-4"><a href="#通俗解释-4" class="headerlink" title="通俗解释"></a>通俗解释</h3><p>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。</p><blockquote><ol><li>高层级的模块应该依赖的是低层级的模块的行为的抽象，取决于具体编程语言，可以是抽象类或者接口等技术；</li><li>第2句话其实很简单，只有一个意思：只要依赖了实现，就是耦合了代码，所以我们需要始终依赖的是抽象，而不是实现。</li></ol></blockquote><ul><li><p><strong>传统的自定向下的设计</strong></p><blockquote><p>传统设计方式采用自顶向下的原则， 逐级依赖，中层模块和高层模块的耦合度很高，如果需要修改其中的一个模块，则可能会导致其它很多模块也需要修改，牵一发动全身，不易于维护。</p><p>不使用依赖反转的系统构架，控制流和依赖关系流的依赖箭头是一个方向的，由高层指向底层，也就是高层依赖底层</p></blockquote></li></ul><p><img src="https://bu.dusays.com/2024/06/18/6670f61214723.jpg" alt="image-20220530160637842" style="zoom: 50%;" />    </p><ul><li><p>依赖倒置原则</p><blockquote><p>依赖倒置原则的好处:</p><ul><li>减少类间的耦合性，提高系统的稳定性 . (根据类与类之间的耦合度从弱到强排列：依赖关系、关联关系、聚合关系、组合关系、泛化关系和实现关系 )</li><li>降低并行开发引起的风险 (两个类之间有依赖关系，只要制定出两者之间的接口（或抽象类）就可以独立开发了)</li><li>提高代码的可读性和可维护性</li></ul></blockquote></li></ul><p>​        <img src="https://bu.dusays.com/2024/06/18/6670f6149fff9.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><h3 id="场景示例-4"><a href="#场景示例-4" class="headerlink" title="场景示例"></a>场景示例</h3><p>假设我们现在要组装一台电脑,需要的配件有 cpu，硬盘，内存条。只有这些配置都有了，计算机才能正常的运行。选择cpu有很多选择，如Intel，AMD等，硬盘可以选择希捷，西数等，内存条可以选择金士顿，海盗船等。</p><p><img src="https://bu.dusays.com/2024/06/18/6670f616a82e8.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><p>代码如下：</p><p><strong>希捷硬盘类（XiJieHardDisk）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiJieHardDisk</span> <span class="keyword">implements</span> <span class="title class_">HardDisk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷硬盘存储数据&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷希捷硬盘取数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Intel处理器（IntelCpu）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntelCpu</span> <span class="keyword">implements</span> <span class="title class_">Cpu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Intel处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>金士顿内存条（KingstonMemory）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KingstonMemory</span> <span class="keyword">implements</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用金士顿作为内存条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XiJieHardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> IntelCpu cpu;</span><br><span class="line">    <span class="keyword">private</span> KingstonMemory memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IntelCpu <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(IntelCpu cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> KingstonMemory <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(KingstonMemory memory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> XiJieHardDisk <span class="title function_">getHardDisk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHardDisk</span><span class="params">(XiJieHardDisk hardDisk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">        cpu.run();</span><br><span class="line">        memory.save();</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> hardDisk.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;从硬盘中获取的数据为：&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类（TestComputer）：</strong></p><p>测试类用来组装电脑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComputer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        computer.setHardDisk(<span class="keyword">new</span> <span class="title class_">XiJieHardDisk</span>());</span><br><span class="line">        computer.setCpu(<span class="keyword">new</span> <span class="title class_">IntelCpu</span>());</span><br><span class="line">        computer.setMemory(<span class="keyword">new</span> <span class="title class_">KingstonMemory</span>());</span><br><span class="line"></span><br><span class="line">        computer.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到已经组装了一台电脑，但是似乎组装的电脑的cpu只能是Intel的，内存条只能是金士顿的，硬盘只能是希捷的，这对用户肯定是不友好的，用户有了机箱肯定是想按照自己的喜好，选择自己喜欢的配件。</p><p>根据依赖倒转原则进行改进：</p><p>代码我们需要修改Computer类，让Computer类依赖抽象（各个配件的接口），而不是依赖于各个组件具体的实现类。</p><p><strong>类图如下：</strong></p><p><img src="https://bu.dusays.com/2024/06/18/6670f61ab59c5.jpg" alt="image-20220530160637842" style="zoom: 50%;" />  </p><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> Cpu cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter/setter......</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于依赖倒置、依赖注入、控制反转这三者之间的区别与联系</strong>   </p><p>1 )  依赖倒置原则</p><p>依赖倒置是一种通用的软件设计原则, 主要用来指导框架层面的设计。</p><blockquote><p>高层模块不依赖低层模块，它们共同依赖同一个抽象。抽象不要依赖具体实现细节，具体实现细节依赖抽象。</p></blockquote><p>2 ) 控制反转</p><p>控制反转与依赖倒置有一些相似, 它也是一种框架设计常用的模式,但并不是具体的方法。</p><blockquote><p>“控制”指的是对程序执行流程的控制，而“反转”指的是在没有使用框架之前，程序员自己控制整个程序的执行。在使用框架之后，整个程序的执行流程通过框架来控制。流程的控制权从程序员“反转”给了框架。</p><p>Spring框架，核心模块IoC容器,就是通过控制反转这一种思想进行设计的</p></blockquote><p>3 ) 依赖注入</p><p>依赖注入是实现控制反转的一个手段，它是一种具体的编码技巧。</p><blockquote><p>我们不通过 new 的方式在类内部创建依赖的对象，而是将依赖的对象在外部创建好之后，通过构造函数等<br>方式传递（或注入）进来, 给类来使用。</p><p>依赖注入真正实现了面向接口编程的愿景，可以很方便地替换同一接口的不同实现，而不会影响到依赖这个接口的客户端。</p></blockquote><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><h3 id="官方定义-5"><a href="#官方定义-5" class="headerlink" title="官方定义"></a>官方定义</h3><p>1987年秋天，迪米特法则由美国Northeastern University的Ian Holland(伊恩 霍兰德)提出，被UML的创始者之一Booch(布奇)等人普及。后来，因为经典著作The PragmaticProgrammer &lt;&lt;程序员修炼之道&gt;&gt;而广为人知。</p><p>迪米特法则（LoD：Law of Demeter）又叫最少知识原则（LKP：Least Knowledge Principle ），指的是一个类/模块对其他的类/模块有越少的了解越好。简言之：talk only to your immediate friends（只跟你最亲密的朋友交谈），不跟陌生人说话。</p><h3 id="通俗解释-5"><a href="#通俗解释-5" class="headerlink" title="通俗解释"></a>通俗解释</h3><p>大部分设计原则和思想都非常抽象，有各种各样的解读，要想灵活地应用到 实际的开发中，需要有实战经验的积累。迪米特法则也不例外。</p><p>简单来说迪米特法则想要表达的思想就是:  <strong>不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。</strong></p><blockquote><p>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p></blockquote><h3 id="场景示例-5"><a href="#场景示例-5" class="headerlink" title="场景示例"></a>场景示例</h3><p>我们一起来看下面这个例子: </p><p>明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。</p><p><img src="https://bu.dusays.com/2024/06/18/6670f62a2e270.jpg" alt="image-20220530160637842" style="zoom: 50%;" /> </p><blockquote><p>迪米特法则的独特之处在于它简洁而准确的定义，它允许在编写代码时直接应用，几乎自动地应用了适当的封装、高内聚和低耦合。</p><p>但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</p></blockquote><p>代码如下：</p><p><strong>明星类（Star）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Star</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>粉丝类（Fans）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fans</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fans</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>媒体公司类（Company）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Company</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Company</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经纪人类（Agent）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Star star;</span><br><span class="line">    <span class="keyword">private</span> Fans fans;</span><br><span class="line">    <span class="keyword">private</span> Company company;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStar</span><span class="params">(Star star)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFans</span><span class="params">(Fans fans)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fans = fans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(Company company)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">meeting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(fans.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;见面了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">business</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(company.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;洽淡业务。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计原则总结"><a href="#设计原则总结" class="headerlink" title="设计原则总结"></a>设计原则总结</h2><p>我们之前给的大家介绍了评判代码质量的标准,比如可读性、可复用性、可扩展性等等,这是从代码的整体质量的角度来评判.</p><p>而设计原则就是我们要使用到的更加具体的对于代码进行评判的标准,比如, 我们说这段代码的可扩展性比较差，主要原因是违背了开闭原则。</p><p>我们所学习的SOLID 原则它包含了：</p><ol><li>单一职责原则（SRP）</li><li>开闭原则（OCP）</li><li>里氏替换原则（LSP）</li><li>接口隔离原则（ISP）</li><li>依赖倒置原则（DIP）</li><li>迪米特法则 (LKP)</li></ol><p>这里我们只需要重点关注三个常用的原则即可:</p><p><strong>1 ) 单一职责原则</strong></p><p>单一职责原则是类职责划分的重要参考依据，是保证代码”高内聚“的有效手段，是我们在进行面向对象设计时的主要指导原则。</p><blockquote><p>单一职责原则的难点在于，对代码职责是否足够单一的判定。这要根据具体的场景来具体分析。同一个类的设计，在不同的场景下，对职责是否单一的判定，可能是不同的。</p></blockquote><p><strong>2 ) 开闭原则</strong></p><p>开闭原则是保证代码可扩展性的重要指导原则，是对代码扩展性的具体解读。很多设计模式诞生的初衷都是为了提高代码的扩展性，都是以满足开闭原则为设计目的的。</p><blockquote><p>开闭原则是所有设计模式的最核心目标，也是最难实现的目标，但是所有的软件设计模式都应该以开闭原则当作标准，才能使软件更加的稳定和健壮。</p></blockquote><p><strong>3 ) 依赖倒置原则</strong></p><p>依赖倒置原则主要用来指导框架层面的设计。高层模块不依赖低层模块，它们共同依赖同一个抽象。</p><blockquote><p>依赖倒置原则其实也是实现开闭原则的重要途径之一，它降低了类之间的耦合，提高了系统的稳定性和可维护性，同时这样的代码一般更易读，且便于传承。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何排查慢SQL?</title>
      <link href="/posts/9935d352.html"/>
      <url>/posts/9935d352.html</url>
      
        <content type="html"><![CDATA[<h2 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h2><p>如果是在项目中，可以通过SpringAOP去查询这个接口运行的时间；</p><p>如果是一个sql，可以通过explain的指令去查这个sql的执行计划。</p><p>如果有数据库终端的话，也可以通过开启mysql的慢日志查询，设置好时间阈值，进行捕获。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>来源评论区补充：<a href="https://gnezdd.github.io/2023/07/10/慢SQL治理实战总结/">补充链接</a></p><p>在企业内部对于慢查SQL的优化主要经历以下的几个步骤：</p><p><img src="https://oss.serms.top/blog/202405131703219.png?x-oss-process=style/serms_watermark" alt="202310251903040"></p><p>在慢SQL的优化过程中，可以从以下五个角度去进行思考优化：<strong>SQL优化、资源占用、业务改造、数据减少、源头替换</strong>。</p><p>在治理慢查的过程中，SQL语句的使用问题是导致慢SQL的主要因素，因此本文主要从SQL优化角度出发，对慢SQL的常见原因和特征进行分析，介绍慢SQL的优化过程以及一些有效的调优技巧和工具，希望能够提供一些有用的方法和策略，帮助大家更好地应对慢SQL问题，并最终实现提升系统性能和优化用户体验的目标。</p><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><p>SQL语句的优化方式主要是通过选择合适的索引、优化查询语句、避免全表扫描等提高查询效率，减少慢SQL的出现</p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>索引主要用于加快数据的查询速度，有了正确的索引，数据库就可以根据索引的数据结构快速定位到匹配的数据行，从而提高查询效率和响应速度。在慢SQL中由于索引导致的主要有两个方面：<strong>索引缺失 与 索引失效</strong></p><h5 id="索引缺失"><a href="#索引缺失" class="headerlink" title="索引缺失"></a>索引缺失</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> text3 <span class="operator">=</span> <span class="string">&#x27;text898&#x27;</span></span><br></pre></td></tr></table></figure><p>text3列没有索引的情况下：</p><p><img src="https://oss.serms.top/blog/202405131705364.png?x-oss-process=style/serms_watermark" alt="202310251904540"></p><p>text3列增加了索引：<img src="https://oss.serms.top/blog/202405131709155.png?x-oss-process=style/serms_watermark" alt="202310251905902"></p><p><strong>建议</strong></p><p>一般在以下场景中需要为相应的列创建索引：</p><ul><li><strong>字段有唯一性限制</strong></li><li><strong>经常用于where查询条件的字段</strong></li><li><strong>经常用于group by 和 order by的字段，可以避免排序</strong></li></ul><p>但是并不是需要为每个字段都添加上索引，有一些场景下添加上索引反而会加重DB的负担：</p><ul><li>不用于查询条件的字段</li><li>字段中存在大量重复的数据</li><li>数据量太少</li><li>频繁更新的字段（考虑）</li></ul><p>注意：随着数据的增长和变化，索引的有效性可能会下降。定期评估和优化现有索引是十分必要的。可以通过删除不再使用的索引、调整索引的顺序和选择适当的索引类型等方式来进行索引维护和优化</p><h5 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h5><p>索引失效会导致SQL的执行变为全表扫描或选择错误的索引，在explain中一般是type=ALL或type=index</p><p><strong>索引失效原因：</strong></p><ul><li>索引字段发送隐式转换<ul><li>数字转换为字符串会发生隐式转换失效</li><li>字符串转换为数字是自动转换，不会导致索引失效</li><li><strong>通过在explain语句后增加extended<code>explain extended sql语句</code>，再执行show warnings查看是否存在隐式转换以及哪个字段存在隐式转换</strong></li></ul></li><li>使用 非/不等于（!=、not in）查询时可能会导致索引失效<ul><li>在满足索引覆盖的情况下可能会走索引</li></ul></li><li>在查询条件中对索引使用函数或表达式计算<ul><li>比如from_unixtime(create_time) = ’2019-12-01’就不能使用到索引：需要先做一次全表扫描，将字段上的所有值使用表达式作用后再进行匹配，从而会导致Mysql放弃走索引。所以语句应该写成create_time = unix_timestamp(’2019-12-01’);</li></ul></li><li>没有遵循最左前缀匹配原则，比如联合索引中没有使用到第一列索引、使用左右模糊匹配</li><li>在where子句中，or一些条件列是索引列，一些不是，会导致索引失效，直接全表扫描</li><li>索引的可选择性差（数据发布严重倾斜或区分度不高）<ul><li>MYSQL查询优化器可能认为返回的数据量本身就很多，通过索引扫描并不能减少多少开销，此时选择全表扫描的权重会提高很多</li><li>一般认为区分度 &gt; 0.1的查询字段可以建立索引（经验性指标，一般要进行实际的测试，比如使用前缀索引时，不断尝试直到选择到合适的前缀长度以及合适的区分度）</li></ul></li><li>IS NOT NULL 或 IS NULL条件查询也可能导致索引失效<ul><li>当索引字段不可以为空（null）时<ul><li>is null 不会使用索引，因为条件失效无法查询</li><li>只有使用is not null 返回的结果集中只包含索引字段时，才使用索引，因为实现索引覆盖，优化器认为此时成本较小</li></ul></li><li>当索引字段可以为空（null）时<ul><li>使用 is null 会使用索引，因为NULL值在SQL中被认为是列中最小的值，存储在最左边，所以可以通过索引快速定位</li><li>使用 is not null 返回的结果集中只包含索引字段时，才会使用索引，因为实现索引覆盖</li></ul></li></ul></li></ul><p>总结来说，<strong>要让避免索引失效的原则为：遵循最左前缀原则、避免使用函数和表达式、避免隐式转换、尽量实现索引覆盖</strong></p><p><strong>建议</strong></p><ul><li>修改SQL语句</li><li>force index强制使用索引</li><li>ignore index忽略特定索引</li></ul><h3 id="SQL语句优化"><a href="#SQL语句优化" class="headerlink" title="SQL语句优化"></a>SQL语句优化</h3><h3 id="分页写法（深翻页）"><a href="#分页写法（深翻页）" class="headerlink" title="分页写法（深翻页）"></a>分页写法（深翻页）</h3><p>最常见的分页写法就是使用limit，在分页查询时，会在 LIMIT 后面传两个参数，一个是偏移量(offset)，一个是获取的条数(limit)。</p><p>实现方式是先查询offset+limit条数据，再将offset条数据丢弃给用户返回剩下的limit条数据。比如limit 10000,10实际上是mysql查找到前10010条数据，之后丢弃前面的10000行后再返回</p><p>这样子当偏移量很小时，查询速度很快，但是随着 offset 变大时，查询速度会越来越慢，因为查找的数据越来越多</p><p>在limit0,10的情况下执行速度很快，基本可以忽略不计</p><p><img src="https://oss.serms.top/blog/202405131710570.png?x-oss-process=style/serms_watermark" alt="202310251905273"></p><p>但是当limit n，n是值越来越大时，就导致查询时间增加了</p><p><img src="https://bu.dusays.com/2024/05/13/6641d977c5902.png" alt="202310251908548"></p><p><strong>建议</strong></p><ul><li>方式一：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> id <span class="operator">&gt;=</span> <span class="number">300000</span> <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">10</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.serms.top/blog/202405131711851.png?x-oss-process=style/serms_watermark" alt="202310251909738"></p><p>避免了扫描前offset条记录</p><p>但是每次查询都需要拿到上一页的最大/小id。比如当前在第3页，需要查询第5页的数据就没办法了</p><ul><li>方式二</li></ul><p>结合普通limit与方式一，解决方式二的问题，但是offset要尽量小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 where id &gt; 300000 order by id limit 10, 10</span><br></pre></td></tr></table></figure><p><img src="https://oss.serms.top/blog/202405131711270.png?x-oss-process=style/serms_watermark" alt="202310251907531"></p><ul><li>方式三：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 as a inner join (select id from t1 order by id limit 300000, 10) as b on a.id = b.id order by a.id</span><br></pre></td></tr></table></figure><p>由于内部的子查询只扫描了id字段，而不是全表，所以性能会比较强</p><p><img src="https://oss.serms.top/blog/202405131713001.png?x-oss-process=style/serms_watermark" alt="202310251907545"></p><p>这种情况下还是扫描聚簇索引树，可能难以理解并且优化效果不是很明显。在order by换成其他字段达到索引覆盖的情况下会比较容易理解</p><ul><li>方式四：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 where id &gt; (select id from t1 order by id limit 300000, 1) limit 10</span><br></pre></td></tr></table></figure><p>同样是通过子查询扫描字段id，但是性能会略好于方式三，因为它不需要进行表的关联，而是一个简单的比较，在不知道上一页最大id的情况下，是比较推荐的用法</p><p><img src="https://oss.serms.top/blog/202405131713995.png?x-oss-process=style/serms_watermark" alt="202310251908991"></p><h4 id="最大最小写法"><a href="#最大最小写法" class="headerlink" title="最大最小写法"></a>最大最小写法</h4><p>MySQL提供了max()和min()用于获取最大最小值，但是优化得不是很好</p><p>text1没有索引，因此会全表扫描获取最小的id</p><p><img src="https://oss.serms.top/blog/202405131714485.png?x-oss-process=style/serms_watermark" alt="202310251910645"></p><p><strong>建议：</strong></p><p>由于id是主键我们可以知道第一次找到的记录对应的id就是我们需要的结果，所以可以根据结果的有序性修改SQL语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from t1 where text1 = &#x27;dd&#x27; limit 1</span><br></pre></td></tr></table></figure><p><img src="https://oss.serms.top/blog/202405131714180.png?x-oss-process=style/serms_watermark" alt="202310251911283"></p><p>最大值同理</p><h4 id="order-by排序问题"><a href="#order-by排序问题" class="headerlink" title="order by排序问题"></a>order by排序问题</h4><p>MySQL进行排序是一个成本比较高的操作：</p><ul><li>全字段排序会在sort_buffer中建立临时表进行排序</li><li>基于rowid排序不仅需要建立临时表，还会涉及回表操作</li></ul><p>在需要排序时会在explain的Extra字段中出现Using filesort</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> v1 <span class="operator">&lt;</span> <span class="number">100</span> <span class="keyword">order</span> <span class="keyword">by</span> v1</span><br></pre></td></tr></table></figure><p><img src="https://oss.serms.top/blog/202405131715405.png?x-oss-process=style/serms_watermark" alt="202310251912862"></p><p><strong>建议：</strong></p><p>对于索引是本来就是有序的，所以可以给order by字段加上索引</p><ul><li>如果order by后面的字段是单个索引，需要order by 条件要与where中条件一致，否则order by不会利用索引进行排序</li><li>如果order by 最后的字段是组合索引的一部分，需要把放在索引组合顺序的最后</li></ul><p><img src="https://bu.dusays.com/2024/05/13/6641dab233192.png" alt="202310251912164"></p><h4 id="group-by临时表问题"><a href="#group-by临时表问题" class="headerlink" title="group by临时表问题"></a>group by临时表问题</h4><ul><li>内存占用：group by语句由于可能会建立内部临时表，用于保存和统计中间结果。首先会使用内存临时表，但是内存临时表的大小是有限制的，由参数 tmp_table_size 控制，当超过此限制时会把内存临时表转成磁盘临时表。因此内部临时表的存在会影响内存和磁盘的空间，且需要构造的是一个带唯一索引的表，执行代价都是比较高的。因此需要尽量避免内部临时表的建立</li><li>额外排序：group by column默认会根据column排序，因此还会触发排序开销问题</li></ul><p><img src="https://bu.dusays.com/2024/05/13/6641dad7246f5.png" alt="202310251912542"></p><p><strong>建议：</strong></p><ul><li>让 group by 字段用上表的索引，确认方法是 explain 的Extra结果里有没有 Using temporary 和 Using filesort；通过索引建立，只需要顺序扫描到数据结束，就可以拿到 group by 的结果，不需要临时表，也不需要再额外排序</li></ul><p><img src="https://oss.serms.top/blog/202405131718823.png?x-oss-process=style/serms_watermark" alt="202310251913287"></p><ul><li>如果对 group by 语句的结果没有排序要求，要在语句后面加 order by null</li><li>如果 group by 需要统计的数据量不大，尽量只使用内存临时表；可以通过适当调大tmp_table_size 参数，来避免用到磁盘临时表</li><li>如果数据量实在太大，使用 SQL_BIG_RESULT 这个hint，来告诉优化器直接使用排序算法得到 group by 的结果</li></ul><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>当关联被驱动表上使用到索引时，会使用 Index Nested-Loop Join （NLJ）算法</p><p>当关联被驱动表上没有使用到索引时（即t2的字段a无索引），会使用 Block Nested-Loop Join（BNL）算法</p><p><strong>建议：</strong></p><p>NLJ算法优化：小表驱动大表，在join的时候如果明确知道哪张表是小表时可以使用straight_join写法固定连接驱动方式</p><p>BNL算法优化：</p><ul><li>给被驱动表的join字段加上索引，把BNL算法转成NLJ算法</li><li>无法设置索引的情况可以通过设置join_buffer_size参数来控制Join Buffer的大小，以减少分段查询次数</li></ul><p>Hash Join算法优化：增加 join_buffer_size值避免生成文件</p><h4 id="in-amp-exists"><a href="#in-amp-exists" class="headerlink" title="in &amp; exists"></a>in &amp; exists</h4><p>in执行流程：查询子查询的表且内外表有关联时，先执行内层表的子查询，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选，得到结果集。所以相对内表比较小的时候，in的速度较快</p><p>exists执行流程：指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的，匹配上就将结果放入结果集中</p><p><strong>建议：</strong></p><p>遵循小表驱动大表：<strong>exists是以外层表为驱动表、IN是先执行内层表的**</strong>子查询**。如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in；反之如果外层的主查询记录较少，子查询中的表大且又有索引时使用exists</p><h4 id="not-in-amp-not-exists"><a href="#not-in-amp-not-exists" class="headerlink" title="not in &amp; not exists"></a>not in &amp; not exists</h4><p>not in使用的是全表扫描没有用到索引；而not exists在子查询依然能用到表上的索引</p><p><strong>建议：</strong></p><p>使用not exists代替not in</p><h4 id="查询记录是否存在"><a href="#查询记录是否存在" class="headerlink" title="查询记录是否存在"></a>查询记录是否存在</h4><p>在很多时候开发人员判断某一条件对应的记录是否存在时会采用select count(*)，但是这样子会导致扫描所有符合条件的数据</p><p><strong>建议：</strong></p><p>改用limit 1，这样子数据库查询到一条符合条件的记录就会返回，不需要再继续查找还有多少条记录</p><h3 id="资源占用"><a href="#资源占用" class="headerlink" title="资源占用"></a>资源占用</h3><ul><li>锁资源等待：在读写很热的表上，通常会发生锁资源争夺，从而导致慢查询的情况<ul><li>谨慎使用for update</li><li>增删改尽量使用到索引</li><li>降低并发，避免对同一条数据进行反复修改</li></ul></li><li>网络波动：往客户端发送数据时发生网络波动导致的慢查询</li><li>硬件配置：CPU利用率高，磁盘IO经常满载，导致慢查询</li></ul><p>在高并发、高流量下，数据库所在机器的负载load过高也会导致SQL整体执行时间过长，这时可能需要从机器和实例的分配，分布式部署，分库分表，读写分离等角度进行优化</p><h3 id="业务改造"><a href="#业务改造" class="headerlink" title="业务改造"></a>业务改造</h3><ul><li>是不是真的需要全部查出来，还是取其中的top N就能够满足需求了</li><li>查询条件过多的情况下，能否前端页面提示限制过多的查询条件的使用</li><li>针对实时导出的数据，涉及到实时查DB导出大量数据时，限制导出数据量 or 走T+1的离线导出是不是也是可以的</li><li>现在业务上需要做数据搜索，使用了 LIKE “%关键词%” 做全模糊查询，从而导致了慢SQL。是不是可以让业务方妥协下，最右模糊匹配，这样就可以利用上索引了</li></ul><h3 id="源头替换"><a href="#源头替换" class="headerlink" title="源头替换"></a>源头替换</h3><p>Mysql并不是任何的查询场景都是适合的，如需要支持全模糊搜索时，全模糊的like是无法走到索引的。同时结合数据本身的生命周期，对于热点数据，可以考虑存储到缓存解决。因此针对不适合mysql数据源的情况，我们需要替代新的存储介质</p><ul><li>有like的全模糊的查询，比如基于文本内容去查订单信息，需要接搜索引擎解决</li><li>有热点数据的查询，考虑是否要接缓存解决</li><li>针对复杂条件的海量数据查询，可以考虑切换到OLAP(Online Analytical Processing)，可以考虑接Hybrid DB或ADB通道</li><li>有些场景Mysql不适用，需要用K-V的数据库，HBASE等列式存储的存储引擎</li></ul><h3 id="数据减少"><a href="#数据减少" class="headerlink" title="数据减少"></a>数据减少</h3><p>SQL本身的性能已经到达极限了，但是耗时仍然很长，可能由于数据量或索引数据都比较大了。因此需要从数据量级减少的角度去处理</p><ul><li>使用分库分表。由于单表的数据量过大，例如达到千万级别的数据了，需要使用分库分表技术拆分后减轻单库单表的单点压力</li><li>定时清理终态数据。针对已经状态为终态的业务单据或明显信息，可以使用idb历史数据清理的方式配置定时自动清理。如针对我们的仓储库存操作明细为完结状态的数据，我们只保留最近1天的数据在db中，其他直接删除，减少db查询压力</li><li>统计类查询可以单独维护汇总数据表。参考数据仓库中的数据分层设计，基于明细数据，抽出一张指标汇总表，或7天/15天等的视图数据进行预计算。此类汇总表数据量级相比明细表下降很多，从而避免直接根据大量明细查询聚合造成慢sql</li></ul><h3 id="实践举例"><a href="#实践举例" class="headerlink" title="实践举例"></a>实践举例</h3><ul><li>SQL语句分析</li><li>分析sql时间点发现固定db某个示例会导致RT尖峰抖动，发现磁盘也有相应问题。怀疑DB某些库磁盘问题导致，联系DBA确认后进行主备切换解决</li><li>核销慢sql查询迟迟难以解决。发现库存核销记录每天增量数据达到百万级别，但是核销创建状态记录只有20%~30%左右，因此对完结状态的核销记录idb配置定时清理，由15天缩短到2天，减少db数据量</li><li>库存sn查询涉及复杂查询，采用切换到OLAP链路，通过数据同步中间件完成从db到HybridDB一键同步，切换数据源后问题解决</li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/chuixue24/article/details/100031812">MySQL中IS NULL、IS NOT NULL、!=是否走索引</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Redis</title>
      <link href="/posts/f64403ff.html"/>
      <url>/posts/f64403ff.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker部署Redis"><a href="#Docker部署Redis" class="headerlink" title="Docker部署Redis"></a>Docker部署Redis</h2><h3 id="创建数据卷映射目录"><a href="#创建数据卷映射目录" class="headerlink" title="创建数据卷映射目录"></a>创建数据卷映射目录</h3><p>这里我存放的路径为<code>data/app</code>为例，按需创建data、conf、log目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/app/redis/data</span><br><span class="line">mkdir -p /data/app/redis/conf</span><br><span class="line">mkdir -p /data/app/redis/log</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/03/20/65fa80eb56a33.png" alt="image-20240320142226287"></p><h3 id="获取配置文件"><a href="#获取配置文件" class="headerlink" title="获取配置文件"></a>获取配置文件</h3><p>关于拉取配置文件这里建议访问<a href="https://redis.io/docs/management/config/">redisConfig</a>看一下,当前稳定的版本是哪些</p><p><img src="https://bu.dusays.com/2024/03/20/65fa9b2c31d62.png" alt="image-20240320161533213"></p><p>截止至此文发布时<strong>最新版本为<code>7.2</code></strong>，这里直接拿<code>7.2</code>做演示，在<a href="https://github.com/redis/redis/blob/7.2/redis.conf">RedisGithub</a>仓库中找到对应版本的<code>redis.conf</code>文件，<strong>点击复制</strong></p><p><img src="https://bu.dusays.com/2024/03/20/65fa9c9329092.png" alt="image-20240320162052637"></p><p>在<code>/data/app/redis/conf/</code>路径下创建<code>redis.conf</code>文件，随后修改文件，直接将复制的内容粘贴进去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> redis.conf</span><br><span class="line">vim redis.conf</span><br><span class="line">或</span><br><span class="line">vi redis.conf</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见的配置项 这里仅作参考</span></span><br><span class="line">daemonize <span class="built_in">yes</span> <span class="comment">#是否以守护进程方式运行</span></span><br><span class="line">port 6379 <span class="comment"># Redis服务器监听的端口</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment"># 绑定的主机IP地址</span></span><br><span class="line">requirepass <span class="comment">#设置密码</span></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 常用注释说明 </summary>              <div class='content'>              <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通用设置</span></span><br><span class="line">daemonize no                  <span class="comment"># 是否以守护进程方式运行 Redis</span></span><br><span class="line">pidfile /var/run/redis_6379.pid  <span class="comment"># Redis 进程 ID 文件路径</span></span><br><span class="line">port 6379                     <span class="comment"># Redis 监听的端口号</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1                <span class="comment"># Redis 监听的地址（默认为本地回环地址）</span></span><br><span class="line">requirepass<span class="comment"># 密码配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接设置</span></span><br><span class="line"><span class="built_in">timeout</span> 0                     <span class="comment"># Redis 客户端连接超时时间</span></span><br><span class="line">tcp-keepalive 0               <span class="comment"># 是否开启 TCP keepalive</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通信协议设置</span></span><br><span class="line">tcp-backlog 511               <span class="comment"># TCP listen() 函数的等待队列长度</span></span><br><span class="line">tcp-keepalive 300             <span class="comment"># TCP keepalive 时间间隔，单位为秒</span></span><br><span class="line">unixsocket /var/run/redis/redis.sock  <span class="comment"># Unix 套接字文件路径</span></span><br><span class="line">unixsocketperm 700            <span class="comment"># Unix 套接字文件的权限</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通用配置项</span></span><br><span class="line">loglevel notice               <span class="comment"># 日志记录级别</span></span><br><span class="line">logfile /var/log/redis/redis.log  <span class="comment"># 日志文件路径</span></span><br><span class="line">syslog-enabled no             <span class="comment"># 是否将日志输出到系统日志</span></span><br><span class="line">syslog-ident redis            <span class="comment"># 系统日志标识符</span></span><br><span class="line">syslog-facility local0        <span class="comment"># 系统日志设施</span></span><br><span class="line">databases 16                  <span class="comment"># Redis 数据库数量</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 快照配置项</span></span><br><span class="line">save 900 1                    <span class="comment"># 触发快照保存的条件（900 秒内至少有一个键被修改）</span></span><br><span class="line">save 300 10                   <span class="comment"># 触发快照保存的条件（300 秒内至少有 10 个键被修改）</span></span><br><span class="line">save 60 10000                 <span class="comment"># 触发快照保存的条件（60 秒内至少有 10000 个键被修改）</span></span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span>  <span class="comment"># 快照保存出错时是否停止写入操作</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span>            <span class="comment"># 是否开启 RDB 文件压缩</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span>               <span class="comment"># 是否开启 RDB 文件校验</span></span><br><span class="line">dbfilename dump.rdb           <span class="comment"># RDB 文件名</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># AOF 配置项</span></span><br><span class="line">appendonly no                 <span class="comment"># 是否开启 AOF 持久化</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span>  <span class="comment"># AOF 持久化文件名</span></span><br><span class="line">appendfsync everysec          <span class="comment"># AOF 持久化的同步方式</span></span><br><span class="line">no-appendfsync-on-rewrite no  <span class="comment"># 是否在 AOF 重写时禁止同步</span></span><br><span class="line">auto-aof-rewrite-percentage 100  <span class="comment"># 触发 AOF 重写的条件（AOF 文件大小增长率达到 100%）</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb  <span class="comment"># 触发 AOF 重写的条件（AOF 文件最小大小）</span></span><br><span class="line">aof-load-truncated <span class="built_in">yes</span>        <span class="comment"># 是否在 AOF 文件被截断时继续加载剩余内容</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 主从复制配置项</span></span><br><span class="line">slave-serve-stale-data <span class="built_in">yes</span>    <span class="comment"># 从节点是否在主节点不可用时仍然向客户端提供服务</span></span><br><span class="line">slave-read-only <span class="built_in">yes</span>           <span class="comment"># 从节点是否只读</span></span><br><span class="line">repl-diskless-sync no         <span class="comment"># 是否在复制时避免使用磁盘</span></span><br><span class="line">repl-diskless-sync-delay 5    <span class="comment"># 复制时磁盘同步延迟时间，单位为秒</span></span><br><span class="line">repl-ping-slave-period 10     <span class="comment"># 主节点发送 ping 命令的时间间隔，单位为秒</span></span><br><span class="line">repl-timeout 60               <span class="comment"># 主从节点之间的心跳超时时间，单位为秒</span></span><br><span class="line">repl-disable-tcp-nodelay no   <span class="comment"># 是否禁用 TCP_NODELAY 算法</span></span><br><span class="line">slave-priority 100            <span class="comment"># 从节点优先级</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Sentinel 配置项</span></span><br><span class="line">sentinel deny-scripts-reconfig <span class="built_in">yes</span>  <span class="comment"># 是否允许 Sentinel 脚本重新配置 Redis</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2  <span class="comment"># 监控的主节点名称、IP 地址、端口号、quorum</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000  <span class="comment"># 主节点失效判定时间，单位为毫秒</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 附加配置项</span></span><br><span class="line">always-show-logo</span><br><span class="line"><span class="comment"># 是否在命令行启动时显示 Redis Logo，默认为 yes。可以将该选项设置为 no，以屏蔽 Redis Logo 的显示。</span></span><br><span class="line">hz</span><br><span class="line"><span class="comment"># 控制 Redis 在每秒钟运行的循环次数。默认为 10，表示每秒钟运行 10 次循环。可以将该选项设置为一个正整数，以控制 Redis 运行的速度</span></span><br><span class="line">include</span><br><span class="line"><span class="comment"># 允许在配置文件中包含其他文件，默认为 &quot;&quot;，表示不包含其他文件。可以将该选项设置为实际文件名，以包含其他文件的配置项。</span></span><br><span class="line">lua-time-limit</span><br><span class="line"><span class="comment"># 控制 Lua 脚本的执行时间限制，默认为 5000 毫秒。可以将该选项设置为一个正整数，以控制 Lua 脚本的最长执行时间。</span></span><br><span class="line">repl-backlog-size</span><br><span class="line"><span class="comment"># 控制 Redis 复制功能的回放缓冲区大小，默认为 1MB。可以将该选项设置为一个正整数，以控制回放缓冲区的大小。</span></span><br><span class="line">repl-diskless-sync</span><br><span class="line"><span class="comment"># 是否在复制时避免使用磁盘，即将数据直接从主节点传输到从节点的内存中，默认为 no。可以将该选项设置为 yes，以避免磁盘的使用。</span></span><br><span class="line">repl-ping-slave-period</span><br><span class="line"><span class="comment"># 控制主节点发送 ping 命令的时间间隔，默认为 10 秒。可以将该选项设置为一个正整数，以控制 ping 命令的发送间隔。</span></span><br><span class="line">repl-timeout</span><br><span class="line"><span class="comment"># 控制主从节点之间的心跳超时时间，默认为 60 秒。可以将该选项设置为一个正整数，以控制心跳超时时间。</span></span><br><span class="line">appendonly</span><br><span class="line"><span class="comment"># 是否开启 AOF 持久化，默认为 no。AOF 持久化可以保证 Redis 在宕机时不会丢失数据，但会增加额外的磁盘写入操作。</span></span><br><span class="line">appendfilename</span><br><span class="line"><span class="comment"># AOF 持久化文件名，默认为 appendonly.aof。可以将该选项设置为实际文件名。</span></span><br><span class="line">appendfsync</span><br><span class="line"><span class="comment"># AOF 持久化的同步方式，默认为 everysec。可以将该选项设置为 always、everysec 或 no，分别表示每个写入命令时同步、每秒同步一次或不同步。</span></span><br><span class="line">save</span><br><span class="line"><span class="comment"># RDB 持久化的触发条件，默认为 save 900 1，表示如果 900 秒内至少有一个键被修改，则执行 RDB 持久化。可以设置多个触发条件，例如 save 300 10 表示如果 300 秒内至少有 10 个键被修改，则执行 RDB 持久化。</span></span><br><span class="line">rdbcompression</span><br><span class="line"><span class="comment"># 是否开启 RDB 文件压缩，默认为 yes。开启压缩可以减少磁盘空间的占用，但会增加 CPU 的负载。</span></span><br><span class="line">maxmemory-policy</span><br><span class="line"><span class="comment"># Redis 内存达到最大限制后的淘汰策略，默认为 noeviction，表示停止写入操作。其他可选策略包括 volatile-lru、volatile-ttl、volatile-random、allkeys-lru、allkeys-random 等。</span></span><br><span class="line">client-output-buffer-limit</span><br><span class="line"><span class="comment"># 控制客户端输出缓冲区的大小，默认为 client-output-buffer-limit normal 0 0 0，表示不限制缓冲区大小。可以将该选项设置为实际缓冲区大小，以避免客户端输出缓冲区溢出。</span></span><br><span class="line">notify-keyspace-events</span><br><span class="line"><span class="comment"># 开启键空间通知功能，默认为 &quot;&quot;，表示关闭键空间通知功能。可以将该选项设置为 KEA、KgE、lsh、E、gxE 等，表示监听不同类型的键空间事件。</span></span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="启动redis容器"><a href="#启动redis容器" class="headerlink" title="启动redis容器"></a>启动redis容器</h3><p>在启动Redis容器前，请确定你的数据卷映射。在下属示例中，数据卷映射的路径为<code>/data/app/redis/xxxx</code>，如果不一样请记得修改。启动容器后，系统将自动从远程仓库拉取相应版本的Redis镜像。请务必确保所拉取的Redis版本与之前复制的配置文件版本一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 \</span><br><span class="line">    --name redis \</span><br><span class="line">    -v /data/app/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">    -v /data/app/redis/data:/data \</span><br><span class="line">    -v /data/app/redis/logs:/logs \</span><br><span class="line">    --restart always \</span><br><span class="line">    -d redis:7.2 redis-server /etc/redis/redis.conf \</span><br><span class="line">    --appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>或不指定配置文件启动，<strong>不要/etc/redis/redis.conf</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 \</span><br><span class="line">--name redis \</span><br><span class="line">-v /data/app/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /data/app/redis/data:/data \</span><br><span class="line">-v /data/app/redis/log:/var/log/redis \</span><br><span class="line">--restart always \</span><br><span class="line">-d redis:7.2 redis-server \</span><br><span class="line">--appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p><strong>必须：</strong></p><ul><li>-p 6379:6379 端口映射：前表示主机部分，：后表示容器部分。</li><li>–name myredis 指定该容器名称，查看和进行操作都比较方便。</li></ul><p><strong>可选</strong>：</p><ul><li>-v 挂载目录，规则与端口映射相同。</li><li>-d redis 表示后台启动redis</li><li>redis-server /etc/redis/redis.conf 以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的录/data/app/redis/conf/redis.conf</li><li>appendonly yes 开启redis 持久化</li><li>—restart always 表示开机启动</li><li>—network serms-net 网卡 </li></ul><p><img src="https://bu.dusays.com/2024/03/20/65faac440dda4.png" alt="image-20240320172830013"></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><strong>进入redis容器使用redis-cli命令进行连接</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure><ul><li><strong>查看启动日志</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs myredis <span class="comment"># 后面跟容器名 or 容器ID 都可以</span></span><br><span class="line">docker logs --since 30m &lt;容器名&gt; <span class="comment"># --since 30m 是查看此容器30分钟之内的日志情况。</span></span><br></pre></td></tr></table></figure><ul><li>Docker 停止、删除、重启、启动容器</li></ul><p>正常删除容器，一般是先停止容器，再进行删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker stop [容器名|容器ID] <span class="comment">#停止容器</span></span><br><span class="line">docker start   [容器名|容器ID]  <span class="comment">#启动停止的容器</span></span><br><span class="line">docker restart  [容器名|容器ID]  <span class="comment"># 将容器重新启动</span></span><br><span class="line">docker <span class="built_in">kill</span> [容器名|容器ID] <span class="comment">#强行终止</span></span><br><span class="line">docker <span class="built_in">rm</span> [容器名|容器ID]   <span class="comment"># 删除停止的容器</span></span><br></pre></td></tr></table></figure><h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><p>如果还有其他问题可留言，博主会尽力帮你解决</p><h3 id="Redis-Client-On-Error-Error-write-ECONNABORTED-Config-right"><a href="#Redis-Client-On-Error-Error-write-ECONNABORTED-Config-right" class="headerlink" title="Redis Client On Error: Error: write ECONNABORTED Config right?"></a>Redis Client On Error: Error: write ECONNABORTED Config right?</h3><ol><li><p>方法一</p><blockquote><p>bind 0.0.0.0 注释 或者设置为<code>bind 0.0.0.0</code></p><p>protected-mode 设置为<code>no</code></p></blockquote><p><img src="https://bu.dusays.com/2024/03/20/65fafb3599bc3.png" alt="image-20240320230513561"></p></li><li><p>方法二</p><p>设置密码</p><p><img src="https://bu.dusays.com/2024/03/20/65fafb9806b29.png" alt="image-20240320230659087"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Oracle11g</title>
      <link href="/posts/3bf450c5.html"/>
      <url>/posts/3bf450c5.html</url>
      
        <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><p><mark class="hl-label blue">Docker安装请看这篇:</mark>  <a class="btn-anzhiyu outline" href="https://blog.serms.top/post/53d552cb"   title="Docker安装部署"><span>Docker安装部署</span></a></p></div><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><blockquote><p>oracle镜像来自registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g 账户：root/helowin</p></blockquote><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br><span class="line">或 </span><br><span class="line">docker pull akaiot/oracle_11g</span><br></pre></td></tr></table></figure><h3 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无数据卷挂载</span></span><br><span class="line">docker run -d -p 1521:1521 --name oracle11g akaiot/oracle_11g</span><br><span class="line"><span class="comment"># 有数据卷挂载</span></span><br><span class="line">docker run -d --name oracle11g -p 1521:1521 --privileged=<span class="literal">true</span>  -v /data/app/oracle/oradata:/serms/oracle/oradata akaiot/oracle_11g</span><br></pre></td></tr></table></figure><h3 id="进入oracle11g容器进行配置"><a href="#进入oracle11g容器进行配置" class="headerlink" title="进入oracle11g容器进行配置"></a>进入oracle11g容器进行配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it oracle11g bash</span><br></pre></td></tr></table></figure><h3 id="切换到root用户下进行配置"><a href="#切换到root用户下进行配置" class="headerlink" title="切换到root用户下进行配置"></a>切换到root用户下进行配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">密码为：helowin</span><br></pre></td></tr></table></figure><h3 id="编辑profile文件配置ORACLE环境变量"><a href="#编辑profile文件配置ORACLE环境变量" class="headerlink" title="编辑profile文件配置ORACLE环境变量"></a>编辑profile文件配置ORACLE环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>在最下边添加如下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line">export ORACLE_SID=helowin</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="让配置立刻生效"><a href="#让配置立刻生效" class="headerlink" title="让配置立刻生效"></a>让配置立刻生效</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s $ORACLE_HOME/bin/sqlplus /usr/bin</span><br></pre></td></tr></table></figure><h3 id="切换到oracle-用户"><a href="#切换到oracle-用户" class="headerlink" title="切换到oracle 用户"></a>切换到oracle 用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure><h3 id="登录sqlplus并修改sys、system用户密码并刷新权限"><a href="#登录sqlplus并修改sys、system用户密码并刷新权限" class="headerlink" title="登录sqlplus并修改sys、system用户密码并刷新权限"></a>登录sqlplus并修改sys、system用户密码并刷新权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sqlplus <span class="operator">/</span>nolog</span><br><span class="line">conn <span class="operator">/</span><span class="keyword">as</span> sysdba</span><br><span class="line"># 修改<span class="keyword">system</span>用户的密码为&quot;root&quot;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="keyword">system</span> identified <span class="keyword">by</span> root;</span><br><span class="line"># 修改sys用户的密码为&quot;root&quot;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> sys identified <span class="keyword">by</span> root;</span><br><span class="line"># 修改默认配置文件中密码有效期策略，将密码的有效期设置为永久有效（UNLIMITED）</span><br><span class="line"><span class="keyword">ALTER</span> PROFILE <span class="keyword">DEFAULT</span> LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br></pre></td></tr></table></figure><p>退出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure><h3 id="查看一下oracle实例状态"><a href="#查看一下oracle实例状态" class="headerlink" title="查看一下oracle实例状态"></a>查看一下oracle实例状态</h3><p>lsnrctl status</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[oracle@4b4795fdc52f ~]$ lsnrctl status</span><br><span class="line"></span><br><span class="line">LSNRCTL for Linux: Version 11.2.0.1.0 - Production on 18-MAR-2024 11:16:46</span><br><span class="line"></span><br><span class="line">Copyright (c) 1991, 2009, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))</span><br><span class="line">STATUS of the LISTENER</span><br><span class="line">------------------------</span><br><span class="line">Alias                     LISTENER</span><br><span class="line">Version                   TNSLSNR for Linux: Version 11.2.0.1.0 - Production</span><br><span class="line">Start Date                18-MAR-2024 11:04:17</span><br><span class="line">Uptime                    0 days 0 hr. 12 min. 29 sec</span><br><span class="line">Trace Level               off</span><br><span class="line">Security                  ON: Local OS Authentication</span><br><span class="line">SNMP                      OFF</span><br><span class="line">Listener Parameter File   /home/oracle/app/oracle/product/11.2.0/dbhome_2/network/admin/listener.ora</span><br><span class="line">Listener Log File         /home/oracle/app/oracle/diag/tnslsnr/4b4795fdc52f/listener/alert/log.xml</span><br><span class="line">Listening Endpoints Summary...</span><br><span class="line">  (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))</span><br><span class="line">  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=4b4795fdc52f)(PORT=1521)))</span><br><span class="line">Services Summary...</span><br><span class="line">Service &quot;helowin&quot; has 1 instance(s).</span><br><span class="line">  Instance &quot;helowin&quot;, status READY, has 1 handler(s) for this service...</span><br><span class="line">Service &quot;helowinXDB&quot; has 1 instance(s).</span><br><span class="line">  Instance &quot;helowin&quot;, status READY, has 1 handler(s) for this service...</span><br><span class="line">The command completed successfully</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改字符集编码为GBK"><a href="#修改字符集编码为GBK" class="headerlink" title="修改字符集编码为GBK"></a>修改字符集编码为GBK</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">connect</span> sys<span class="operator">/</span>root <span class="keyword">as</span> SYSDBA;</span><br><span class="line">SHUTDOWN IMMEDIATE;</span><br><span class="line">STARTUP MOUNT;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> ENABLE RESTRICTED SESSION;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> JOB_QUEUE_PROCESSES<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> AQ_TM_PROCESSES<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">OPEN</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 跳过超子集检测</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">CHARACTER SET</span> INTERNAL_USE ZHS16GBK; </span><br><span class="line">SHUTDOWN IMMEDIATE;</span><br><span class="line">STARTUP;</span><br></pre></td></tr></table></figure><h2 id="集成平台Oracle配置"><a href="#集成平台Oracle配置" class="headerlink" title="集成平台Oracle配置"></a>集成平台Oracle配置</h2><p>Oracle的部署至此已经部署完毕,下述为个人项目需要配置的内容,有需要可以做参考:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it oracle11g bash</span><br><span class="line">su - oracle</span><br><span class="line"><span class="comment">#passowrd oracle</span></span><br><span class="line">sqlplus / as sysdba</span><br></pre></td></tr></table></figure><h3 id="设置Process最大进程数"><a href="#设置Process最大进程数" class="headerlink" title="设置Process最大进程数"></a>设置Process最大进程数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> processes<span class="operator">=</span><span class="number">800</span> <span class="keyword">scope</span> <span class="operator">=</span> spfile;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> processes<span class="operator">=</span><span class="number">1600</span> <span class="keyword">scope</span> <span class="operator">=</span> spfile;</span><br></pre></td></tr></table></figure><h3 id="修改账号密码修改期限"><a href="#修改账号密码修改期限" class="headerlink" title="修改账号密码修改期限"></a>修改账号密码修改期限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Alter</span> PROFILE <span class="keyword">DEFAULT</span> LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br></pre></td></tr></table></figure><h3 id="设置参数SQLNET-EXPIRE-TIME"><a href="#设置参数SQLNET-EXPIRE-TIME" class="headerlink" title="设置参数SQLNET.EXPIRE_TIME"></a>设置参数SQLNET.EXPIRE_TIME</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$ORACLE_HOME</span>/network/admin/</span><br><span class="line">vi sqlnet.ora</span><br><span class="line">SQLNET.EXPIRE_TIME=20</span><br><span class="line"><span class="comment"># 设置完后需重启服务</span></span><br></pre></td></tr></table></figure><p>设置游标数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter system <span class="built_in">set</span> open_cursors=2000;</span><br></pre></td></tr></table></figure><p>对Oracle Users表空增加dbf文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> tablespace USERS  <span class="keyword">add</span> datafile <span class="string">&#x27;/home/oracle/app/oracle/oradata/helowin/USERS02.DBF&#x27;</span> size <span class="number">500</span>M autoextend <span class="keyword">on</span> next <span class="number">50</span>M maxsize unlimited ;</span><br><span class="line"><span class="keyword">alter</span> tablespace USERS  <span class="keyword">add</span> datafile <span class="string">&#x27;/home/oracle/app/oracle/oradata/helowin/USERS03.DBF&#x27;</span> size <span class="number">500</span>M autoextend <span class="keyword">on</span> next <span class="number">50</span>M maxsize unlimited ;</span><br><span class="line"><span class="keyword">alter</span> tablespace USERS  <span class="keyword">add</span> datafile <span class="string">&#x27;/home/oracle/app/oracle/oradata/helowin/USERS04.DBF&#x27;</span> size <span class="number">500</span>M autoextend <span class="keyword">on</span> next <span class="number">50</span>M maxsize unlimited ;</span><br><span class="line"><span class="keyword">alter</span> tablespace USERS  <span class="keyword">add</span> datafile <span class="string">&#x27;/home/oracle/app/oracle/oradata/helowin/USERS05.DBF&#x27;</span> size <span class="number">500</span>M autoextend <span class="keyword">on</span> next <span class="number">50</span>M maxsize unlimited ;</span><br><span class="line"><span class="keyword">alter</span> tablespace USERS  <span class="keyword">add</span> datafile <span class="string">&#x27;/home/oracle/app/oracle/oradata/helowin/USERS06.DBF&#x27;</span> size <span class="number">500</span>M autoextend <span class="keyword">on</span> next <span class="number">50</span>M maxsize unlimited ;</span><br><span class="line"><span class="keyword">alter</span> tablespace USERS  <span class="keyword">add</span> datafile <span class="string">&#x27;/home/oracle/app/oracle/oradata/helowin/USERS07.DBF&#x27;</span> size <span class="number">500</span>M autoextend <span class="keyword">on</span> next <span class="number">50</span>M maxsize unlimited ;</span><br><span class="line"><span class="keyword">alter</span> tablespace USERS  <span class="keyword">add</span> datafile <span class="string">&#x27;/home/oracle/app/oracle/oradata/helowin/USERS08.DBF&#x27;</span> size <span class="number">500</span>M autoextend <span class="keyword">on</span> next <span class="number">50</span>M maxsize unlimited ;</span><br><span class="line"><span class="keyword">alter</span> tablespace USERS  <span class="keyword">add</span> datafile <span class="string">&#x27;/home/oracle/app/oracle/oradata/helowin/USERS09.DBF&#x27;</span> size <span class="number">500</span>M autoextend <span class="keyword">on</span> next <span class="number">50</span>M maxsize unlimited ;</span><br><span class="line"><span class="keyword">alter</span> tablespace USERS  <span class="keyword">add</span> datafile <span class="string">&#x27;/home/oracle/app/oracle/oradata/helowin/USERS10.DBF&#x27;</span> size <span class="number">500</span>M autoextend <span class="keyword">on</span> next <span class="number">50</span>M maxsize unlimited ;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/03/18/65f7c4f3e4c47.png" alt="image-20240318095901584"></p><p>链接Docker中Oracle服务,执行如下命令,创建用户并授予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> datamanager  identified <span class="keyword">by</span> data  <span class="keyword">default</span> tablespace USERS  temporary tablespace TEMP;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> datacenter  identified <span class="keyword">by</span> data  <span class="keyword">default</span> tablespace USERS  temporary tablespace TEMP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> job_queue_processes<span class="operator">=</span><span class="number">20</span>; </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> aq_tm_processes<span class="operator">=</span><span class="number">10</span>; </span><br><span class="line"><span class="comment">------------------datamanager给dataceneter授权</span></span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> datamanager;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> datamanager;</span><br><span class="line"><span class="keyword">grant</span> resource <span class="keyword">to</span> datamanager;</span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">grant</span> resource <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> job_queue_processes<span class="operator">=</span><span class="number">20</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">view</span> <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> dbms_sql  <span class="keyword">To</span> datacenter;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> dba_jobs_running <span class="keyword">TO</span> datacenter;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> dba_jobs <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> dbms_ddl <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> dba_users <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> dbms_sql  <span class="keyword">To</span> datacenter;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> dba_jobs_running <span class="keyword">TO</span> datacenter;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> dba_jobs <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">any</span> <span class="keyword">table</span> <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">any</span> <span class="keyword">table</span> <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> DBA_DATA_FILES  <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">alter</span> tablespace <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> MATERIALIZED <span class="keyword">VIEW</span> <span class="keyword">TO</span> datacenter;</span><br><span class="line"><span class="comment">--------------导入数据后执行--------------</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">insert</span>, <span class="keyword">update</span>, <span class="keyword">delete</span>, <span class="keyword">references</span>, <span class="keyword">alter</span>, index <span class="keyword">on</span> datamanager.EAPARAM <span class="keyword">to</span> DATACENTER;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> DATACENTER.v_dept <span class="keyword">to</span> datamanager <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> DATACENTER.v_empl <span class="keyword">to</span> datamanager <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> datamanager.Eauser <span class="keyword">to</span> datacenter;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> datamanager.v_eadept <span class="keyword">to</span> datacenter <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br></pre></td></tr></table></figure><h3 id="导入dmp数据文件"><a href="#导入dmp数据文件" class="headerlink" title="导入dmp数据文件"></a>导入dmp数据文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imp userid=DATACENTER/data file=/serms/oracle/oradata/dmp/1.dmp full=y</span><br></pre></td></tr></table></figure><p> 导入数据后处理（空表不能导出处理，在datacenter下执行）：</p><p>select ‘alter table ‘||table_name||’ allocate extent;’ from user_tables where num_rows=0</p><p>把查询结果在PLSQL中执行，以空行数据进行导出处理。</p><p>T_TERM_DETAIL</p>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Oracle11g </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一招教你解锁Jetbrains全家桶</title>
      <link href="/posts/8d3fe41f.html"/>
      <url>/posts/8d3fe41f.html</url>
      
        <content type="html"><![CDATA[<h2 id="今天教大家永久解锁-Jetbrains所有产品"><a href="#今天教大家永久解锁-Jetbrains所有产品" class="headerlink" title="今天教大家永久解锁 Jetbrains所有产品"></a>今天教大家永久解锁 Jetbrains所有产品</h2><p>先上效果图</p><p><img src="https://bu.dusays.com/2024/03/11/65eeb14105f62.png" alt="image-20240311152208036" style="zoom:50%;" /></p><p><img src="https://bu.dusays.com/2024/03/11/65eeb175264b0.png" alt="image-20240311152330767" style="zoom:50%;" /></p><h2 id="正片开始"><a href="#正片开始" class="headerlink" title="正片开始"></a>正片开始</h2><h3 id="下载Jetbrains产品"><a href="#下载Jetbrains产品" class="headerlink" title="下载Jetbrains产品"></a>下载Jetbrains产品</h3><p>这里我那Idea来做演示</p><p>直接去<a href="https://www.jetbrains.com.cn/idea/download/?section=windows">官网</a>下载最新版,不要犹豫,直接点下载即可, 这里只需要注意你的系统版本即可,Mac的需要对应下载Mac版本的Idea</p><p><img src="https://bu.dusays.com/2024/03/11/65eeb20c43912.png" alt="image-20240311152602405"></p><h3 id="下载破解包"><a href="#下载破解包" class="headerlink" title="下载破解包"></a>下载破解包</h3><p><a href="https://gateway.pinata.cloud/ipfs/bafybeia4nrbuvpfd6k7lkorzgjw3t6totaoko7gmvq5pyuhl2eloxnfiri/">点我跳转</a>,下载 <strong>jetbra.zip</strong>文件:</p><p><img src="https://bu.dusays.com/2024/03/11/65eeb3115003d.png" alt="image-20240311153023578"></p><h3 id="破解安装"><a href="#破解安装" class="headerlink" title="破解安装"></a>破解安装</h3><p>先装idea，如果之前已有idea或别的Jetbrains产品<strong>请先卸载</strong>，卸载这里我推荐使用<a href="https://geekuninstaller.com/">Geek</a>软件，谁用谁知道，装完之后不要打开</p><p>接着<strong>解压jetbra.zip</strong>，进入到 <strong>scripts</strong>文件，安装顺执行<strong>install-all-users.vbs</strong>、<strong>install-current-user.vbs</strong>两个文件</p><p><img src="https://bu.dusays.com/2024/03/11/65eeb46bb7c97.png" alt="image-20240311153610275"></p><p>如果怕idea卸载有残留，可以先执行 <strong>uninstall</strong></p><p><img src="https://bu.dusays.com/2024/03/11/65eeb48303839.png" alt="image-20240311153633619"></p><p>在刚刚的网站上找到你所需要破解的Jetbrains产品，点击复制密钥</p><p><img src="https://bu.dusays.com/2024/03/11/65eeb4d4dd48d.png" alt="image-20240311153753964"></p><p>打开Idea，输入密钥即可完成注册</p><p><img src="https://bu.dusays.com/2024/03/11/65eeb52d45da9.png" alt="image-20240311153923669"></p><p>可以看到所注册时间到2026年，其实这个时间是“假的”，而你电脑上现在的idea已经实现理论永久了，时间无需在意</p><p><img src="https://bu.dusays.com/2024/03/11/65eeb58353696.png" alt="image-20240311154049590"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>其他Jetbrains产品也是类似着这样破解，温馨提示：<strong>install-all-users.vbs</strong>、<strong>install-current-user.vbs</strong> 文件只需要执行一次，如果电脑需要装多个Jetbrains的产品，那么直接再去网站上复制产品密钥进行激活即可，无需在执行文件</p><p>其次，网站上还有很多的插件密钥，大家可以去尝试激活，具体如下</p><p><img src="https://bu.dusays.com/2024/03/11/65eeb5b457f74.png" alt="image-20240311154138800"></p>]]></content>
      
      
      <categories>
          
          <category> 工具与软件 </category>
          
          <category> IDE配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jetbrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch高级操作</title>
      <link href="/posts/d7f046b9.html"/>
      <url>/posts/d7f046b9.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><ul><li>将ES中的索引全部删除</li><li>添加索引： <code>PUT hotel</code></li><li>添加几个文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">PUT /hotel</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;score&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;brand&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;city&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;starName&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;business&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pic&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;all&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /hotel/_search</span><br></pre></td></tr></table></figure><p>可以注意到Hotel映射结构中：<code>name</code>、<code>brand</code>、<code>business</code>三个字段分别使用了copy_to属性，<strong>它允许你将一个或多个字段的原始值复制到另一个指定的字段</strong>，优势在于：<strong>合并内容、简化查询、分析一致性</strong></p><p><img src="https://bu.dusays.com/2024/02/01/65bb07a708de6.png" alt="Hotel查询结果"></p><h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="全文检索查询"><a href="#全文检索查询" class="headerlink" title="全文检索查询"></a>全文检索查询</h3><ul><li>请求方式：GET 索引名/_search</li><li>请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 全文检索查询</span><br><span class="line"># match对用户输入的内容进行分词然后去倒排索引库检索</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;如家&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb093aae5fb.png" alt="image-20240201110008926"></p><p>使用合并内容字段<code>all</code>进行查询，查询外滩如家将分词为 外滩、如家，即包含两个其中一个都命中结果</p><p><img src="https://bu.dusays.com/2024/02/01/65bb0c441684d.png" alt="image-20240201111306170"></p><h3 id="查询所有文档"><a href="#查询所有文档" class="headerlink" title="查询所有文档"></a>查询所有文档</h3><ul><li>请求方式：GET 索引名/_search</li><li>请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb0cc87ced3.png" alt="image-20240201111516906"></p><h3 id="字段匹配查询-multi-match"><a href="#字段匹配查询-multi-match" class="headerlink" title="字段匹配查询:multi_match"></a>字段匹配查询:multi_match</h3><p><strong>查询的字段越多效率越慢</strong></p><ul><li><code>multi_match</code> 与 <code>match</code> 类似，不同的是它可以在多个字段中查询。</li><li>请求方式：GET 索引名/_search</li><li>请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># multi_match 多个字段搜索，参与查询字段越多，查询性能越差copy_to </span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;外滩如家&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;brand&quot;,&quot;name&quot;,&quot;business&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb0d027a87a.png" alt="image-20240201111616840"></p><h3 id="单关键字精确查询-term"><a href="#单关键字精确查询-term" class="headerlink" title="单关键字精确查询:term"></a>单关键字精确查询:term</h3><ul><li><code>term</code> 查询，精确的关键词匹配查询，不对查询条件进行分词，即只能单关键字精确查询。</li><li>请求方式：GET 索引名/_search</li><li>请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#精确查询 一般查找KeyWord、数值、日期、Boolean</span><br><span class="line"># term</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;深圳&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb0d4368dd1.png" alt="image-20240201111721811"></p><h3 id="多关键字精确查询-terms"><a href="#多关键字精确查询-terms" class="headerlink" title="多关键字精确查询:terms"></a>多关键字精确查询:terms</h3><ul><li>terms 查询和 term 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件，类似于 mysql 的 in</li><li>请求方式：GET 索引名/_search</li><li>请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: [</span><br><span class="line">        &quot;上海&quot;,</span><br><span class="line">        &quot;深圳&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb0da4deea2.png" alt="image-20240201111859144"></p><h3 id="指定字段查询-source"><a href="#指定字段查询-source" class="headerlink" title="指定字段查询:_source"></a>指定字段查询:_source</h3><ul><li>默认情况下，Elasticsearch 在搜索的结果中，会把文档中保存在 <code>_source</code> 的所有字段都返回。</li><li>如果我们只想获取其中的部分字段，我们可以添加 <code>_source</code> 的过滤</li><li>请求方式：GET 索引名/_search</li><li>请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: [</span><br><span class="line">    &quot;name&quot;,</span><br><span class="line">    &quot;price&quot;,</span><br><span class="line">    &quot;address&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: [</span><br><span class="line">        &quot;上海&quot;,</span><br><span class="line">        &quot;深圳&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb0e66e179b.png" alt="image-20240201112213271"></p><h3 id="过滤字段-includes-amp-excludes"><a href="#过滤字段-includes-amp-excludes" class="headerlink" title="过滤字段:includes&amp;excludes"></a>过滤字段:includes&amp;excludes</h3><ul><li>includes：来指定想要显示的字段</li><li>excludes：来指定不想要显示的字段</li><li>请求方式：GET 索引名/_search</li><li>请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;includes&quot;: [</span><br><span class="line">      &quot;name&quot;,</span><br><span class="line">      &quot;price&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: [</span><br><span class="line">        &quot;上海&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb0f8a7a8fc.png" alt="查询名称包含上海的酒店，返回name、price信息"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;excludes&quot;: [</span><br><span class="line">      &quot;name&quot;,</span><br><span class="line">      &quot;price&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: [</span><br><span class="line">        &quot;上海&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\SerMs\AppData\Roaming\Typora\typora-user-images\image-20240201112749170.png" alt="查询名称为上海的酒店信息，排除name和价格"></p><h3 id="组合查询-bool"><a href="#组合查询-bool" class="headerlink" title="组合查询:bool"></a>组合查询:bool</h3><ul><li><code>bool</code> 把各种其它查询通过 <code>must</code>（必须，类似 and）、<code>must_not</code>（必须不，类似 not）、<code>should</code>（应该 类似 or）的方式进行组合</li><li>请求方式：GET 索引名/_search</li><li>请求体内容</li></ul><p>查询名称必须包含如家，价格不能超过400，并且在我位置10km范围内的酒店，且结果按价格高到低排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;如家&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;price&quot;: &#123;</span><br><span class="line">              &quot;gt&quot;: 400</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;geo_distance&quot;: &#123;</span><br><span class="line">            &quot;distance&quot;: &quot;10km&quot;,</span><br><span class="line">            &quot;location&quot;: &#123;</span><br><span class="line">              &quot;lat&quot;: 31.21,</span><br><span class="line">              &quot;lon&quot;: 121.5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;price&quot;: &quot;asc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb1126d9877.png" alt="image-20240201113356960"></p><h3 id="范围查询-range"><a href="#范围查询-range" class="headerlink" title="范围查询:range"></a>范围查询:range</h3><ul><li><code>range</code> 查询找出那些落在指定区间内的数字或者时间。<code>range</code> 查询允许以下字符</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>操作符</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">gt</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">gte</td><td style="text-align:center">&gt;=</td></tr><tr><td style="text-align:center">lt</td><td style="text-align:center">&lt;</td></tr><tr><td style="text-align:center">lte</td><td style="text-align:center">&lt;=</td></tr></tbody></table></div><p>查询价格1000-3000的酒店信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># range 范围查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 1000,</span><br><span class="line">        &quot;lte&quot;: 3000</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb117e71741.png" alt="image-20240201113524705"></p><h3 id="模糊查询-fuzzy"><a href="#模糊查询-fuzzy" class="headerlink" title="模糊查询:fuzzy"></a>模糊查询:fuzzy</h3><p><code>fuzzy</code>：返回包含与搜索字词相似的字词的文档，更多<code>fuzzy</code>有关解释请查看<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/fuzziness.html">官方文档  (opens new window)</a> -编辑距离是将一个术语转换为另一个术语所需的一个字符更改的次数。这些更改可以包括：</p><p>更改字符（box → fox）</p><p>删除字符（black → lack）</p><p>插入字符（sic → sick）</p><p>转置两个相邻字符（act → cat）</p><p>为了找到相似的术语，fuzzy 查询会在指定的编辑距离内创建一组搜索词的所有可能的变体或扩展。然后查询返回每个扩展的完全匹配。</p><p>通过 <code>fuzziness</code> 修改编辑距离。一般使用默认值 <code>AUTO</code>，根据术语的长度生成编辑距离。</p><p>请求方式：GET 索引名/_search</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;fuzzy&quot;: &#123;</span><br><span class="line">      &quot;all&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;乡&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb11f7498bb.png" alt="image-20240201113725623"></p><h3 id="精确查询地理位置-geo-distance"><a href="#精确查询地理位置-geo-distance" class="headerlink" title="精确查询地理位置:geo_distance"></a>精确查询地理位置:geo_distance</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 精确查询地理位置</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;geo_distance&quot;:&#123;</span><br><span class="line">      &quot;distance&quot;:&quot;2km&quot;,</span><br><span class="line">      &quot;location&quot;:&quot;31.21,121.5&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb126d2c71f.png" alt="image-20240201113923477"></p><h3 id="复合查询-function-score"><a href="#复合查询-function-score" class="headerlink" title="复合查询:function_score"></a>复合查询:function_score</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 复合查询</span><br><span class="line"># function score 查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;all&quot;: &quot;外滩&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;brand&quot;: &quot;如家&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;weight&quot;: 10</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;sum&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb12db273fa.png" alt="image-20240201114113309"></p><h3 id="前缀查询-prefix"><a href="#前缀查询-prefix" class="headerlink" title="前缀查询:prefix"></a>前缀查询:prefix</h3><ul><li>请求方式：GET 索引名/_search</li><li>请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;上&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/02/01/65bb1341943c0.png" alt="image-20240201114255956"></p>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> 学习笔记 </category>
          
          <category> 微服务 </category>
          
          <category> 搜索服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch基本操作</title>
      <link href="/posts/9d6997a.html"/>
      <url>/posts/9d6997a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意本教程基于Es7.x版本Api编写</p></blockquote><h2 id="启动Es-amp-Kibana"><a href="#启动Es-amp-Kibana" class="headerlink" title="启动Es&amp;Kibana"></a>启动Es&amp;Kibana</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start es</span><br><span class="line">docker logs -f es</span><br></pre></td></tr></table></figure><p>当日志中输出一推的<code>successfully</code>时，基本就启动成功了</p><p><img src="https://bu.dusays.com/2024/01/24/65b0b5404c334.png" alt="image-20240124145911318"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start kibana</span><br><span class="line">docker logs -f kibana</span><br></pre></td></tr></table></figure><p>出现5601的链接地址时表明启动成功</p><p><img src="https://bu.dusays.com/2024/01/24/65b0b5b735bef.png" alt="image-20240124150110181"></p><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>ES在使用时，会涉及到五个核心概念：索引（Index）、映射（Mapping）、域    （Field）、文档（Document）、倒排索引。以一张MySQL中数据表为例。</p><p><code>Elasticsearch</code> 是面向文档型数据库，一条数据在这里就是一个文档。我们可以把 <code>Elasticsearch</code> 里存储文档数据和关系型数据库 <code>MySQL</code> 存储数据的概念进行一个类比。 <code>ES</code> 里的 <code>Index</code> 可以看做一个库，而 <code>Types</code> 相当于表，<code>Documents</code> 则相当于表的行。</p><p><img src="https://bu.dusays.com/2024/01/24/65b0b40c34442.png" alt="ElasticSearch">这里 Types 的概念已经被逐渐弱化，Elasticsearch 6.X 中，一个 index 下已经只能包含一个type，Elasticsearch 7.X 中, Type 的概念已经被删除了。</p><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><p>索引相当于关系型数据库中的一张表，一个index包含若干document，通过Index代表一类类似的或者相同的document。</p><ul><li>打开 <code>kibana</code> 的 <code>Dev Tools</code> 菜单</li></ul><p><img src="https://bu.dusays.com/2024/01/24/65b0b62a8b157.png" alt="image-20240124150305755"></p><h3 id="创建索引-PUT"><a href="#创建索引-PUT" class="headerlink" title="创建索引-PUT"></a>创建索引-PUT</h3><ul><li>对比关系型数据库，创建索引就等同于创建数据库</li><li>PUT 索引名</li></ul><p><img src="https://bu.dusays.com/2024/01/24/65b0b7c6d3107.png" alt="image-20240124150958095"></p><ul><li>发送请求后，服务器返回了这样的响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shards_acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>如果重复添加索引呢？重复添加则会返回索引已经存在的错误信息</li></ul><p><img src="https://bu.dusays.com/2024/01/24/65b0b8067ae25.png" alt="image-20240124151101833"></p><h3 id="查看全部索引-GET"><a href="#查看全部索引-GET" class="headerlink" title="查看全部索引-GET"></a>查看全部索引-GET</h3><blockquote><p>GET _cat/indices?v</p><p>GET _all</p></blockquote><p><img src="https://bu.dusays.com/2024/01/24/65b0baf936afe.png" alt="image-20240124152336430"></p><p><code>_cat</code>：表示查看的意思；</p><p><code>indices</code>： 表示索引</p><p><code>health</code>：当前服务器健康状态：<code>green</code>(集群完整)、<code>yellow</code>(单点正常、集群不完整)、<code>red</code>(单点不正常)</p><p><code>status</code>：索引打开、关闭状态</p><p><code>index</code>：索引名</p><p><code>uuid</code>：索引统一编号</p><p><code>pri</code>：主分片数量</p><p><code>rep</code>：副本数量</p><p><code>docs.count</code>：可用文档数量</p><p><code>docs.deleted</code>：文档删除状态（逻辑删除）</p><p><code>store.size</code>：主分片和副分片整体占空间大小</p><p><code>pri.store.size</code>：主分片占空间大小</p><h3 id="查看单个索引-GET"><a href="#查看单个索引-GET" class="headerlink" title="查看单个索引-GET"></a>查看单个索引-GET</h3><p><img src="https://bu.dusays.com/2024/01/24/65b0bb50114f0.png" alt="image-20240124152503380"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;user&quot;</span>【索引名】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;aliases&quot;</span>【别名】<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;mappings&quot;</span>【映射】<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;settings&quot;</span>【设置】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="string">&quot;index&quot;</span>【设置 - 索引】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="string">&quot;routing&quot;</span>【设置 - 索引路由】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;allocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;_tier_preference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data_content&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;number_of_shards&quot;</span>【设置 - 索引 - 主分片数量】<span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;provided_name&quot;</span>【设置 - 索引 - 名称】<span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;creation_date&quot;</span>【设置 - 索引 - 创建时间】<span class="punctuation">:</span> <span class="string">&quot;1659678930693&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;number_of_replicas&quot;</span>【设置 - 索引 - 副分片数量】<span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;uuid&quot;</span>【设置 - 索引 - 唯一标识】<span class="punctuation">:</span> <span class="string">&quot;P0pIpPyTSa-zS7kJCeE7Ng&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;version&quot;</span>【设置 - 索引版本号】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8030399&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="查询多个索引"><a href="#查询多个索引" class="headerlink" title="查询多个索引"></a>查询多个索引</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查询多个索引信息 GET 索引名称<span class="punctuation">,</span>索引名称</span><br><span class="line">PUT person1</span><br><span class="line">GET person<span class="punctuation">,</span>person1</span><br></pre></td></tr></table></figure><h3 id="删除索引-DELETE"><a href="#删除索引-DELETE" class="headerlink" title="删除索引-DELETE"></a>删除索引-DELETE</h3><p><img src="https://bu.dusays.com/2024/01/24/65b0bb7f6b5a2.png" alt="image-20240124152550891"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>字符串</strong></p><ul><li>text：会进行分词，如华为手机，会分成：华为，手机。 <strong>被分出来的每一个词，称为term（词条）</strong></li><li>keyword：不会进行分词，如华为手机，只有一个词条，即华为手机。</li></ul><p><strong>数值</strong></p><ul><li>long：带符号64位整数</li><li>integer：带符号32位整数</li><li>short：带符号16位整数</li><li>byte：带符号8位整数</li><li>double：双精度64位浮点数</li><li>float：单精度32位浮点数</li><li>half_float：半精度16位浮点数</li></ul><p><strong>布尔：</strong></p><ul><li>boolean</li></ul><p><strong>二进制：</strong></p><ul><li>binary</li></ul><p><strong>日期：</strong></p><ul><li>date</li></ul><p><strong>范围类型：</strong></p><ul><li>integer_range</li><li>float_range</li><li>long_range</li><li>double_range</li><li>date_range</li></ul><p><strong>数组</strong></p><p><strong>对象</strong></p><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><h3 id="创建文档-POST"><a href="#创建文档-POST" class="headerlink" title="创建文档-POST"></a>创建文档-POST</h3><p>先创建好一个索引，接下来我们来创建文档，并添加数据。这里的文档可以类比为关系型数据库中的表数据，添加的数据格式为<code>JSON</code>格式</p><p><img src="https://bu.dusays.com/2024/01/24/65b0bbe6286d6.png" alt="image-20240124152733502"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;_index&quot;</span>【索引】<span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_id&quot;</span>【唯一标识，支持自定义】<span class="punctuation">:</span> <span class="string">&quot;C1yqbIIBJVfoW_YKu2D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_version&quot;</span>【版本】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;result&quot;</span>【结果】<span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span>#这里的 create 表示创建成功</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>【分片】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;total&quot;</span>【分片 - 总数】<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;successful&quot;</span>【分片 - 成功】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;failed&quot;</span>【分片 - 失败】<span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>自定义唯一标识：POST 索引名/_doc/(自定义ID)</li></ul><p><img src="https://bu.dusays.com/2024/01/24/65b0bc5704bea.png" alt="image-20240124152926213"></p><h3 id="查看文档-GET"><a href="#查看文档-GET" class="headerlink" title="查看文档-GET"></a>查看文档-GET</h3><ul><li>查看文档时，需要指明文档的唯一性标识，类似于 MySQL 中数据的主键查询</li><li>查看指定文档：GET 索引名/_doc/(唯一标识)</li><li>查看所有数据：GET 索引名/_search</li></ul><p><img src="https://bu.dusays.com/2024/01/24/65b0bc8fa4103.png" alt="查询单个数据"></p><p><img src="https://bu.dusays.com/2024/01/24/65b0bcb4e9c34.png" alt="查询多个数据"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;_index&quot;</span>【索引】<span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C1yqbIIBJVfoW_YKu2D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;found&quot;</span>【查询结果】<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_source&quot;</span>【文档源信息】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A佳技术&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;28&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="修改文档-POST"><a href="#修改文档-POST" class="headerlink" title="修改文档-POST"></a>修改文档-POST</h3><p><strong>全局修改</strong></p><p>POST 索引名/_doc/(唯一标识)</p><p><img src="https://bu.dusays.com/2024/01/24/65b0bd5650e1a.png" alt="image-20240124153341586"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C1yqbIIBJVfoW_YKu2D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;result&quot;</span>【更新操作】<span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>局部修改</strong></p><p><img src="https://bu.dusays.com/2024/01/24/65b0bdf285e7f.png" alt="image-20240124153617694"></p><h3 id="删除文档-DELETE"><a href="#删除文档-DELETE" class="headerlink" title="删除文档-DELETE"></a>删除文档-DELETE</h3><ul><li><p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）</p></li><li><p>DELETE 索引名/_doc/(唯一标识)</p><p><img src="https://bu.dusays.com/2024/01/24/65b0be3ee6e3e.png" alt="image-20240124153734162"></p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C1yqbIIBJVfoW_YKu2D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_version&quot;</span>【版本<span class="punctuation">:</span>对数据的操作，都会更新版本】<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;result&quot;</span>【结果】<span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span># deleted 表示数据被标记为删除</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/24/65b0be713fb3d.png" alt="image-20240124153824479"></p><h3 id="条件删除文档-POST"><a href="#条件删除文档-POST" class="headerlink" title="条件删除文档-POST"></a>条件删除文档-POST</h3><p>首先分别增加多条数据，这里我添加了3条数据</p><p><img src="https://bu.dusays.com/2024/01/24/65b0bedbb8a7f.png" alt="ElasticSearch"></p><p>POST 索引名/_delete_by_query + 请求体条件</p><p><img src="https://bu.dusays.com/2024/01/24/65b0beee35d30.png" alt="ElasticSearch"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;took&quot;</span>【耗时】<span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>【是否超时】<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;total&quot;</span>【总数】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;deleted&quot;</span>【删除数量】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;batches&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version_conflicts&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;noops&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;retries&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bulk&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;search&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;throttled_millis&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;requests_per_second&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;throttled_until_millis&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;failures&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>查看文档数据情况，年龄20已经删除</p><p><img src="https://bu.dusays.com/2024/01/24/65b0bf04cc5be.png" alt="ElasticSearch"></p><h2 id="映射基本操作"><a href="#映射基本操作" class="headerlink" title="映射基本操作"></a>映射基本操作</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>有了索引库，等于有了数据库中的 <code>database</code>。</p><p>接下来就需要建索引库(<code>index</code>)中的映射了，类似于数据库(<code>database</code>)中的表结构(<code>table</code>)。创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(<code>mapping</code>)。</p><h3 id="先创建索引-PUT"><a href="#先创建索引-PUT" class="headerlink" title="先创建索引-PUT"></a>先创建索引-PUT</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT hotel</span><br></pre></td></tr></table></figure><h3 id="创建映射-PUT"><a href="#创建映射-PUT" class="headerlink" title="创建映射-PUT"></a>创建映射-PUT</h3><p><strong>为已经存在的索引库添加映射</strong></p><p>PUT 索引名/_mapping + 请求体内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT student/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/24/65b0c0d3e86da.png" alt="image-20240124154835123"></p><p><strong>创建索引并添加映射</strong></p><blockquote><p>PUT /索引名称<br>{</p><p>​    “mappings”：{</p><p>​        “properties”: {}    </p><p>​    }</p><p>}</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">PUT /hotel</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;business&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>映射数据说明：</strong></p><ul><li>字段名：任意填写</li><li><code>type</code>：类型，<code>Elasticsearch</code> 中支持的数据类型非常丰富，说几个关键的：<ul><li><code>String类型</code>，又分两种<ul><li><code>text</code>：可分词，支持模糊查询，支持准确查询，不支持聚合查询</li><li><code>keyword</code>：不可分词，数据会作为完整字段进行匹配，支持模糊查询，支持准确查询，支持聚合查询。</li></ul></li><li><code>Numerical</code>：数值类型，分两类<ul><li>基本数据类型：<code>long</code>、<code>integer</code>、<code>short</code>、<code>byte</code>、<code>double</code>、<code>float</code>、<code>half_float</code></li><li>浮点数的高精度类型：<code>scaled_float</code></li></ul></li><li><code>Date</code>：日期类型</li><li><code>Array</code>：数组类型</li><li><code>Object</code>：对象</li></ul></li><li><code>index</code>：是否索引，默认为 true，也就是说你不进行任何配置，所有字段都会被索引。<ul><li>true：字段会被索引，则可以用来进行搜索</li><li>false：字段不会被索引，不能用来搜索</li></ul></li><li><code>store</code>：是否将数据进行独立存储，默认为 false。</li></ul><p>原始的文本会存储在<code>_source</code> 里面，默认情况下其他提取出来的字段都不是独立存储的，是从<code>_source</code>里面提取出来的。当然你也可以独立的存储某个字段，只要设置 <code>&quot;store&quot;: true</code> 即可，获取独立存储的字段要比从 <code>_source</code> 中解析快得多，但是也会占用更多的空间，所以要根据实际业务需求来设置。</p><ul><li><code>analyzer</code>：分词器，这里的 <code>ik_max_word</code> 即使用 <code>ik 分词器</code></li></ul><h3 id="查看映射-GET"><a href="#查看映射-GET" class="headerlink" title="查看映射-GET"></a>查看映射-GET</h3><blockquote><p>GET /索引/_mapping</p></blockquote><p><img src="https://bu.dusays.com/2024/01/24/65b0c1a896684.png" alt="image-20240124155207724"></p><h3 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a><strong>添加字段</strong></h3><p>对于映射，只能进行字段添加，不能对字段进行修改或删除，如有需要，则重新创建映射。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT user/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;:&#123;</span><br><span class="line">    &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;:&#123;</span><br><span class="line">        &quot;type&quot;:&quot;text&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> 学习笔记 </category>
          
          <category> 微服务 </category>
          
          <category> 搜索服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch概念与安装</title>
      <link href="/posts/5e525b05.html"/>
      <url>/posts/5e525b05.html</url>
      
        <content type="html"><![CDATA[<h2 id="Elasticsearch-是什么"><a href="#Elasticsearch-是什么" class="headerlink" title="Elasticsearch 是什么"></a>Elasticsearch 是什么</h2><p><img src="https://bu.dusays.com/2024/01/24/65b06050ecae3.png" alt="ElasticSearch"></p><p>The Elastic Stack, 包括 Elasticsearch、Kibana、Beats 和 Logstash（也称为 ELK Stack）。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。Elaticsearch，简称为 ES，ES 是一个<strong>开源的高扩展的分布式全文搜索引擎</strong>，是整个 Elastic Stack 技术栈的核心。它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。</p><p>PS：elasticsearch是一款非常强大的开源搜索引擎，具备非常多强大功能，可以帮助我们从海量数据中快速找到需要的内容</p><h2 id="全文搜索引擎"><a href="#全文搜索引擎" class="headerlink" title="全文搜索引擎"></a>全文搜索引擎</h2><p>Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p><p>一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。</p><p>基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p><ul><li>搜索的数据对象是大量的非结构化的文本数据。</li><li>文件记录量达到数十万或数百万个甚至更多。</li><li>支持大量基于交互式文本的查询。</li><li>需求非常灵活的全文搜索查询。</li><li>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。</li><li>对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎。</li></ul><p>这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p><h2 id="elasticsearch和lucene"><a href="#elasticsearch和lucene" class="headerlink" title="elasticsearch和lucene"></a>elasticsearch和lucene</h2><p>elasticsearch底层是基于<strong>lucene</strong>来实现的。</p><p><strong>Lucene</strong>是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发。官网地址：<a href="https://lucene.apache.org/">https://lucene.apache.org/</a> 。</p><p><img src="https://bu.dusays.com/2024/01/24/65b0b36ed6794.png" alt="image-20210720194547780"></p><p><strong>elasticsearch</strong>的发展历史：</p><ul><li>2004年Shay Banon基于Lucene开发了Compass</li><li>2010年Shay Banon 重写了Compass，取名为Elasticsearch。</li></ul><p><img src="https://bu.dusays.com/2024/01/24/65b0b36ebb775.png" alt="image-20210720195001221"></p><h2 id="Elasticsearch-And-Solr"><a href="#Elasticsearch-And-Solr" class="headerlink" title="Elasticsearch And Solr"></a>Elasticsearch And Solr</h2><p>Lucene 是 Apache 软件基金会 Jakarta 项目组的一个子项目，提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言，Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。但 Lucene 只是一个提供全文搜索功能类库的核心工具包，而真正使用它还需要一个完善的服务框架搭建起来进行应用。</p><p>目前市面上流行的搜索引擎软件，主流的就两款：Elasticsearch 和 Solr,这两款都是基于 Lucene 搭建的，可以独立部署启动的搜索引擎服务软件。由于内核相同，所以两者除了服务器安装、部署、管理、集群以外，对于数据的操作 修改、添加、保存、查询等等都十分类似。</p><p>在使用过程中，一般都会将 Elasticsearch 和 Solr 这两个软件对比，然后进行选型。这两个搜索引擎都是流行的，先进的的开源搜索引擎。它们都是围绕核心底层搜索库 - Lucene构建的 - 但它们又是不同的。像所有东西一样，每个都有其优点和缺点：</p><p><img src="https://bu.dusays.com/2024/01/24/65b060473246d.png" alt="ElasticSearch"></p><h2 id="Elasticsearch-Or-Solr"><a href="#Elasticsearch-Or-Solr" class="headerlink" title="Elasticsearch Or Solr"></a>Elasticsearch Or Solr</h2><p>Elasticsearch 和 Solr 都是开源搜索引擎，那么我们在使用时该如何选择呢？</p><ul><li>Google 搜索趋势结果表明，与 Solr 相比，Elasticsearch 具有很大的吸引力，但这并不意味着 Apache Solr 已经死亡。虽然有些人可能不这么认为，但 Solr 仍然是最受欢迎的搜索引擎之一，拥有强大的社区和开源支持。</li><li>与 Solr 相比，Elasticsearch 易于安装且非常轻巧。此外，你可以在几分钟内安装并运行Elasticsearch。但是，如果 Elasticsearch 管理不当，这种易于部署和使用可能会成为一个问题。基于 JSON 的配置很简单，但如果要为文件中的每个配置指定注释，那么它不适合您。总的来说，如果你的应用使用的是 JSON，那么 Elasticsearch 是一个更好的选择。否则，请使用 Solr，因为它的 schema.xml 和 solrconfig.xml 都有很好的文档记录。</li><li>Solr 拥有更大，更成熟的用户，开发者和贡献者社区。ES 虽拥有的规模较小但活跃的 用户社区以及不断增长的贡献者社区。</li><li>Solr 贡献者和提交者来自许多不同的组织，而 Elasticsearch 提交者来自单个公司。</li><li>Solr 更成熟，但 ES 增长迅速，更稳定。</li><li>Solr 是一个非常有据可查的产品，具有清晰的示例和 API 用例场景。 Elasticsearch 的文档组织良好，但它缺乏好的示例和清晰的配置说明。</li></ul><h2 id="ELK技术栈"><a href="#ELK技术栈" class="headerlink" title="ELK技术栈"></a>ELK技术栈</h2><p>elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域：</p><p><img src="https://bu.dusays.com/2024/01/24/65b0b34cce36d.png" alt="image-20210720194008781"></p><p>而elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。</p><p><img src="https://bu.dusays.com/2024/01/24/65b0b34c7426c.png" alt="image-20210720194230265"></p><h2 id="为什么不是其他搜索技术？"><a href="#为什么不是其他搜索技术？" class="headerlink" title="为什么不是其他搜索技术？"></a>为什么不是其他搜索技术？</h2><p>目前比较知名的搜索引擎技术排名：</p><p><img src="https://bu.dusays.com/2024/01/24/65b0b38b4a3de.png" alt="image-20210720195142535"></p><p>虽然在早期，Apache Solr是最主要的搜索引擎技术，但随着发展elasticsearch已经渐渐超越了Solr，独占鳌头：</p><p><img src="https://bu.dusays.com/2024/01/24/65b0b38b2a4cb.png" alt="image-20210720195306484"></p><h2 id="Windows上安装ES"><a href="#Windows上安装ES" class="headerlink" title="Windows上安装ES"></a>Windows上安装ES</h2><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><p><a href="https://www.elastic.co/cn/">ElasticSearch官方地址</a></p><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-8-12-0">ElasticSearch目前最新版本下载地址</a></p><p><img src="https://bu.dusays.com/2024/01/24/65b06342ad0a9.png" alt="image-20240124090921134"></p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>Windows 版的 Elasticsearch 的安装很简单，解压即安装完毕，这里我下载的目前最新版8.12.0，解压后的 Elasticsearch 的目录结构如下</p><p><img src="https://bu.dusays.com/2024/01/24/65b06467d57a8.png" alt="image-20240124091414474"></p><div class="table-container"><table><thead><tr><th style="text-align:center">目录</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">bin</td><td style="text-align:center">可执行脚本</td></tr><tr><td style="text-align:center">config</td><td style="text-align:center">配置目录</td></tr><tr><td style="text-align:center">jdk</td><td style="text-align:center">内置JDK目录</td></tr><tr><td style="text-align:center">lib</td><td style="text-align:center">类库</td></tr><tr><td style="text-align:center">logs</td><td style="text-align:center">日志目录</td></tr><tr><td style="text-align:center">modules</td><td style="text-align:center">模块目录</td></tr><tr><td style="text-align:center">plugins</td><td style="text-align:center">插件目录</td></tr></tbody></table></div><p><strong>解压后，我们先来修改一些配置：</strong></p><ul><li><p>配置启动内存，修改配置文件 <code>config/jvm.options</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">################################################################</span><br><span class="line">## IMPORTANT: JVM heap size</span><br><span class="line">################################################################</span><br><span class="line">## 配置启动内存，默认是4G</span><br><span class="line">-Xms1g</span><br><span class="line">-Xmx1g</span><br><span class="line">################################################################</span><br></pre></td></tr></table></figure></li><li><p>暂时禁止掉再次启动时更新地图的一些数据库操作，修改 <code>config/elasticsearch.yml</code> 配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 添加配置：暂时禁止掉再次启动时更新地图的一些数据库操作</span><br><span class="line">ingest.geoip.downloader.enabled: false</span><br></pre></td></tr></table></figure></li><li><p>进入 <code>bin</code> 文件目录，点击 <code>elasticsearch.bat</code> 文件启动服务 启动完成后，打开浏览器，输入：<a href="http://localhost:9200/">http://localhost:9200/</a></p><p><img src="https://bu.dusays.com/2024/01/24/65b066b941d44.png" alt="image-20240124092407817"></p><p><img src="https://bu.dusays.com/2024/01/24/65b066df67522.png" alt="image-20240124092446062"></p></li></ul><h2 id="Windows上安装Kibana"><a href="#Windows上安装Kibana" class="headerlink" title="Windows上安装Kibana"></a>Windows上安装Kibana</h2><p>Kibana 是一个免费且开放的用户界面，能够让你对 Elasticsearch 数据进行可视化，并 让你在 Elastic Stack 中进行导航。你可以进行各种操作，从跟踪查询负载，到理解请求如 何流经你的整个应用，都能轻松完成。</p><p><strong>下载时尽量下载与 ElasicSearch 一致的版本。</strong></p><p>前往<a href="https://www.elastic.co/cn/downloads/kibana">官网下载 Windows 版本</a></p><p>下载后进行解压，目录如图：</p><p><img src="https://bu.dusays.com/2024/01/24/65b067393be3f.png" alt="image-20240124092615693"></p><h3 id="启动kibana"><a href="#启动kibana" class="headerlink" title="启动kibana"></a>启动kibana</h3><ul><li>启动 <code>Kibana</code> 之前要启动 <code>Elasticsearch</code></li><li>进入 <code>bin</code> 目录，双击 <code>kibana.bat</code> 启动服务</li><li>启动成功后，复制控制台的地址进行访问<a href="http://localhost:5601">http://localhost:5601</a></li></ul><p><img src="https://bu.dusays.com/2024/01/24/65b067f63ce80.png" alt="image-20240124092924553"></p><ul><li>8.x版本访问时，需要先生成一个<code>token</code>，我们在 <code>ES</code> 的 <code>bin</code> 目录下执行以下命令生成 <code>token</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">es\bin&gt;elasticsearch-create-enrollment-token.bat --scope kibana</span><br><span class="line">warning: ignoring JAVA_HOME=G:\java\java8\jdk; using bundled JDK</span><br><span class="line">eyJ2ZXIiOiI4LjMuMyIsImFkciI6WyIxNzIuMjAuMTAuNDo5MjAwIl0sImZnciI6ImUzOWZlYzRmM2MyMDg2ZTEyOGIxOTU3OTAyOTVlZTc5OTlkZmI1MDlmMzM5NjNiZWE2Y2Q1ZTRjMWVhOTdlNmMiLCJrZXkiOiJfbHdsYklJQkpWZm9XX1lLNlY5NTo2czNnMFJZYVRfYXNCX19BZVZ6MDVnIn0=</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>将 <code>token</code> 复制到 <code>kibana</code>登录页中 </p><p><img src="https://bu.dusays.com/2024/01/24/65b068bf07cbc.png" alt="ElasticSearch"></p></li></ul><p><img src="es/es13.png" alt="ElasticSearch"></p><h3 id="修改界面语言"><a href="#修改界面语言" class="headerlink" title="修改界面语言"></a>修改界面语言</h3><p>访问界面是英文，可修改成中文，进入根目录下的 <code>config</code> 目录，打开 <code>kibana.yml</code> 文件，在最末尾处加入以下配置，添加完成后，重新启动即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认端口</span></span><br><span class="line"><span class="comment"># server.port: 5601</span></span><br><span class="line"><span class="comment"># ES 服务器的地址，经过上一步的操作，这些会自动生成，所以不需要改动</span></span><br><span class="line"><span class="comment"># elasticsearch.hosts: [&quot;https://127.0.0.1:9200&quot;]</span></span><br><span class="line"><span class="comment"># 索引名：可改可不改</span></span><br><span class="line"><span class="comment"># kibana.index: &quot;.kibana&quot;</span></span><br><span class="line"><span class="comment"># 支持中文</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Docker安装Es"><a href="#Docker安装Es" class="headerlink" title="Docker安装Es"></a>Docker安装Es</h2><p><strong>需提前装好Centos系统及Docker</strong></p><ul><li>因为我们还需要部署kibana容器，因此需要让es和kibana容器互联。这里先创建一个网络：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><ul><li>调整机器的vm.max_map_count参数至262144,调整前可以将原文件备份</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 备份文件</span><br><span class="line">cp /etc/sysctl.conf /etc/sysctl.conf.bak</span><br><span class="line">// 编辑文件</span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line">// 在文件的尾部添加以下参数</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">// 使修改后的文件生效</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><ul><li>修改虚拟内存区域大小，否则会因为过小而无法启动:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><ul><li>使用docker命令启动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name elasticsearch \</span><br><span class="line">  -e &quot;cluster.name=elasticsearch&quot; \</span><br><span class="line">  -e &quot;discovery.type=single-node&quot; \</span><br><span class="line">  -e &quot;ES_JAVA_OPTS=-Xms512m -Xmx1024m&quot; \</span><br><span class="line">  -v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">  -v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">  --network es-net\ \</span><br><span class="line">  --privileged \</span><br><span class="line">  -p 9200:9200 \</span><br><span class="line">  -p 9300:9300 \</span><br><span class="line">  elasticsearch:7.17.3</span><br></pre></td></tr></table></figure><ul><li>启动时会发现/usr/share/elasticsearch/data目录没有访问权限，只需要修改/mydata/elasticsearch/data目录的权限，再重新启动。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /mydata/elasticsearch/data/</span><br></pre></td></tr></table></figure><h3 id="部署Kiban"><a href="#部署Kiban" class="headerlink" title="部署Kiban"></a>部署Kiban</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d \</span></span><br><span class="line"><span class="language-bash">  --name kibana \</span></span><br><span class="line"><span class="language-bash">  --<span class="built_in">link</span> elasticsearch:es \</span></span><br><span class="line"><span class="language-bash">  -e ELASTICSEARCH_HOSTS=http://es:9200 \</span></span><br><span class="line"><span class="language-bash">  --network cscz-net \</span></span><br><span class="line"><span class="language-bash">  -p 5601:5601 \</span></span><br><span class="line"><span class="language-bash">  kibana:7.17.3</span></span><br></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f kibana</span><br></pre></td></tr></table></figure><ul><li>开启防火墙：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=5601/tcp --permanent firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="安装分词器"><a href="#安装分词器" class="headerlink" title="安装分词器"></a>安装分词器</h2><h3 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h3><p>为了能够更好地对中文进行搜索和查询，就需要在Elasticsearch中集成好的分词器插件， 而 <code>IK</code> 分词器就是用于对中文提供支持得插件。</p><h2 id="集成IK分词器"><a href="#集成IK分词器" class="headerlink" title="集成IK分词器"></a>集成IK分词器</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">IK分词器下载  (opens new window)</a></li><li>注意版本需要对应，目前<code>IK</code>分词器还没有<code>8.3.3</code>版本，所以就先重新下一个<code>8.2.3</code>版本的<code>ES</code></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>将下载的IK压缩包直接解压到 <code>elasticsearch-8.2.3</code> 的 <code>plugins</code>目录下，重启<code>ES</code></li></ul><h3 id="使用-IK-分词器"><a href="#使用-IK-分词器" class="headerlink" title="使用 IK 分词器"></a>使用 IK 分词器</h3><p>IK 分词器提供了两个分词算法：</p><p>▶️ <code>ik_smart</code>: 会做最粗粒度的拆分，适合 Phrase 查询</p><p>▶️ <code>Ik_max_word</code>:会将文本做最细粒度的拆分,会穷尽各种可能的组合,适合 Term Query</p><ul><li>为索引指定默认IK分词器</li></ul><p><strong>这样我们在索引中就不用创建每一个字段，可以通过动态字段映射，将String类型的字段映射为text类型，同时分词器指定为ik_max_word</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT ik_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;default&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义分词效果"><a href="#自定义分词效果" class="headerlink" title="自定义分词效果"></a>自定义分词效果</h3><ul><li>我们在使用 <code>IK</code> 分词器时会发现其实有时候分词的效果也并不是我们所期待的,有时一些特 殊得术语会被拆开，但实际上我们希望不要拆开。</li><li><code>IK</code> 插件给我们提供了自定义分词字典，我们可以添加自己想要保留得字了。</li></ul><p><strong>自定义分词</strong></p><ul><li>首先在 <code>elasticsearch-analysis-ik-8.2.3</code>的<code>config</code>目录下新建一个<code>my_self.dic</code>文件，输入自己希望不想被拆开的术语，比如<code>分词词语</code></li><li>接下来我们修改配置文件：<code>config/IKAnalyzer.cfg.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典多个文件用&#x27;;&#x27;分隔开 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>my_self.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="热更新-IK-分词使用方法"><a href="#热更新-IK-分词使用方法" class="headerlink" title="热更新 IK 分词使用方法"></a>热更新 IK 分词使用方法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;remote_ext_dict&quot;</span>&gt;</span>location<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;remote_ext_stopwords&quot;</span>&gt;</span>location<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>location</code> 是指一个 url，比如 <code>http://yoursite.com/getCustomDict</code>，该请求只需满足以下两点即可完成分词热更新。</p><ul><li>1、该 http 请求需要返回两个头部(header)，一个是 <code>Last-Modified</code>，一个是 <code>ETag</code>，这两者都是字符串类型，只要有一个发生变化，该插件就会去抓取新的分词进而更新词库。</li><li>2、该 http 请求返回的内容格式是一行一个分词，换行符用 <code>\n</code>即可。</li></ul><p>满足上面两点要求就可以实现热更新分词了，不需要重启 ES 实例。</p><p>可以将需自动更新的热词放在一个 <code>UTF-8</code> 编码的 <code>.txt</code> 文件里，放在 <code>nginx</code> 或其他简易 <code>http server</code> 下，当 .<code>txt</code> 文件修改时，<code>http server</code> 会在客户端请求该文件时自动返回相应的 <code>Last-Modified</code> 和 <code>ETag</code>。可以另外做一个工具来从业务系统提取相关词汇，并更新这个 <code>.txt</code> 文件。</p>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> 微服务 </category>
          
          <category> 后端开发 </category>
          
          <category> 搜索服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos学习</title>
      <link href="/posts/8b3d7021.html"/>
      <url>/posts/8b3d7021.html</url>
      
        <content type="html"><![CDATA[<h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>为了适应企业的业务发展，软件架构现如今也做了升级和优化，将一个独立的系统拆分成若干个小的服务，每个服务都运行在不同的进程中，服务和服务之间采用RESTFul, RPC等协议传输数据，每个服务所拥有的功能具有独立性强的特点，这样的设计实现了服务之间的低耦合、服务内部的高内聚。</p><h2 id="服务发现流程"><a href="#服务发现流程" class="headerlink" title="服务发现流程"></a>服务发现流程</h2><p>在很多架构中，当微服务很多时，可能会出现A服务调用B服务，B服务调用C服务，C服务调用A服务，从而服务循环；微服务之间的调用需要有各个服务的地址，当某个服务出现升级或宕机的情况，服务实例网址可能会发生变化，因此就需要有服务发现。</p><p>服务发现流程引入了一个<strong>服务发现中心</strong>。</p><ol><li>在每个服务启动时会向服务中心上报自己的网络地址，这样在服务发现中心内部会形成一个<strong>服务注册表</strong>，<strong>服务注册表</strong>是服务发现的核心部分，是包含所有服务实例的网络地址的数据库；</li><li><strong>服务发现客户端</strong>会定期的从<strong>服务中心</strong>同步<strong>服务注册表</strong>，并缓存在客户端；</li><li>当需要对某个服务进行请求时，服务实例通过注册表，定位目标服务网络地址，若目标服务存在多个网络地址，则使用负载均衡算法从多个服务实例中选择一个，然后发出请求。</li></ol><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><p>目前市面上用得比较多的服务中心有：Nacos、Eureka、Consul 和 Zookeeper</p><p><img src="https://bu.dusays.com/2024/01/19/65a9dc38b5a0c.png" alt="image-20240119101927536"></p><p>Nacos作为服务中心，相比较其他软件具有更多的功能特性，且从长远角度来看，Nacos会在以后的版本中会支持SpringCloud和Kubernetes的组合，填补两者之间的鸿沟。另外，Nacos计划实现Service Mesh，也是未来微服务发展的趋势。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p>服务发现与服务健康检查</p><p>Nacos使服务更容易注册，通过DNS和http端口更容易发现其他服务，Nacos提供服务的实时健康检查，以防止向不健康的主机或服务实例发送请求。</p></li><li><p>动态配置管理</p><p>动态配置服务允许您在所有环境中以集中和动态的方式管理所有服务的配置。消除了在更新配置时重新部署应用程序，这使配置的更改更加高效灵活。</p></li><li><p>动态DNS服务</p><p>Nacos提供基于DNS协议的服务发现能力，旨在支持异构语言的服务发现，支持将注册在Nacos上的服务以域名的方式暴露端口，让三方应用方便的查阅和发现。</p></li><li><p>服务和元数据管理</p><p>Nacos能让你以微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康检查、服务的流量管理、路由及安全策略。</p></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Nacos依赖Java环境来运行需提前配置JAVA_HOME&gt;1.8+，下载地址：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p><strong>启动服务器：</strong></p><p>Nacos的默认端口是8848，需要保证8848端口没有被其他进程占用；</p><p>进入安装程序的bin目录，启动命令（standalone代表单机模式运行，cluster代表集群模式）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/19/65a9e28e8dc26.png" alt="image-20240119104636690"></p><p>默认用户名/密码：nacos/nacos</p><h3 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h3><p>在SpringBoot工程中的pom.xml中引入客户端依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置application.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">    <span class="comment"># nacos服务地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xxx-service</span></span><br></pre></td></tr></table></figure><p>请求示范</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">    <span class="comment">// 此处user-service为另外一个服务的服务名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://user-service/user/&quot;</span> + order.getUserId();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">    order.setUser(user);</span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h3><p><img src="https://bu.dusays.com/2024/01/19/65a9e4511d4b3.png" alt="image-20240119105407174"></p><p><strong>NameSpace</strong>：命名空间，默认的NameSpace是<strong>public</strong>。比如，我们开发，测试环境共用一个nacos，必定我们的接口地址也是不同，而且你在开发过程中，也是不建议随意配置测试环境的，这时我们就应该用namespace来隔离我们的空间。</p><p><img src="https://bu.dusays.com/2024/01/19/65a9e38f252cd.png" alt="image-20240119105053186"></p><p><strong>group</strong>：分组。也是用来隔离的，打个比方啊，在系统中有用户服务，订单服务，仓储服务和物流服务四个服务，<strong>订单服务</strong>中有一个接口叫<strong>getData</strong>，<strong>仓储服务</strong>中也有一个接口叫<strong>getData</strong>，我们的用户服务只想调用到我们的订单服务的getData，不想调用到仓储服务的getData，这时我们可以用group分组来隔离<br><img src="https://bu.dusays.com/2024/01/19/65a9e3f821b99.png" alt="image-20240119105238408"></p><p><strong>cluster</strong>：集群。打个比方，我们现在有两组集群，一组是北京的订单服务集群，北京的商品服务集群，还有一组是南京的订单服务集群，南京的商品服务集群。 我们希望北京的订单集群，优先去调用北京的商品系统，南京的优先调用南京的集群服务。并不希望我们跨地区远程调用（如果组内实在没有服务了，也可以调用，但是优先考虑同一集群的）</p><p><img src="https://bu.dusays.com/2024/01/19/65a9e49049382.png" alt="image-20240119105510440"></p><h4 id="Nacos服务分级存储模型"><a href="#Nacos服务分级存储模型" class="headerlink" title="Nacos服务分级存储模型"></a>Nacos服务分级存储模型</h4><ul><li>一级是服务，例如userservice</li><li>二级是集群，例如杭州或上海</li><li>三级是实例，例如杭州机房的某台部署了userservice的服务器</li></ul><h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><p>spring.cloud.nacos.discovery.cluster-name属性即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="comment">#        服务发现配置</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line"><span class="comment">#        集群配置</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">$&#123;cname&#125;</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/19/65a9e5032d199.png" alt="image-20240119105705265"></p><h3 id="集群负载均衡"><a href="#集群负载均衡" class="headerlink" title="集群负载均衡"></a><strong>集群负载均衡</strong></h3><p>在客户端的yml中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span> <span class="comment"># 集群名称</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span></span><br></pre></td></tr></table></figure><h4 id="更改默认策略规则"><a href="#更改默认策略规则" class="headerlink" title="更改默认策略规则"></a>更改默认策略规则</h4><p>配置文件的方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p>通过代码的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h3><p>抽取共同的配置交给Nacos管理</p><p><img src="https://bu.dusays.com/2024/01/19/65a9e7f779841.png" alt="image-20240119110941442"></p><ul><li>Data ID：实际上就是配置文件名，可以以 【服务名称-环境.文件后缀名】格式命名</li></ul><p><img src="https://bu.dusays.com/2024/01/19/65a9e7ffd1deb.png" alt="image-20240119110949869"></p><p>实际上并不是所有的配置都适合放到配置中心，建议将一些关键参数，需要运行时随时可调整的参数放到 nacos 配置中心，一些比较固定的配置则可以放在项目本身的配置文件当中。</p><h4 id="服务拉取配置"><a href="#服务拉取配置" class="headerlink" title="服务拉取配置"></a>服务拉取配置</h4><p>一个服务如果以 nacos 作为配置中心，则会先拉取 nacos 中管理的配置，然后与本地的配置文件比如 application.yml 中的配置合并，最后作为项目的完整配置，启动项目。</p><ul><li><p>没有nacos管理配置文件的情况下的项目启动流程：</p><p><img src="https://bu.dusays.com/2024/01/19/65a9e861c12c7.png" alt="image-20240119111128049"></p></li><li><p>使用nacos管理配置时项目的启动流程</p><p><img src="https://bu.dusays.com/2024/01/19/65a9e881415d8.png" alt="image-20240119111159338"></p></li></ul><p>项目启动的时候需要提前知道 nacos 的环境信息，而 application.yml 在读取 nacos 配置后才会读取，所以无法把 nacos 的相关信息配置在 application.yml 中，此时我们可以使用 bootstrap.yml文件。bootstrap.ym是一个引导文件，优先级高于application.yml，它会在application.yml之前被读取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-a libaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建bootstart.yml文件，将有关Nacos的配置项以及服务名称都需写进这个文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev </span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure><p>这里会根据 spring.cloud.nacos.server-addr 来得到 nacos 配置中心的地址，再根据 【spring.application.name】-【spring.profiles.active】.【spring.cloud.nacos.config.file-extension】 作为配置的 DATA ID来从配置中心读取配置，也就是读取了 userservice-dev.yaml 配置。</p><h4 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h4><p>实际上微服务启动时，会去 nacos 配置中心读取多个配置文件，也就是不仅仅会读取指定的 profile 的配置文件，还会读取多个环境共享的配置文件。</p><p>当 nacos 和项目的本地配置文件中存在相同配置时，优先级如下： 服务名-profile.yaml &gt; 服务名.yaml &gt; 本地配置，如下</p><p><img src="https://bu.dusays.com/2024/01/19/65a9e9eb9228c.png" alt="image-20240119111801836"></p><h4 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h4><p>默认情况下，修改了 nacos 配置中心的配置，微服务的配置不会随之更新的，需要重启微服务才能读到新配置。</p><p>通过 @Value 和通过 @ConfigurationProperties 来读取配置时，实现热更新的方式不同。</p><h5 id="RefreshScope"><a href="#RefreshScope" class="headerlink" title="RefreshScope"></a>RefreshScope</h5><p>如果是通过 @Value 来读取配置的，此时只需在使用 @Value 注入的变量所在类上添加注解 @RefreshScope 即可，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;test01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateformat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="ConfigurationProperties"></a>ConfigurationProperties</h5><h2 id="nacos的坑"><a href="#nacos的坑" class="headerlink" title="nacos的坑"></a>nacos的坑</h2><h3 id="安装环节"><a href="#安装环节" class="headerlink" title="安装环节"></a>安装环节</h3><ol><li>解压安装时最好不要有中文路径及空格，否则会报错</li></ol><h3 id="启动环节"><a href="#启动环节" class="headerlink" title="启动环节"></a>启动环节</h3><ol><li><h4 id="java-io-IOException-java-lang-IllegalArgumentException-db-num-is-null"><a href="#java-io-IOException-java-lang-IllegalArgumentException-db-num-is-null" class="headerlink" title="java.io.IOException: java.lang.IllegalArgumentException: db.num is null"></a>java.io.IOException: java.lang.IllegalArgumentException: db.num is null</h4><p>这个是在集群模式下启动的时候缺少数据库文件，要么单机启动<code>startup.cmd -m standalone</code>,要么加载数据库</p><p>或者编辑startup.cmd文件把其中的set MODE = “cluster” 修改为以下内容（默认集群启动，修改为单机启动）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rem <span class="built_in">set</span> MODE=<span class="string">&quot;cluster&quot;</span></span><br><span class="line"><span class="built_in">set</span> MODE=<span class="string">&quot;standalone&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>Java环境需配置JAVA_HOME且大于1.8</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> 学习笔记 </category>
          
          <category> 微服务 </category>
          
          <category> 服务治理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的奇技淫巧</title>
      <link href="/posts/cdc384c3.html"/>
      <url>/posts/cdc384c3.html</url>
      
        <content type="html"><![CDATA[<h2 id="取消跟踪文件"><a href="#取消跟踪文件" class="headerlink" title="取消跟踪文件"></a>取消跟踪文件</h2><p>顾名思义也可以理解为：从 Git 中删除文件夹但本地保留</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached FileName  <span class="comment">## 这个命令用于从 Git 的版本控制中删除文件，但保留在工作目录中。它会将文件从暂存区（索引）中删除，但不会删除实际的文件。这意味着文件不再被跟踪，但仍然存在于你的工作目录中。</span></span><br><span class="line">git commit -m <span class="string">&quot;Remove FileName folder from Git&quot;</span>  <span class="comment">## 提交删除文件夹的更改到Git历史记录中</span></span><br><span class="line">git push origin &lt;branch-name&gt;  <span class="comment">## push到远程分支 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 扩展</span></span><br><span class="line">git <span class="built_in">rm</span> FielName <span class="comment">## 执行命令之后，会将git暂存区文件和本地的彻底清除，慎用！</span></span><br></pre></td></tr></table></figure><p>当你运行 <code>git rm --cached</code> 命令时，Git 会将你指定的文件或文件夹从 Git 仓库中删除，但不会删除实际的文件或文件夹。这意味着文件或文件夹将不再被 Git 跟踪，但仍然存在于你的本地文件系统中。如下图，仓库中存在一个Nginx目录，我不想让他在远程仓库中展示出来但本地又需要用到他，则我可以执行上述命令将它移除git，在提交至远程分支</p><p><img src="https://bu.dusays.com/2023/11/20/655b0c36e0680.png" alt="image-20231120153511097"></p><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><h3 id="保留历史记录"><a href="#保留历史记录" class="headerlink" title="保留历史记录"></a>保留历史记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert</span><br></pre></td></tr></table></figure><ul><li>如果想要撤销某个或某些提交的更改，但保留这些提交的历史记录，可以使用 <code>git revert</code> 命令。</li><li>运行 <code>git revert &lt;commit&gt;</code>，其中 <code>&lt;commit&gt;</code> 是你想要回滚的提交的标识符（commit identifier）。</li><li>Git 将创建一个新的提交，该提交将撤销指定提交的更改。这样可以保留原始提交的历史记录，并且其他人在拉取你的更改时不会受到影响。</li></ul><h3 id="不保留历史记录"><a href="#不保留历史记录" class="headerlink" title="不保留历史记录"></a>不保留历史记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure><ul><li>如果需要彻底删除某个或某些提交，并且不保留它们的历史记录，可以使用 <code>git reset</code> 命令。</li><li>运行 <code>git reset --hard &lt;commit&gt;</code>，其中 <code>&lt;commit&gt;</code> 是你想要回滚到的目标提交的标识符。</li><li>Git 将移动当前分支的 HEAD 指针和分支引用到目标提交，并重置工作目录和暂存区以匹配目标提交的状态。这将丢失目标提交之后的所有提交。</li></ul><p>请注意，在使用 <code>git revert</code> 或 <code>git reset</code> 进行回滚之前，确保你理解了回滚操作的影响，并且已经备份了重要的代码。如果你在一个共享的代码库中工作，最好在与团队讨论后再进行回滚操作，以确保不会对其他人的工作产生不良影响。</p><h3 id="救命操作"><a href="#救命操作" class="headerlink" title="救命操作"></a>救命操作</h3><p>如果你向我一样，没备份文件就直接执行了git reset，那请按照如下找回在 回滚</p><ol><li><p>使用 <code>git reflog</code> 查找被重置的提交的标识符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>这将显示你的仓库历史中的操作记录，包括重置操作。查找之前的提交的标识符（commit identifier），它应该类似于 <code>HEAD@&#123;n&#125;</code>，其中 <code>n</code> 是一个数字。</p></li><li><p>使用 <code>git reset</code> 恢复到之前的提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD@&#123;n&#125;</span><br></pre></td></tr></table></figure><p>将 <code>&lt;n&gt;</code> 替换为你在第一步中找到的数字。这将移动当前分支的 HEAD 指针和分支引用到之前的提交，并恢复工作目录和暂存区的状态。</p></li></ol><p><img src="https://bu.dusays.com/2023/11/20/655b11d4e1cd9.png" alt="image-20231120155916245"></p><h3 id="撤销提交"><a href="#撤销提交" class="headerlink" title="撤销提交"></a>撤销提交</h3><p>在本地执行了git add 及 git commit 操作后，想撤销这两步</p><ol><li><p>撤销 <code>git add</code> 操作：</p><ul><li>执行 <code>git reset</code> 命令可以将暂存区的文件撤销到工作区。例如，如果你执行了 <code>git add file1.txt</code> 将文件添加到暂存区，可以使用命令 <code>git reset file1.txt</code> 将其撤销。</li><li>如果你想要撤销所有的 <code>git add</code> 操作，可以使用 <code>git reset</code> 或者 <code>git reset .</code> 命令。</li></ul></li><li><p>撤销 <code>git commit</code> 操作：</p><ul><li><p>如果你想要撤销最近一次的 <code>git commit</code>，可以使用 <code>git reset HEAD^</code> 命令进行撤销。这将撤销最后一次提交，并将暂存区的文件移回到工作区，以便你可以重新修改和提交。</p></li><li><p>如果你想要完全删除最后一次提交，包括提交的文件内容，可以使用 <code>git reset --hard HEAD^</code> 命令进行撤销。请注意，这个操作是不可逆的，会永久删除最后一次提交。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 工具与软件 </category>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql随笔</title>
      <link href="/posts/df7fb2d2.html"/>
      <url>/posts/df7fb2d2.html</url>
      
        <content type="html"><![CDATA[<h2 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h2><h3 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h3><p><img src="https://bu.dusays.com/2023/11/13/65519c16690f0.png" alt="image-20231113114622728"></p><h4 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h4><p>表空间是InnoDB存储引擎的最高层，在磁盘中每个表都有一张表空间文件（xxx.ibd），一个MYSQL可以有多个表空间，表空间主要用于存储记录、索引等数据。</p><h4 id="段"><a href="#段" class="headerlink" title="段"></a>段</h4><p>段，分为：数据段、索引段、回滚段，InnoDB是索引组织表，数据段也就是B+树的叶子节点，索引段为B+树的非叶子节点，段用来管理多个区。</p><h4 id="区"><a href="#区" class="headerlink" title="区"></a>区</h4><p>区，是表空间的单元结构，每个区大小为1M，默认情况下Mysql的InnoDB引擎页大小为16K，也就是一个区中一共有64个连续的页。</p><h4 id="页"><a href="#页" class="headerlink" title="页"></a>页</h4><p>页，是InnoDB最小的磁盘管理单元，每个也为16KB，为了保证页的连续性，InnoDB引擎在申请页大小的时候会连续申请4-5个连续的页。</p><h4 id="行"><a href="#行" class="headerlink" title="行"></a>行</h4><p>行，InnoDB 存储引擎数据是按行进行存放的。</p><p>在行中，默认有两个隐藏字段： </p><ul><li>Trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id隐藏列。 </li><li>Roll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个 隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>之所以Mysql采用InnoDB作为默认的数据引擎，我想是以为InnoDB出众的事务处理能力，具有崩溃恢复的特性。</p><h4 id="8-0"><a href="#8-0" class="headerlink" title="8.0"></a>8.0</h4><p><img src="https://bu.dusays.com/2023/11/13/65519ec40187b.png" alt="image-20231113115754673"></p><h4 id="5-5"><a href="#5-5" class="headerlink" title="5.5"></a>5.5</h4><p><img src="https://bu.dusays.com/2023/11/13/65519ee0203cf.png" alt="image-20231113115823194"></p><h4 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h4><h5 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h5><p>是一个缓冲区，由于物理磁盘和内存之间的访问速度差距很大，为了尽可能的弥补两者之间的IO差值，就需要把经常用到的数据加载到缓冲池中，避免每次访问都进行磁 盘I/O。</p><p>在InnoDB的缓冲池中不仅缓存了<strong>索引页</strong>和数据页，还包含了<strong>undo页</strong>、插入缓存、<strong>自适应哈希索引</strong>以及 <strong>InnoDB的锁</strong>信息等等。</p><p>缓冲池 Buffer Pool，是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增 删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频 率刷新到磁盘，从而减少磁盘IO，加快处理速度。</p><p>缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型： </p><ul><li>free page：空闲page，未被使用。 </li><li>clean page：被使用page，数据没有被修改过。 </li><li>dirty page：脏页，被使用page，数据被修改过，也中数据与磁盘的数据产生了不一致。</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。 </li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。 </li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环 境下运行。 </li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><p>上述四大特性分为两部分：</p><ul><li>原子性、一致性、持久性是由InnoDB中的redo log、undo log日志来保证的。</li><li>持久性是通过数据库的锁加上MVCC机制来实现的</li></ul><p><img src="https://bu.dusays.com/2023/11/13/6551cda0e085a.png" alt="image-20231113151752283"></p><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>个人理解：</p><ol><li><p>缓冲数据：</p><p>当我们进行一批SQL操作的时候，例如update、delete操作等，内存中的缓冲池（Buffer Pool）通过后台线程从磁盘结构中读取ibd文件中的数据缓冲到 Buffer Pool当中。</p></li><li><p>执行SQL语句</p><blockquote><p>没有RedoLog：</p><p>直接执行SQL语句操作缓冲区中的数据，此时缓冲区数据产生脏页，然后MySQL会通过一定的时候讲脏页刷新到磁盘当中，从而保证了数据的一致，但是脏页的数据并不是实时刷新的，而是通过一段时间后通过后台线程将脏页数据刷新到磁盘中，如果这时脏页数据写入磁盘出错呢？如何保证数据的持久性？一致性？</p></blockquote></li></ol><p>直接执行SQL语句操作缓冲区中的数据，此时缓冲区数据产生脏页，然后就会记录在RedoLogBuffer中，RedoLogBuffer中就会记录数据页的变化，当事务在提交的时候，会将数据页直接刷新到磁盘当中，持久化的保存在磁盘当中，如果在BufferPoll将脏页刷新数据到磁盘出错了，可以通过数据页来恢复数据，redoLog中主要是记录了当次数据的变化，所以能通过RedoLog日志文件进行数据恢复，总结来说RedoLog就是在缓冲区中脏页往磁盘中刷新数据出错的时候进行数据恢复，如果说每一次的事务操作都直接从缓冲区写入到磁盘，会导致IO效率问题，因为每一个事务操作操作一组数据的时候通常会操作很多条记录，这些记录都是随机操作数据页的，这个时候就会涉及到大量的随机磁盘IO，导致性能降低，如果通过RedoLog日志文件将每次的操作记录都异步的追加到磁盘中，那么他就是顺序的磁盘IO操作了，性能是要高于随机磁盘IO的，这种也叫做WAL（先写日志），</p><p>总结：</p><p>在Mysql中RedoLog是一种事务日志，用于记录已经提交的事务所做的修改操作。它的主要作用是在数据库发生崩溃或意外关闭时，通过重新执行已提交的事务来恢复数据库的一致性。</p><p>当一个事务开始时，MySQL会将该事务所做的修改操作记录到redo log中，而不是立即将数据写入磁盘。这样可以提高数据库的性能，因为磁盘写入是比较耗时的操作</p><p>redo log的写入是顺序的，按照事务的顺序将日志写入磁盘。这样可以减少磁盘寻道的时间，提高写入性能</p><p>整理执行过程是这样子的，在进行一个事务操作的时候，首先内存中的bufferPoll会从磁盘中的ibd文件获取数据到缓冲池，在执行增删改操作，执行完了之后，会将缓冲池中的脏页也就是已修改的数据页，记录到RedoLog日志文件中去，当事务提交完了之后过了一段时间，缓冲池中的脏页才会写入到磁盘中去，如果此时磁盘写入出错，那么就会重新执行事务，将redolog中的数据从磁盘中读取到缓冲区在重新执行写入到磁盘的操作，这样就保证了数据的持久性。</p><p>MySQL会定期将redo log的数据刷新到磁盘，以保证数据的持久性。刷新操作可以在事务提交时触发，当redo log的空间不足时触发，或者由后台线程定期触发。</p><p>当数据库发生崩溃或意外关闭时，MySQL可以通过redo log来恢复数据的一致性。在数据库重新启动时，MySQL会检查redo log，将未完成的事务重新执行，将数据恢复到崩溃前的状态。综上所述，redo log在MySQL中起着重要的作用，用于记录已提交事务的修改操作，并在数据库崩溃时保证数据的一致性恢复。</p><p>因为在业务操作中，我们操作数据一般都是随机读写磁盘的，而不是顺序读写磁盘。 而redo log在 往磁盘文件中写入数据，由于是日志文件，所以都是顺序写的。顺序写的效率，要远大于随机写。</p><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>回滚日志，用于记录数据被修改前的信息 , 作用包含两个 : </p><ul><li>提供回滚(保证事务的原子性) 和 MVCC(多版本并发控制) 。 undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的 update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。 </li><li>Undo log销毁：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些 日志可能还用于MVCC。 Undo log存储：undo log采用段的方式进行管理和记录，存放在前面介绍的 rollback segment 回滚段中，内部包含1024个undo log segment。</li></ul><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><h4 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h4><p>当前读读到的就是最新的数据，</p><p><img src="C:/Users/iipcloud0821/Desktop/%E5%BD%93%E5%89%8D%E8%AF%BB.gif" alt="当前读"></p><p>在测试中我们可以看到，即使是在默认的RR隔离级别下，事务A中依然可以读取到事务B最新提交的内 容，因为在查询语句后面加上了 lock in share mode 共享锁，此时是当前读操作。当然，当我们 加排他锁的时候，也是当前读操作。</p><h4 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h4><p>简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据， 不加锁，是非阻塞读。</p><ul><li>Read Committed：每次select，都生成一个快照读。 </li><li>Repeatable Read：开启事务后第一个select语句才是快照读的地方。 </li><li>Serializable：快照读会退化为当前读。</li></ul><h4 id="MVCC-1"><a href="#MVCC-1" class="headerlink" title="MVCC"></a>MVCC</h4><p>MVCC主要实现依赖于表中的三个隐式字段，undolog ，readview</p><p><img src="https://bu.dusays.com/2023/11/13/6551efca08517.png" alt="image-20231113174337202"></p><p>而上述的前两个字段是肯定会添加的， 是否添加最后一个字段DB_ROW_ID，得看当前表有没有主键， 如果有主键，则不会添加该隐藏字段。</p><h4 id="undolog"><a href="#undolog" class="headerlink" title="undolog"></a>undolog</h4><p>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。 当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。 而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会立即 被删除。</p><h4 id="版本链"><a href="#版本链" class="headerlink" title="版本链"></a>版本链</h4><p><img src="https://bu.dusays.com/2023/11/13/6551f0738241d.png" alt="image-20231113174626924"></p><p>RC：每一次提交都会生成一个新的ReadView</p><p>RR：可重复读也就是因为每次都是复用一个ReadView</p><h4 id="readview"><a href="#readview" class="headerlink" title="readview"></a>readview</h4><p><img src="https://bu.dusays.com/2023/11/13/6551f085252cf.png" alt="image-20231113174644430"></p><p><img src="https://bu.dusays.com/2023/11/13/6551f08f18aaa.png" alt="image-20231113174654543"></p><p>trx_id 代表当前undolog版本链对应事务ID。</p><p>不同的隔离级别，生成ReadView的时机不同： </p><ul><li>READ COMMITTED ：在事务中每一次执行快照读时生成ReadView。 </li><li>REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。</li></ul><h4 id="RC隔离级别"><a href="#RC隔离级别" class="headerlink" title="RC隔离级别"></a>RC隔离级别</h4><p>RC隔离级别下，在事务中每一次执行快照读时生成ReadView。</p><p><img src="https://bu.dusays.com/2023/11/13/6551f0e0912b2.png" alt="image-20231113174815901"></p><h4 id="RR隔离级别"><a href="#RR隔离级别" class="headerlink" title="RR隔离级别"></a>RR隔离级别</h4><p>RR隔离级别下，仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。 而RR 是可 重复读，在一个事务中，执行两次相同的select语句，查询到的结果是一样的。</p><p><img src="https://bu.dusays.com/2023/11/13/6551f0f76652e.png" alt="image-20231113174838621"></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL优化</title>
      <link href="/posts/b69403ff.html"/>
      <url>/posts/b69403ff.html</url>
      
        <content type="html"><![CDATA[<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Insert into tb_test values(1,&#x27;Tom&#x27;),(2,&#x27;Cat&#x27;),(3,&#x27;Jerry&#x27;);</span><br></pre></td></tr></table></figure><h3 id="手动控制事务"><a href="#手动控制事务" class="headerlink" title="手动控制事务"></a>手动控制事务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into tb_test values(1,&#x27;Tom&#x27;),(2,&#x27;Cat&#x27;),(3,&#x27;Jerry&#x27;);</span><br><span class="line">insert into tb_test values(4,&#x27;Tom&#x27;),(5,&#x27;Cat&#x27;),(6,&#x27;Jerry&#x27;);</span><br><span class="line">insert into tb_test values(7,&#x27;Tom&#x27;),(8,&#x27;Cat&#x27;),(9,&#x27;Jerry&#x27;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h3 id="主键顺序插入，性能要高于乱序插入"><a href="#主键顺序插入，性能要高于乱序插入" class="headerlink" title="主键顺序插入，性能要高于乱序插入"></a>主键顺序插入，性能要高于乱序插入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主键乱序插入 : 8 1 9 21 88 2 4 15 89 5 7 3</span><br><span class="line">主键顺序插入 : 1 2 3 4 5 7 8 9 15 21 88 89</span><br></pre></td></tr></table></figure><h2 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h2><p>如果一次性需要插入大批量数据(比如: 几百万的记录)，使用insert语句插入性能较低，此时可以使 用MySQL数据库提供的load指令进行插入。操作如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 客户端连接服务端时，加上参数 -–local-infile</span><br><span class="line">mysql –-local-infile -u root -p</span><br><span class="line">-- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">-- 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/app/tb_sku1.log&#x27; into table tb_user fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27; ;</span><br></pre></td></tr></table></figure><h2 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h2><p>MySQL的排序有两种方式： </p><ul><li>Using filesort : 通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。 </li><li>Using index : 通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要 额外排序，操作效率高。 </li></ul><p>对于以上的两种排序方式，Using index的性能高，而Using filesort的性能低，我们在优化排序 操作时，尽量要优化为 Using index。</p><p>执行SQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select id,age,phone from tb_user order by age ;</span><br><span class="line">explain select id,age,phone from tb_user order by age, phone ;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654cc4aa3ed91.png" alt="image-20231109193816874"></p><p>由于 age, phone 都没有索引，所以此时再排序时，出现Using filesort， 排序性能较低。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 创建索引</span><br><span class="line">create index idx_user_age_phone_aa on tb_user(age,phone);</span><br><span class="line">explain select id,age,phone from tb_user order by age;</span><br><span class="line">explain select id,age,phone from tb_user order by age , phone;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654cc4f31d755.png" alt="image-20231109193929633"></p><p>建立索引之后，再次进行排序查询，就由原来的Using filesort， 变为了 Using index，性能 就是比较高的了。</p><p><strong>创建索引后，根据age, phone进行降序排序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select id,age,phone from tb_user order by age desc , phone desc ;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654cc57851a25.png" alt="image-20231109194143567"></p><p>也出现 Using index， 但是此时Extra中出现了 Backward index scan，这个代表反向扫描索 引，因为在MySQL中我们创建的索引，默认索引的叶子节点是从小到大排序的，而此时我们查询排序 时，是从大到小，所以，在扫描时，就是反向扫描，就会出现 Backward index scan。 在 MySQL8版本中，支持降序索引，我们也可以创建降序索引。</p><p><strong>根据phone，age进行升序排序，phone在前，age在后。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select id,age,phone from tb_user order by phone , age;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654cc648030f0.png" alt="image-20231109194510851"></p><p>排序时,也需要满足最左前缀法则,否则也会出现 filesort。因为在创建索引的时候， age是第一个 字段，phone是第二个字段，所以排序时，也就该按照这个顺序来，否则就会出现 Using filesort。</p><p><strong>根据age, phone进行降序一个升序，一个降序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select id,age,phone from tb_user order by age asc , phone desc ;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654cc5de771fa.png" alt="image-20231109194325680"></p><p>因为创建索引时，如果未指定顺序，默认都是按照升序排序的，而查询时，一个升序，一个降序，此时 就会出现Using filesort。</p><p><img src="https://bu.dusays.com/2023/11/09/654cc6cc0bd31.png" alt="image-20231109194722035"></p><p>为了解决上述的问题，我们可以创建一个索引，这个联合索引中 age 升序排序，phone 倒序排序。</p><p> <strong>创建联合索引(age 升序排序，phone 倒序排序)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create index idx_user_age_phone_ad on tb_user(age asc ,phone desc);</span><br><span class="line">explain select id,age,phone from tb_user order by age asc , phone desc ;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654cc75fafc13.png" alt="image-20231109194950627"></p><p>order by优化原则: </p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则。 </li><li>尽量使用覆盖索引。 </li><li>多字段排序, 一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）。 </li><li>如果不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size(默认256k)。</li></ul><h2 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h2><p>在没有索引的情况下，执行如下SQL，查询执行计划：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select profession , count(*) from tb_user group by profession ;</span><br></pre></td></tr></table></figure><p>然后，我们在针对于 profession ， age， status 创建一个联合索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_user_pro_age_sta on tb_user(profession , age , status);</span><br></pre></td></tr></table></figure><p>紧接着，再执行前面相同的SQL查看执行计划。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select profession , count(*) from tb_user group by profession ;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654cc9758a96d.png" alt="image-20231109195841052"></p><p>我们发现，如果仅仅根据age分组，就会出现 Using temporary ；</p><p>而如果是 根据 profession,age两个字段同时分组，则不会出现 Using temporary。原因是因为对于分组操作， 在联合索引中，也是符合最左前缀法则的</p><p>所以，在分组操作中，我们需要通过以下两点进行优化，以提升性能： </p><ul><li>在分组操作时，可以通过索引来提高效率。 </li><li>分组操作时，索引的使用也是满足最左前缀法则的。</li></ul><h2 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h2><p>在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低。</p><p>优化思路: 一般分页查询时，通过创建 覆盖索引 能够比较好地提高性能，可以通过覆盖索引加子查 询形式进行优化。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql索引详解</title>
      <link href="/posts/2bf0e697.html"/>
      <url>/posts/2bf0e697.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文章由本人通过互联网自学、整理、总结的教程，仅作为学习笔记记录，并分享给有需要的同学。</p><h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><p>在我理解看来，索引是具有高效查询的一种数据结构，也可以理解为满足特定查找算法的数据结构，这种数据结构以某种方式指向数据。</p><h2 id="索引特点"><a href="#索引特点" class="headerlink" title="索引特点"></a>索引特点</h2><p><img src="https://bu.dusays.com/2023/11/09/654c5051978a1.png" alt="image-20231109112145106"></p><h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的索引结构，主要包含以下几种：</p><p><img src="https://bu.dusays.com/2023/11/09/654c507c829b0.png" alt="image-20231109112235443"></p><p>上述是MySQL中所支持的所有的索引结构，接下来，我们再来看看不同的存储引擎对于索引结构的支持情况</p><p><img src="https://bu.dusays.com/2023/11/09/654c51f2dc382.png" alt="image-20231109112842604"></p><blockquote><p> 注意： 我们平常所说的索引，如果没有特别指明，都是指B+树结构组织的索引。</p></blockquote><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><p>B-Tree，B树是一种多叉路衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉。 以一颗最大度数（max-degree）为5(5阶)的b-tree为例，那这个B树每个节点最多存储4个key，5 个指针：</p><p><img src="https://bu.dusays.com/2023/11/09/654c52428e040.png" alt="image-20231109113008883"></p><blockquote><p>知识小贴士: 树的度数指的是一个节点的子节点个数。</p></blockquote><p>我们可以通过一个数据结构可视化的网站来演示：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p><h3 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h3><p>B+Tree是B-Tree的变种，我们以一颗最大度数（max-degree）为4（4阶）的b+tree为例，来看一 下其结构示意图：</p><p><img src="https://bu.dusays.com/2023/11/09/654c5486bc34b.png" alt="image-20231109113948669"></p><p>我们可以看到，两部分： </p><ul><li>绿色框框起来的部分，是索引部分，仅仅起到索引数据的作用，不存储数据。 </li><li>红色框框起来的部分，是数据存储部分，在其叶子节点中要存储具体的数据。</li></ul><p><a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p><p>最终我们看到，B+Tree 与 B-Tree相比，主要有以下三点区别：</p><ul><li>所有的数据都会出现在叶子节点。 </li><li>叶子节点形成一个单向链表。 </li><li>非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。</li></ul><p>上述我们所看到的结构是标准的B+Tree的数据结构，接下来，我们再来看看MySQL中优化之后的 B+Tree。</p><p>MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点 的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序。</p><p><img src="https://bu.dusays.com/2023/11/09/654c55d51f494.png" alt="image-20231109114524046"></p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>MySQL中除了支持B+Tree索引，还支持一种索引类型—-Hash索引。</p><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在 hash表中。</p><p><img src="https://bu.dusays.com/2023/11/09/654c55fe9e4d9.png" alt="image-20231109114605502"></p><p>如果两个(或多个)键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可 以通过链表来解决。</p><p><img src="https://bu.dusays.com/2023/11/09/654c560b5a526.png" alt="image-20231109114618382"></p><p>特点 </p><ul><li>Hash索引只能用于对等比较(=，in)，不支持范围查询（between，&gt;，&lt; ，…）  </li><li>无法利用索引完成排序操作 </li><li>查询效率高，通常(不存在hash冲突的情况)只需要一次检索就可以了，效率通常要高于B+tree索引</li></ul><h3 id="存储引擎支持"><a href="#存储引擎支持" class="headerlink" title="存储引擎支持"></a>存储引擎支持</h3><ul><li><p>在MySQL中，支持hash索引的是Memory存储引擎。 </p></li><li><p>而InnoDB中具有自适应hash功能，hash索引是 InnoDB存储引擎根据B+Tree索引在指定条件下自动构建的。</p></li></ul><p>为什么InnoDB存储引擎选择使用B+tree索引结构?</p><ul><li>相对于二叉树，层级更少，搜索效率高；</li><li>对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储 的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低；这里说的性能大部分是指查询性能。</li><li>相对Hash索引，B+tree支持范围匹配及排序操作；</li></ul><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p>在MySQL数据库，将索引的具体类型主要分为以下几类：主键索引、唯一索引、常规索引、全文索引。</p><p><img src="https://bu.dusays.com/2023/11/09/654c56b866813.png" alt="image-20231109114911302"></p><h2 id="聚集索引-amp-二级索引"><a href="#聚集索引-amp-二级索引" class="headerlink" title="聚集索引&amp;二级索引"></a>聚集索引&amp;二级索引</h2><p>而在在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><p><img src="https://bu.dusays.com/2023/11/09/654c56cd2ca8e.png" alt="image-20231109114932113"></p><h3 id="聚集索引选取规则"><a href="#聚集索引选取规则" class="headerlink" title="聚集索引选取规则"></a>聚集索引选取规则</h3><ul><li>如果存在主键，主键索引就是聚集索引。</li><li>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</li></ul><p>聚集索引和二级索引的具体结构如下：</p><p><img src="https://bu.dusays.com/2023/11/09/654c57337c269.png" alt="image-20231109115114287"></p><ul><li>聚集索引的叶子节点下挂的是这一行的数据 。</li><li>二级索引的叶子节点下挂的是该字段值对应的主键值、主键Id。</li></ul><p>当我们执行如下的SQL语句时，具体的查询过程如下：</p><p><img src="https://bu.dusays.com/2023/11/09/654c576b4d8db.png" alt="image-20231109115210259"></p><p>具体过程如下: </p><ul><li>由于是根据name字段进行查询，所以先根据name=’Arm’到name字段的二级索引中进行匹配查找。但是在二级索引中只能查找到 Arm 对应的主键值 10。</li><li>由于查询返回的数据是*，所以此时，还需要根据主键值10，到聚集索引中查找10对应的记录，最 终找到10对应的行row。</li><li>最终拿到这一行的数据，直接返回即可。</li></ul><blockquote><p>这种先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取 数据的方式，就称之为回表查询。</p></blockquote><h2 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name,... ) ;</span><br></pre></td></tr></table></figure><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM TABLE_NAME;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX INDEX_NAME ON TABLE_NAME;</span><br></pre></td></tr></table></figure><h3 id="演示操作"><a href="#演示操作" class="headerlink" title="演示操作"></a>演示操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb_user(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary key</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    phone <span class="type">varchar</span>(<span class="number">11</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    profession <span class="type">varchar</span>(<span class="number">11</span>) comment <span class="string">&#x27;专业&#x27;</span>,</span><br><span class="line">    age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别 , 1: 男, 2: 女&#x27;</span>,</span><br><span class="line">    status <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">    createtime datetime comment <span class="string">&#x27;创建时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;系统用户表&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_user_name ON tb_user(name);</span><br><span class="line">CREATE UNIQUE INDEX idx_user_phone ON tb_user(phone);</span><br></pre></td></tr></table></figure><h4 id="创建联合索引"><a href="#创建联合索引" class="headerlink" title="创建联合索引"></a>创建联合索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_user_pro_age_sta ON tb_user(profession,age,status);</span><br></pre></td></tr></table></figure><h4 id="查看索引-1"><a href="#查看索引-1" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from tb_user;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c59d3e09bf.png" alt="image-20231109120226885"></p><h2 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h2><p>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信 息。通过如下指令，可以查看当前数据库的INSERT、UPDATE、DELETE、SELECT的访问频次：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- session 是查看当前会话 ;</span><br><span class="line">-- global 是查询全局数据 ;</span><br><span class="line">SHOW GLOBAL STATUS LIKE &#x27;Com_______&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c5a31cc0f6.png" alt="image-20231109120400997"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Com_delete: 删除次数</span><br><span class="line">Com_insert: 插入次数</span><br><span class="line">Com_select: 查询次数</span><br><span class="line">Com_update: 更新次数</span><br></pre></td></tr></table></figure><blockquote><p>通过上述指令，我们可以查看到当前数据库到底是以查询为主，还是以增删改为主，从而为数据库优化提供参考依据。 如果是以增删改为主，我们可以考虑不对其进行索引的优化。 如果是以 查询为主，那么就要考虑对数据库的索引进行优化了。</p></blockquote><p>通过SQL执行的频率，就能知道是以查询为主还是增删改为主，如果是以查询为主,我们可以查看慢查询日志来分析。</p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有 SQL语句的日志。</p><p>MySQL的慢查询日志默认没有开启，我们可以查看一下系统变量 slow_query_log。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;slow_query_log&#x27;;</span><br><span class="line">+----------------+-------+</span><br><span class="line">| Variable_name  | Value |</span><br><span class="line">+----------------+-------+</span><br><span class="line">| slow_query_log | OFF    |</span><br><span class="line">+----------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="开启慢查询"><a href="#开启慢查询" class="headerlink" title="开启慢查询"></a>开启慢查询</h4><p>在MySQL的配置文件（/etc/my.cnf）中配置如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启MySQL慢日志查询开关</span></span><br><span class="line">slow_query_log=1</span><br><span class="line"><span class="comment"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span></span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure><p>配置完毕之后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>再次查看 <code>show variables like &#39;slow_query_log&#39;;</code></p><p>可以看到为ON了</p><p><img src="https://bu.dusays.com/2023/11/09/654c5bc7952ef.png" alt="image-20231109121046699"></p><p>查看日志文件: <code>/var/lib/mysql/localhost-slow.log。</code></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>慢查询设置为2秒,为了达到2秒以上,可以使用<code>navicat Premium 16</code>进行数据生成,生成几百万条即可</p><p>当执行一条查询语句时间超过2秒以上时，我们再去查看<code>/var/lib/mysql/localhost-slow.log。</code></p><p><img src="https://bu.dusays.com/2023/11/09/654c5cbb83ae9.png" alt="image-20231109121450005"></p><p>慢查询的作用主要是定位，查询效率比较低的SQL，从而进行针对性的优化。</p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。通过have_profiling 参数，能够看到当前MySQL是否支持profile操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@have_profiling;## 查看是否支持Profile操作</span><br><span class="line">select  @@profiling;## 查看Prifile是否开启</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c5dccbaaac.png" alt="image-20231109121923855"></p><p>可以看到，当前MySQL是支持 profile操作的，但是开关是关闭的。可以通过set语句在 session/global级别开启profiling：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET profiling = 1;</span><br></pre></td></tr></table></figure><p>开关已经打开了，接下来，我们所执行的SQL语句，都会被MySQL记录，并记录执行时间消耗到哪儿去 了。 我们直接执行如下的SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_user;</span><br><span class="line">select * from tb_user where id = 1;</span><br><span class="line">select * from tb_user where name = &#x27;白起&#x27;;</span><br><span class="line">select count(*) from tb_sku;</span><br></pre></td></tr></table></figure><p>执行一系列的业务SQL的操作，然后通过如下指令查看指令的执行耗时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查看每一条SQL的耗时基本情况</span><br><span class="line">show profiles;</span><br><span class="line">-- 查看指定query_id的SQL语句各个阶段的耗时情况</span><br><span class="line">show profile for query query_id;</span><br><span class="line">-- 查看指定query_id的SQL语句CPU的使用情况</span><br><span class="line">show profile cpu for query query_id;</span><br></pre></td></tr></table></figure><p>查看每一条SQL的耗时情况:</p><p><img src="https://bu.dusays.com/2023/11/09/654c5ec6a6272.png" alt="image-20231109122333639"></p><p>查看指定SQL各个阶段的耗时情况:</p><p><img src="https://bu.dusays.com/2023/11/09/654c5ed88a634.png" alt="image-20231109122350833"></p><p>可以看到<code>select * from tb_user where name = &#39;白起&#39;;</code>这sql语句查询的时间是比较久的,因为他是先通过的二级索引查找,找到对应的ID值,在通过ID查找的所有数据。</p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行 过程中表如何连接和连接的顺序。</p><p>语法: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 直接在select语句之前加上关键字 explain / desc</span><br><span class="line">EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件 ;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c705a021bd.png" alt="image-20231109133833235"></p><p>Explain 执行计划中各个字段的含义:</p><p><img src="https://bu.dusays.com/2023/11/09/654c706cb08e3.png" alt="image-20231109133851504"></p><p>利用<code>explain</code>我们可以查看sql查询语句是否有走索引,</p><h2 id="索引使用规范"><a href="#索引使用规范" class="headerlink" title="索引使用规范"></a>索引使用规范</h2><h3 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h3><p>如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是<strong>查询从索引的最左列开始</strong>， 并且不跳过索引中的列。如果跳跃某一列，索引将会部分<strong>失效(后面的字段索引失效)</strong>。</p><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p><img src="https://bu.dusays.com/2023/11/09/654c803958e8f.png" alt="image-20231109144615734"></p><p>在<code>tb_user</code>表中 profession 、 age 、status 组建了联合索引为<code>idx_user_pro_age_sta</code>，可以看到<code>Seq_in_index</code> 列的顺序从上往下依次为1-3</p><p>分别执行一下查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">31</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c827e32708.png" alt="image-20231109145557362"></p><p>三次执行过程结果分析：</p><p>以上的这三组测试中，我们发现只要联合索引最左边的字段 profession存在，索引就会生效，只不 过索引的长度不同。 而且由以上三组测试，我们也可以推测出profession字段索引长度为36、age 字段索引长度为2、status字段索引长度为4。</p><p>分别执行一下查询语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where age = 31 and status = &#x27;0&#x27;;</span><br><span class="line">explain select * from tb_user where status = &#x27;0&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c83ce73d66.png" alt="image-20231109150133458"></p><p>而通过上面的这两组测试，我们也可以看到索引并未生效，原因是因为不满足最左前缀法则，联合索引最左边的列profession不存在,所以那type为ALL走的是全局搜索。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where profession = &#x27;软件工程&#x27; and status = &#x27;0&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c842b8fd1c.png" alt="image-20231109150306948"></p><p>上述的SQL查询时，存在profession字段，最左边的列是存在的，索引满足最左前缀法则的基本条件。但是查询时，跳过了age这个列，所以后面的列索引是不会使用的，也就是索引部分生效，所以索引的长度就是36。</p><p>思考：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where age = 31 and status = &#x27;0&#x27; and profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c852d8c72e.png" alt="image-20231109150724913"></p><p>可以看到也走了索引，所以条件得顺序并不影响，同样也是满足最左前缀法则。</p><blockquote><p> 最左前缀法则中指的最左边的列，是指在查询时，联合索引的最左边的字段(即是 第一个字段)必须存在，与我们编写SQL时，条件编写的先后顺序无关。</p></blockquote><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><p>联合索引中，出现范围查询(&gt;,&lt;)，范围查询右侧的列索引失效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where profession = &#x27;软件工程&#x27; and age &gt; 30 and status = &#x27;0&#x27;;</span><br><span class="line">explain select * from tb_user where profession = &#x27;软件工程&#x27; and age &gt;= 30 and status = &#x27;0&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c85bb8e358.png" alt="image-20231109150946897"></p><p>当范围查询使用<code>&gt;</code> 或 <code>&lt;</code> 时，走联合索引了，但是索引的长度为38，就说明范围查询右边的status字 段是没有走索引的。</p><p>当范围查询使用<code>&gt;=</code> 或 <code>&lt;=</code>时，走联合索引了，索引的长度为42，就说明所有的字段都是走索引的。</p><p>所以，在业务允许的情况下，尽可能的使用类似于 &gt;= 或 &lt;= 这类的范围查询，而避免使用 &gt; 或 &lt; 。</p><h3 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h3><h4 id="索引列运算"><a href="#索引列运算" class="headerlink" title="索引列运算"></a>索引列运算</h4><p>不要在索引列上进行运算操作， 索引将失效。</p><p>在tb_user表中，除了前面介绍的联合索引之外，还有一个索引，是phone字段的单列索引。</p><p> 当根据phone字段进行等值匹配查询时, 索引生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where phone = &#x27;17799990015&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c86c92b18a.png" alt="image-20231109151416401"></p><p> 当根据phone字段进行函数运算操作之后，索引失效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where substring(phone,10,2) = &#x27;15&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c87084e0c7.png" alt="image-20231109151519704"></p><h4 id="字符串不加引号"><a href="#字符串不加引号" class="headerlink" title="字符串不加引号"></a>字符串不加引号</h4><p>字符串类型字段使用时，不加引号，索引将失效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br><span class="line">explain select * from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = 0;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c847630e9c.png" alt="image-20231109150421615"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where phone = &#x27;17799990015&#x27;;</span><br><span class="line">explain select * from tb_user where phone = 17799990015;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c876ff1226.png" alt="image-20231109151703332"></p><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><p>由于下面查询语句中，都是根据profession字段查询，符合最左前缀法则，联合索引是可以生效的， 我们主要看一下，模糊查询时，%加在关键字之前，和加在关键字之后的影响。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where profession like &#x27;软件%&#x27;;</span><br><span class="line">explain select * from tb_user where profession like &#x27;%工程&#x27;;</span><br><span class="line">explain select * from tb_user where profession like &#x27;%工%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c87ce083de.png" alt="image-20231109151837361"></p><p>经过上述的测试，我们发现，在like模糊查询中，在关键字后面加%，索引可以生效。而如果在关键字 前面加了%，索引将会失效。</p><h4 id="or连接条件"><a href="#or连接条件" class="headerlink" title="or连接条件"></a>or连接条件</h4><p>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where id = 10 or age = 23;</span><br><span class="line">explain select * from tb_user where phone = &#x27;17799990017&#x27; or age = 23;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c88479536a.png" alt="image-20231109152038899"></p><h3 id="数据分布影响"><a href="#数据分布影响" class="headerlink" title="数据分布影响"></a>数据分布影响</h3><p>如果MySQL评估使用索引比全表更慢，则不使用索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where profession is null;</span><br><span class="line">explain select * from tb_user where profession is not null;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c8b6ed73bd.png" alt="image-20231109153406023"></p><p>在查询SQl时，MYSQL会评估是走索引快，还是走全表扫描快，如果全表 扫描更快，则放弃索引走全表扫描。 因此，is null 、is not null是否走索引，得具体情况具体 分析，并不是固定的。</p><p><strong>假设</strong><br>表中有1000条数据，age字段有15条是大于10的数据，此时MYSQL大概率是会走索引的，因为只有一部分的数据满足条件，所以MYSQL评估走索引可能更快</p><p>如果大于10的数据有900条，那MYSQL大概率是会走全表扫描不会走索引的，因为大多树数据都满足条件</p><h3 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h3><p>tb_user表数据如下</p><p><img src="https://bu.dusays.com/2023/11/09/654c9186dd45b.png" alt="image-20231109160005676"></p><p><img src="https://bu.dusays.com/2023/11/09/654c919adfde7.png" alt="image-20231109160026086"></p><p>这里可以看到，profession有两个索引，一个联合索引一个单列索引</p><p>执行SQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eplain select * from tb_user where profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c920665a3a.png" alt="image-20231109160213618"></p><p>测试结果，我们可以看到，possible_keys中 idx_user_pro_age_sta,idx_user_pro 这两个 索引都可能用到，最终MySQL选择了idx_user_pro_age_sta索引。这是MySQL<strong>自动选择的结果</strong>。</p><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优 化操作的目的。</p><p>use index ： 建议MySQL使用哪一个索引完成此次查询（仅仅是建议，mysql内部还会再次进 行评估）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user use index(idx_user_pro) where profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p>ignore index ： 忽略指定的索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user ignore index(idx_user_pro) where profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p>force index ： 强制使用索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user force index(idx_user_pro) where profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654c92ddd1746.png" alt="image-20231109160548918"></p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>尽量使用覆盖索引，减少select *。 那么什么是覆盖索引呢？ 覆盖索引是指 查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 。</p><p>使用select * 很容易出现回表查询</p><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>故名意思就是把某个字段的前缀作为索引进行查询，通常用来处理大文本类型的如：varchar，text，longtext等，这些文本类型的字段如果不做前缀处理，那么会让索引变得很大，查询时，浪费大量的磁盘IO操作，影响查询效率，此时可以只将字符串的一部分前缀，建 立索引，这样可以大大节约索引空间，从而提高索引效率。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_xxxx on table_name(column(n)) ;</span><br></pre></td></tr></table></figure><h4 id="前缀长度"><a href="#前缀长度" class="headerlink" title="前缀长度"></a>前缀长度</h4><p>可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值， 索引选择性越高则查询效率越高， 唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user ;</span><br><span class="line">select count(distinct substring(email,1,5)) / count(*) from tb_user ;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/09/654ca1c7e2988.png" alt="image-20231109170924275"></p><p><img src="https://bu.dusays.com/2023/11/09/654ca24437673.png" alt="image-20231109171130375"></p><h2 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h2><ul><li>针对于数据量较大，且查询比较频繁的表建立索引。 </li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。 </li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。 </li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。 </li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间， 避免回表，提高查询效率。 </li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增 删改的效率。</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含 NULL值时，它可以更好地确定哪个索引最有效地用于查询。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea远程调试的几种方式</title>
      <link href="/posts/a50538bc.html"/>
      <url>/posts/a50538bc.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在微服务项目中,假设项目在服务器部署上线了，此时该如何进行调式和排查问题呢？</p><h2 id="Jvm-Debug"><a href="#Jvm-Debug" class="headerlink" title="Jvm Debug"></a>Jvm Debug</h2><p>在<code>idea</code>中配置<code>Jvm Debug</code>，注意这里<code>Host</code>写自己主机ip地址,Port默认<code>5005</code>即可,模块选择你需要调试的模块</p><p><img src="https://bu.dusays.com/2023/11/05/65476f3ea2048.png" alt="image-20231105183228918"></p><p>在Jenkins中设置构建配置信息,配置好后重新启动docker服务,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.150.101 <span class="string">&quot;/usr/local/src/script/startup.sh -c tj-trade -n tj-trade -d tj-trade -p 8088 -a 5005&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/05/6547700aa3595.png" alt="image-20231105183553154"></p><p>可以看到启动之后也带上了5005端口</p><p><img src="https://bu.dusays.com/2023/11/05/6547726f5d62b.png" alt="image-20231105184606151"></p><p>在启动idea的JvmDebug,此时可以看到我Idea中之启动了一个JvmDebug应用,其余服务都没有启动</p><p>并且当控制台打印<code>transport: &#39;socket&#39;</code>说明,链接成功,正在进行通信了</p><p><img src="https://bu.dusays.com/2023/11/05/654772c3a87e9.png" alt="image-20231105184729493"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>此时,只需要在调用一次接口就可以查看是否已经可以实现远程调试的作用了</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Bug记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程调式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos服务下线报错</title>
      <link href="/posts/d1d3609c.html"/>
      <url>/posts/d1d3609c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一下调试远程和本地代码的时候，下线Nacos远程服务报错问题</p><h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p><code>192.168.150.1</code>是本地运行的服务, <code>101</code>是服务器部署的服务,现在我需要让接口调用Nacos的时候走<code>192.168.150.1</code>有两种方法,一种是调整某个服务的 <strong>优先级</strong>,第二种方法是直接下线某个服务,这里我采用的是第二种,直接下线服务的方式,此时就出现了一下的问题</p><p><img src="https://bu.dusays.com/2023/11/04/654653b822f06.png" alt=""></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>nacos 采用 <code>raft</code>选举算法计算 <code>Leader</code>，并记录上次启动的集群地址，服务器 IP 改变时(网络环境不稳定，如WIFI， IP 地址也经常变化)会导致 raft 记录的集群地址失效，导致选 Leader 出现问题。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="Nacos在本地"><a href="#Nacos在本地" class="headerlink" title="Nacos在本地"></a>Nacos在本地</h3><ul><li>删除Nacos根目录下data文件中的protocol文件夹,然后重启即可</li></ul><h3 id="Nacos在服务器中"><a href="#Nacos在服务器中" class="headerlink" title="Nacos在服务器中"></a>Nacos在服务器中</h3><p>相关命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nacos /bin/bash<span class="comment">## 进入nacos容器</span></span><br><span class="line"><span class="built_in">cd</span> data/<span class="comment">## 进入data文件夹</span></span><br><span class="line"><span class="built_in">rm</span> -rf protocol/<span class="comment">## 删除文件夹</span></span><br><span class="line"><span class="built_in">exit</span> </span><br><span class="line"></span><br><span class="line">docker restart nacos  <span class="comment">## 重启Nacos容器</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/11/05/6547550800ca6.png" alt="image-20231105164038279"></p><p>等待Nacos重启之后再次点击下线成功,此问题解决</p><p><img src="https://bu.dusays.com/2023/11/05/654755c6c7302.png" alt="image-20231105164349284"></p>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> 微服务 </category>
          
          <category> Bug记录 </category>
          
          <category> 服务治理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java扩展第三方Jar包</title>
      <link href="/posts/8388fdb4.html"/>
      <url>/posts/8388fdb4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在<a href="https://www.bilibili.com/video/BV16J411h7Rd/">B站大学</a>学习并发编程的时候，老师引用了一个第三方的jar包（jol-core），maven坐标如下，来打印锁对象的Mark Word字节码，从而更直观察地多线程下加偏向锁的情况。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些都是挺常规的操作，接着老师的骚操作来了，扩展了jar包里面的方法。弹幕里面都是惊呼声，老师改了jar包，我们学习者没法复现了呀。</p><p>我这人就喜欢钻牛角尖，评论区翻遍了也没见得有这个Jar包修改方法的 <strong>好心人</strong>，那就只能自己动手咯。</p><h2 id="视频地址"><a href="#视频地址" class="headerlink" title="视频地址"></a>视频地址</h2><iframe src="//player.bilibili.com/player.html?aid=81461839&bvid=BV16J411h7Rd&cid=1235831559&p=83" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="Jol-Core依赖加载失败"><a href="#Jol-Core依赖加载失败" class="headerlink" title="Jol-Core依赖加载失败"></a>Jol-Core依赖加载失败</h2><blockquote><p>如果你没有这个问题可直接跳过</p></blockquote><p>在加载Maven依赖的时候，Jol-Core这个Jar包就是拉不下来，因此我重新更新了一下Maven <code>settings.xml</code>中的  <strong>mirror</strong>,有需要的直接在你的 mirrors中追加即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>mirrorId<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>repositoryId<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://my.repository.com/repo/path<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>sprintio<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-snapshot/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>huaweicloud<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mirror from maven huaweicloud<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirror.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-default-http-blocker<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>external:http:*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://0.0.0.0/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">blocked</span>&gt;</span>true<span class="tag">&lt;/<span class="name">blocked</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拉取源码"><a href="#拉取源码" class="headerlink" title="拉取源码"></a>拉取源码</h2><p>我这边目前是用的最新版本,直接在Maven除选中依赖右击 <code>Download Soures</code></p><p><img src="https://bu.dusays.com/2023/10/31/6540d041b492e.png" alt="image-20231031180032110"></p><p>在左侧项目的外部库下面展开对应jar包，然后右键选打开于Explore</p><p><img src="https://bu.dusays.com/2023/10/31/6540d2904537d.png" alt="image-20231031181021905"></p><p>找到<code>jol-core-0.17-sources.jar</code>包右击解压出来，我这边是用的<code>7-Zip</code> </p><p><img src="https://bu.dusays.com/2023/10/31/6540d2e5b507f.png" alt="image-20231031181148520"></p><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><ol><li>新建一个项目</li><li>将解压出来的<code>org</code>文件夹复制到新建项目中的 <code>src/main/Java</code>下</li><li>将<code>META-INF</code>文件夹放入<code>resource</code>文件夹中</li><li>将<code>META-INF</code>下的<code>pom.xml</code>文件复制到项目根目录下</li><li>加载pom.xml, 运行Maven加载依赖即可</li></ol><p><img src="https://bu.dusays.com/2023/10/31/6540d3af9b22f.png" alt="image-20231031181509946"></p><h2 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h2><p>打开<code>ClassLayout</code>文件,双击两下<code>shift</code>可快速查找文件,在<code>Ctrl+O</code>查找<code>toPrintable</code>方法,可以看到默认没有改源码之前只有一个<code>toPrintable</code>方法 </p><p><img src="https://bu.dusays.com/2023/10/31/6540d58e3f98e.png" alt="image-20231031182309171"></p><p>这里我是参考<code>toPrintable()</code>方法进行重写的,看似吊炸天其实也就这样,没啥太多的代码,也就一百多行而已,那么我就来带大家一起来解读一下这个方法的作用吧</p><h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><p>如果您不需要解读请往下滑</p><p> <code>toPrintable</code> 主要用于输出一个对象的内部布局信息，包括对象的标头（Mark Word 和 Class Word）、数组长度（如果对象是数组），字段信息以及空间损失等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toPrintable</span><span class="params">(Object instance)</span> &#123;</span><br><span class="line">    <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(sw);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算最长的类型名称</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxTypeLen</span> <span class="operator">=</span> <span class="string">&quot;TYPE&quot;</span>.length();</span><br><span class="line">    <span class="keyword">for</span> (FieldLayout f : fields()) &#123;</span><br><span class="line">        maxTypeLen = Math.max(f.typeClass().length(), maxTypeLen);</span><br><span class="line">    &#125;</span><br><span class="line">    maxTypeLen += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一些描述信息的字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_OBJ_HEADER</span> <span class="operator">=</span> <span class="string">&quot;(object header)&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_MARK_WORD</span> <span class="operator">=</span> <span class="string">&quot;(object header: mark)&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_CLASS_WORD</span> <span class="operator">=</span> <span class="string">&quot;(object header: class)&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_ARR_LEN</span> <span class="operator">=</span> <span class="string">&quot;(array length)&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_FIELD_GAP</span> <span class="operator">=</span> <span class="string">&quot;(alignment/padding gap)&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_OBJ_GAP</span> <span class="operator">=</span> <span class="string">&quot;(object alignment gap)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算最长的描述信息的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxDescrLen</span> <span class="operator">=</span> <span class="string">&quot;DESCRIPTION&quot;</span>.length();</span><br><span class="line">    maxDescrLen = Math.max(maxDescrLen, MSG_OBJ_HEADER.length());</span><br><span class="line">    maxDescrLen = Math.max(maxDescrLen, MSG_MARK_WORD.length());</span><br><span class="line">    maxDescrLen = Math.max(maxDescrLen, MSG_CLASS_WORD.length());</span><br><span class="line">    maxDescrLen = Math.max(maxDescrLen, MSG_FIELD_GAP.length());</span><br><span class="line">    maxDescrLen = Math.max(maxDescrLen, MSG_OBJ_GAP.length());</span><br><span class="line">    <span class="keyword">for</span> (FieldLayout f : fields()) &#123;</span><br><span class="line">        maxDescrLen = Math.max(f.shortFieldName().length(), maxDescrLen);</span><br><span class="line">    &#125;</span><br><span class="line">    maxDescrLen += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义格式化字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> <span class="string">&quot;%3d %3d %&quot;</span> + maxTypeLen + <span class="string">&quot;s %-&quot;</span> + maxDescrLen + <span class="string">&quot;s %s%n&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">formatS</span> <span class="operator">=</span> <span class="string">&quot;%3s %3s %&quot;</span> + maxTypeLen + <span class="string">&quot;s %-&quot;</span> + maxDescrLen + <span class="string">&quot;s %s%n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查传入的实例是否为null</span></span><br><span class="line">    <span class="keyword">if</span> (instance != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载类，用于检查实例类型是否匹配</span></span><br><span class="line">            Class&lt;?&gt; klass = ClassUtils.loadClass(classData.name());</span><br><span class="line">            <span class="keyword">if</span> (!klass.isAssignableFrom(instance.getClass())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Passed instance type &quot;</span> + instance.getClass() + <span class="string">&quot; is not assignable from &quot;</span> + klass + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Class is not found: &quot;</span> + classData.name() + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出类的名称和对象内部信息的标题行</span></span><br><span class="line">    pw.println(classData.name() + <span class="string">&quot; object internals:&quot;</span>);</span><br><span class="line">    pw.printf(formatS, <span class="string">&quot;OFF&quot;</span>, <span class="string">&quot;SZ&quot;</span>, <span class="string">&quot;TYPE&quot;</span>, <span class="string">&quot;DESCRIPTION&quot;</span>, <span class="string">&quot;VALUE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化标头、类标头和数组长度的字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">markStr</span> <span class="operator">=</span> <span class="string">&quot;N/A&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">classStr</span> <span class="operator">=</span> <span class="string">&quot;N/A&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">arrLenStr</span> <span class="operator">=</span> <span class="string">&quot;N/A&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取标头、类标头和数组长度的大小</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">markSize</span> <span class="operator">=</span> model.markHeaderSize();</span><br><span class="line">    <span class="type">int</span> <span class="variable">classSize</span> <span class="operator">=</span> model.classHeaderSize();</span><br><span class="line">    <span class="type">int</span> <span class="variable">arrSize</span> <span class="operator">=</span> model.arrayLengthHeaderSize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算标头、类标头和数组长度的偏移</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">markOffset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">classOffset</span> <span class="operator">=</span> markOffset + markSize;</span><br><span class="line">    <span class="type">int</span> <span class="variable">arrOffset</span> <span class="operator">=</span> classOffset + classSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果实例不为null，获取标头信息</span></span><br><span class="line">    <span class="keyword">if</span> (instance != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VM.current();</span><br><span class="line">        <span class="keyword">if</span> (markSize == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">mark</span> <span class="operator">=</span> vm.getLong(instance, markOffset);</span><br><span class="line">            <span class="type">String</span> <span class="variable">decoded</span> <span class="operator">=</span> (classSize &gt; <span class="number">0</span>) ? parseMarkWord(mark) : <span class="string">&quot;(Lilliput)&quot;</span>;</span><br><span class="line">            markStr = toHex(mark) + <span class="string">&quot; &quot;</span> + decoded;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (markSize == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mark</span> <span class="operator">=</span> vm.getInt(instance, markOffset);</span><br><span class="line">            <span class="type">String</span> <span class="variable">decoded</span> <span class="operator">=</span> (classSize &gt; <span class="number">0</span>) ? parseMarkWord(mark) : <span class="string">&quot;(Lilliput)&quot;</span>;</span><br><span class="line">            markStr = toHex(mark) + <span class="string">&quot; &quot;</span> + decoded;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果类标头有大小，获取类标头信息</span></span><br><span class="line">        <span class="keyword">if</span> (classSize == <span class="number">8</span>) &#123;</span><br><span class="line">            classStr = toHex(vm.getLong(instance, classOffset));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (classSize == <span class="number">4</span>) &#123;</span><br><span class="line">            classStr = toHex(vm.getInt(instance, classOffset));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果类是数组，获取数组长度信息</span></span><br><span class="line">        <span class="keyword">if</span> (classData.isArray()) &#123;</span><br><span class="line">            arrLenStr = Integer.toString(vm.getInt(instance, arrOffset));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出标头、类标头和数组长度的信息</span></span><br><span class="line">    pw.printf(format, markOffset, markSize, <span class="string">&quot;&quot;</span>, MSG_MARK_WORD, markStr);</span><br><span class="line">    <span class="keyword">if</span> (classSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        pw.printf(format, classOffset, classSize, <span class="string">&quot;&quot;</span>, MSG_CLASS_WORD, classStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (classData.isArray()) &#123;</span><br><span class="line">        pw.printf(format, arrOffset, arrSize, <span class="string">&quot;&quot;</span>, MSG_ARR_LEN, arrLenStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">nextFree</span> <span class="operator">=</span> headerSize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出字段信息</span></span><br><span class="line">    <span class="keyword">for</span> (FieldLayout f : fields()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f.offset() &gt; nextFree) &#123;</span><br><span class="line">            pw.printf(format, nextFree, (f.offset() - nextFree), <span class="string">&quot;&quot;</span>, MSG_FIELD_GAP, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">fi</span> <span class="operator">=</span> f.data().refField();</span><br><span class="line">        pw.printf(format,</span><br><span class="line">                  f.offset(),</span><br><span class="line">                  f.size(),</span><br><span class="line">                  f.typeClass(),</span><br><span class="line">                  f.shortFieldName(),</span><br><span class="line">                  (instance != <span class="literal">null</span> &amp;&amp; fi != <span class="literal">null</span>) ? ObjectUtils.safeToString(ObjectUtils.value(instance, fi)) : <span class="string">&quot;N/A&quot;</span></span><br><span class="line">                 );</span><br><span class="line"></span><br><span class="line">        nextFree = f.offset() + f.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">sizeOf</span> <span class="operator">=</span> (instance != <span class="literal">null</span>) ? VM.current().sizeOf(instance) : instanceSize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出总大小和空间损失信息</span></span><br><span class="line">    <span class="keyword">if</span> (sizeOf != nextFree) &#123;</span><br><span class="line">        pw.printf(format, nextFree, lossesExternal, <span class="string">&quot;&quot;</span>, MSG_OBJ_GAP, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pw.printf(<span class="string">&quot;Instance size: %d bytes%n&quot;</span>, sizeOf);</span><br><span class="line">    pw.printf(<span class="string">&quot;Space losses: %d bytes internal + %d bytes external = %d bytes total%n&quot;</span>, lossesInternal, lossesExternal, lossesTotal);</span><br><span class="line"></span><br><span class="line">    pw.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sw.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重构方法"><a href="#重构方法" class="headerlink" title="重构方法"></a>重构方法</h3><p>可以看出<code>toPrintable</code>方法不止输出了MarkWord信息还有 Class Word、数组长度（如果对象是数组），字段信息以及空间损失等。</p><p>所以我们新增一个方法参考上述方法写就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toPrintableSimpleSerMs</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> toPrintableSimpleSerMs(classData.instance());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">toPrintableSimpleSerMs</span><span class="params">(Object instance)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">markStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">remind</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取标头的大小</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">markSize</span> <span class="operator">=</span> model.markHeaderSize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置标头的偏移</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">markOffset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果传入的实例不为null，获取标头信息</span></span><br><span class="line">    <span class="keyword">if</span> (instance != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VM.current();</span><br><span class="line">        <span class="keyword">if</span> (markSize == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果标头大小为8字节，获取标头信息并将其转换为二进制字符串</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">mark</span> <span class="operator">=</span> vm.getLong(instance, markOffset);</span><br><span class="line">            markStr = Long.toBinaryString(mark);</span><br><span class="line">            <span class="comment">// 解析标头，获取额外的信息</span></span><br><span class="line">            remind = parseMarkWord(mark);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (markSize == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果标头大小为4字节，获取标头信息并将其转换为二进制字符串</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mark</span> <span class="operator">=</span> vm.getInt(instance, markOffset);</span><br><span class="line">            markStr = Integer.toBinaryString(mark);</span><br><span class="line">            <span class="comment">// 解析标头，获取额外的信息</span></span><br><span class="line">            remind = parseMarkWord(mark);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 高位补0，确保二进制字符串长度为标头大小的倍数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= <span class="number">8</span> * markSize - markStr.length(); i++) &#123;</span><br><span class="line">        sb.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将标头的二进制字符串添加到输出中</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= <span class="number">8</span> * markSize; i++) &#123;</span><br><span class="line">        sb.append(markStr.charAt(i - (<span class="number">8</span> * markSize - markStr.length()) - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加解析后的标头信息</span></span><br><span class="line">    sb.append(remind);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回包含标头信息的字符串</span></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外我还写了另外的一个简约版本,  只会输出MarkWord 头中的最后三位，也就是锁和锁的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写toPrintable方法，只输出Mark word二进制形式 Opt优化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toPrintableSimpleSimplicity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> toPrintableSimpleSimplicity(classData.instance());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写toPrintable方法，只输出Mark word二进制形式 Opt优化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * https://serms.top</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toPrintableSimpleSimplicity</span><span class="params">(Object instance)</span> &#123;</span><br><span class="line">    <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(sw);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (instance != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VM.current();</span><br><span class="line">        <span class="type">long</span> <span class="variable">markWord</span> <span class="operator">=</span> vm.getLong(instance, <span class="number">0</span>); <span class="comment">// Assuming the Mark Word is a long (64 bits)</span></span><br><span class="line"></span><br><span class="line">        pw.println(<span class="string">&quot;Mark Word Simplicity (binary):&quot;</span>);</span><br><span class="line">        pw.println(toBinary(markWord));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pw.println(<span class="string">&quot;Mark Word: N/A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pw.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sw.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">toBinary</span><span class="params">(<span class="type">long</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Long.toBinaryString(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重构Jar包"><a href="#重构Jar包" class="headerlink" title="重构Jar包"></a>重构Jar包</h2><ol><li><p>修改完代码之后<code>Ctrl+ F9</code>编译，编译之后找到原来的Jar包打开</p><p><img src="https://bu.dusays.com/2023/10/31/6540d8a476001.png" alt="image-20231031183619237"></p></li><li><p>找到<code>ClassLayout.class</code>文件删除</p><p><img src="https://bu.dusays.com/2023/10/31/6540d8e9e9964.png" alt="image-20231031183728890"></p></li><li><p>将修改好的<code>ClassLayout.class</code>文件复制进去</p><p><img src="https://bu.dusays.com/2023/10/31/6540d94b93bfa.png" alt="image-20231031183906267"></p></li></ol><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>调用新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, InterruptedException, IllegalAccessException &#123;</span><br><span class="line">    test1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    out.println(ClassLayout.parseInstance(a).toPrintableSimpleSerMs());</span><br><span class="line">    <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">        out.println(ClassLayout.parseInstance(a).toPrintableSimpleSerMs());</span><br><span class="line">    &#125;</span><br><span class="line">    out.println(ClassLayout.parseInstance(a).toPrintableSimpleSerMs());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 (biasable; age: 0)</span><br><span class="line">00000000 00000000 00000001 11111011 01001010 10110100 01100000 00000101 (biased: 0x000000007ed2ad18; epoch: 0; age: 0)</span><br><span class="line">00000000 00000000 00000001 11111011 01001010 10110100 01100000 00000101 (biased: 0x000000007ed2ad18; epoch: 0; age: 0)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/10/31/6540ddc3f0580.png" alt="image-20231031185810713"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>上述说到我写了两个方法，一个是打印得比较全得，一个是简约的，这里做个对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, InterruptedException &#123;</span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    out.println(<span class="string">&quot;befor hash&quot;</span>);</span><br><span class="line">    <span class="comment">//没有计算HASHCODE之前的对象头</span></span><br><span class="line">    out.println(ClassLayout.parseInstance(a).toPrintableSimpleSimplicity());</span><br><span class="line">    out.println(ClassLayout.parseInstance(a).toPrintableSimpleSerMs());</span><br><span class="line">    <span class="comment">//JVM 计算的hashcode</span></span><br><span class="line">    out.println(<span class="string">&quot;jvm‐‐‐‐‐‐‐‐‐‐‐‐0x&quot;</span> + Integer.toHexString(a.hashCode()));</span><br><span class="line">    <span class="comment">//当计算完hashcode之后，我们可以查看对象头的信息变化</span></span><br><span class="line">    out.println(<span class="string">&quot;after hash&quot;</span>);</span><br><span class="line">    out.println(ClassLayout.parseInstance(a).toPrintableSimpleSimplicity());</span><br><span class="line">    out.println(ClassLayout.parseInstance(a).toPrintableSimpleSerMs());</span><br><span class="line">    <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">        out.println(<span class="string">&quot;对象a 已加锁 ---------&quot;</span>);</span><br><span class="line">        out.println(ClassLayout.parseInstance(a).toPrintableSimpleSimplicity());</span><br><span class="line">        out.println(ClassLayout.parseInstance(a).toPrintableSimpleSerMs());</span><br><span class="line">    &#125;</span><br><span class="line">    out.println(<span class="string">&quot;对象a 解锁 ---------&quot;</span>);</span><br><span class="line">    out.println(ClassLayout.parseInstance(a).toPrintableSimpleSimplicity());</span><br><span class="line">    out.println(ClassLayout.parseInstance(a).toPrintableSimpleSerMs());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果：</p><ul><li>toPrintableSimpleSimplicity()方法打印在上</li><li>toPrintableSimpleSerMs()方法打印在下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">befor <span class="built_in">hash</span></span><br><span class="line">Mark Word Simplicity (binary):</span><br><span class="line">101  </span><br><span class="line"></span><br><span class="line">00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 (biasable; age: 0)</span><br><span class="line">jvm‐‐‐‐‐‐‐‐‐‐‐‐0x573f2bb1</span><br><span class="line">after <span class="built_in">hash</span></span><br><span class="line">Mark Word Simplicity (binary):</span><br><span class="line">101011100111111001010111011000100000001</span><br><span class="line"></span><br><span class="line">00000000 00000000 00000000 01010111 00111111 00101011 10110001 00000001 (<span class="built_in">hash</span>: 0x573f2bb1; age: 0)</span><br><span class="line">对象a 已加锁 ---------</span><br><span class="line">Mark Word Simplicity (binary):</span><br><span class="line">1101110100101111111111111001000111000</span><br><span class="line"></span><br><span class="line">00000000 00000000 00000000 00011011 10100101 11111111 11110010 00111000 (thin lock: 0x0000001ba5fff238)</span><br><span class="line">对象a 解锁 ---------</span><br><span class="line">Mark Word Simplicity (binary):</span><br><span class="line">101011100111111001010111011000100000001</span><br><span class="line"></span><br><span class="line">00000000 00000000 00000000 01010111 00111111 00101011 10110001 00000001 (<span class="built_in">hash</span>: 0x573f2bb1; age: 0)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/10/31/6540e2e241c7b.png" alt="image-20231031192001040"></p><h2 id="导出Jar包"><a href="#导出Jar包" class="headerlink" title="导出Jar包"></a>导出Jar包</h2><p>Maven直接Install然后引入到项目中即可</p><p><img src="https://bu.dusays.com/2023/10/31/6540e3894cd09.png" alt="image-20231031192247760"></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized原理</title>
      <link href="/posts/edf9312a.html"/>
      <url>/posts/edf9312a.html</url>
      
        <content type="html"><![CDATA[<h2 id="Monitor-概念回顾"><a href="#Monitor-概念回顾" class="headerlink" title="Monitor 概念回顾"></a>Monitor 概念回顾</h2><h3 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h3><p><strong>以 32 位虚拟机为例</strong></p><p>名词解释：</p><ol><li><strong>Object Header (64 bits)</strong>: 它包含了<strong>对象的元信息</strong>以及用于垃圾回收和同步的数据。</li><li><strong>Mark Word (32 bits）</strong>: 这个部分通常<strong>包含用于垃圾回收和同步的标记信息</strong>。标记字包含了<strong>对象的哈希码</strong>、<strong>锁定状态</strong>、<strong>垃圾回收标记</strong>等信息。</li><li><strong>Klass Word (32 bits) </strong>: 这个部分包含指向对象的<strong>类元数据的指针</strong>，它描述了对象<strong>属于哪个类</strong>，包括类的<strong>方法</strong>、字段等信息。</li></ol><h4 id="普通对象"><a href="#普通对象" class="headerlink" title="普通对象"></a>普通对象</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="params">--------------------------------------------------------------</span>| </span><br><span class="line">|<span class="params">                     Object Header (64 bits)                  </span>| </span><br><span class="line">|<span class="params">------------------------------------</span>|-------------------------|<span class="params"> </span></span><br><span class="line"><span class="params"></span>|        <span class="title class_">Mark</span> <span class="title class_">Word</span> (<span class="number">32</span> bits)         |<span class="params">    Klass Word (32 bits) </span>| </span><br><span class="line">|<span class="params">------------------------------------</span>|-------------------------|<span class="params"></span></span><br></pre></td></tr></table></figure><h4 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="params">---------------------------------------------------------------------------------</span>|</span><br><span class="line">|<span class="params">                                 Object Header (96 bits)                         </span>|</span><br><span class="line">|<span class="params">--------------------------------</span>|-----------------------|<span class="params">------------------------</span>|</span><br><span class="line">|<span class="params">        Mark Word(32bits)       </span>|    <span class="title class_">Klass</span> <span class="title class_">Word</span>(32bits) |<span class="params">  array length(32bits)  </span>|</span><br><span class="line">|<span class="params">--------------------------------</span>|-----------------------|<span class="params">------------------------</span>|</span><br></pre></td></tr></table></figure><h4 id="其中-Mark-Word-结构为"><a href="#其中-Mark-Word-结构为" class="headerlink" title="其中 Mark Word 结构为"></a>其中 Mark Word 结构为</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">|<span class="params">-------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|                  <span class="title class_">Mark</span> <span class="title class_">Word</span> (<span class="number">32</span> bits)                  |<span class="params">       State        </span>| </span><br><span class="line">|<span class="params">-------------------------------------------------------</span>|--------------------|<span class="params"> </span></span><br><span class="line"><span class="params"></span>|  <span class="symbol">hashcode:</span><span class="number">25</span>         |<span class="params"> age:4 </span>| <span class="symbol">biased_lock:</span><span class="number">0</span> |<span class="params"> 01     </span>|       <span class="title class_">Normal</span>       |<span class="params"> </span></span><br><span class="line"><span class="params"></span>|-------------------------------------------------------|<span class="params">--------------------</span>|</span><br><span class="line">|<span class="params">  thread:23 </span>| <span class="symbol">epoch:</span><span class="number">2</span> |<span class="params"> age:4 </span>| <span class="symbol">biased_lock:</span><span class="number">1</span> |<span class="params"> 01     </span>|       <span class="title class_">Biased</span>       |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-------------------------------------------------------|<span class="params">--------------------</span>| </span><br><span class="line">|<span class="params">               ptr_to_lock_record:30          </span>| <span class="number">00</span>     |<span class="params"> Lightweight Locked </span>|</span><br><span class="line">|<span class="params">-------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|               <span class="symbol">ptr_to_heavyweight_monitor:</span><span class="number">30</span>  |<span class="params"> 10     </span>| <span class="title class_">Heavyweight</span> <span class="title class_">Locked</span> |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-------------------------------------------------------|<span class="params">--------------------</span>|</span><br><span class="line">|<span class="params">                                              </span>| <span class="number">11</span>     |<span class="params">    Marked <span class="keyword">for</span> GC   </span>|</span><br><span class="line">|<span class="params">-------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params">        </span></span><br><span class="line"><span class="params">hashcode：这部分通常用于存储对象的哈希码（HashCode），它是一个用于快速查找对象的值。哈希码在对象创建时生成，然后在对象的生命周期中不会更改。</span></span><br><span class="line"><span class="params">age (4 bits): 这部分用于表示对象的年龄，通常在分代垃圾回收中使用。年龄是一个对象存活的时间的度量。</span></span><br><span class="line"><span class="params">biased_lock (1 bit): 这个位用于标识对象是否启用了偏向锁。当偏向锁被启用时，该位为1；否则，为0。</span></span><br><span class="line"><span class="params">01 State: 这个状态表示对象处于正常状态，未被锁定或标记。</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">thread (23 bits): 这一部分用于存储拥有锁的线程的ID。在偏向锁状态下，它表示偏向锁的线程ID。</span></span><br><span class="line"><span class="params">epoch (2 bits): 这一部分用于存储偏向时间戳（bias timestamp）。它用于检测是否应取消偏向锁。在不同时间偏向锁的情况下，该值可能不同。</span></span><br><span class="line"><span class="params">age (4 bits): 这一部分用于表示对象的年龄，通常在分代垃圾回收中使用。年龄是一个对象存活的时间的度量。</span></span><br><span class="line"><span class="params">biased_lock (1 bit): 这个位用于标识对象是否启用了偏向锁。当偏向锁被启用时，该位为1。</span></span><br><span class="line"><span class="params">01 State: 这个状态表示对象处于偏向锁状态，已经偏向某个线程。</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">ptr_to_lock_record (30 bits): 这一部分用于指向偏向锁的记录（bias lock record），该记录包含了关于偏向锁的详细信息。这在取消偏向锁时使用。</span></span><br><span class="line"><span class="params">00 State: 这个状态表示对象处于轻量级锁状态。</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">ptr_to_heavyweight_monitor (30 bits): 这一部分用于指向重量级锁的监视器对象。重量级锁通常涉及多个线程之间的同步。</span></span><br><span class="line"><span class="params">10 State: 这个状态表示对象处于重量级锁状态。</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">11 State: 这个状态表示对象被标记为垃圾回收（GC Marked），通常在垃圾回收期间使用。</span></span><br><span class="line"><span class="params"></span></span><br></pre></td></tr></table></figure><h4 id="64位虚拟机-Mark-Word"><a href="#64位虚拟机-Mark-Word" class="headerlink" title="64位虚拟机 Mark Word"></a>64位虚拟机 Mark Word</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|<span class="params">--------------------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|                        <span class="title class_">Mark</span> <span class="title class_">Word</span> (<span class="number">64</span> bits)                         |<span class="params">       State        </span>|</span><br><span class="line">|<span class="params">--------------------------------------------------------------------</span>|--------------------|<span class="params"> </span></span><br><span class="line"><span class="params"></span>| <span class="symbol">unused:</span><span class="number">25</span> |<span class="params"> hashcode:31 </span>| <span class="symbol">unused:</span><span class="number">1</span> |<span class="params"> age:4 </span>| <span class="symbol">biased_lock:</span><span class="number">0</span> |<span class="params"> 01    </span>|    <span class="title class_">Normal</span> 无锁状态   |<span class="params"> </span></span><br><span class="line"><span class="params"></span>|--------------------------------------------------------------------|<span class="params">--------------------</span>| </span><br><span class="line">|<span class="params"> thread:54 </span>| <span class="symbol">epoch:</span><span class="number">2</span>     |<span class="params"> unused:1 </span>| <span class="symbol">age:</span><span class="number">4</span> |<span class="params"> biased_lock:1 </span>| <span class="number">01</span>    |<span class="params"> Biased 偏向锁       </span>| </span><br><span class="line">|<span class="params">--------------------------------------------------------------------</span>|--------------------|<span class="params"> </span></span><br><span class="line"><span class="params"></span>|             <span class="symbol">ptr_to_lock_record:</span><span class="number">62</span>                          |<span class="params"> 00    </span>| <span class="title class_">Lightweight</span> <span class="title class_">Locked</span>  轻量级锁|<span class="params"> </span></span><br><span class="line"><span class="params"></span>|--------------------------------------------------------------------|<span class="params">--------------------</span>| </span><br><span class="line">|<span class="params">             ptr_to_heavyweight_monitor:62                  </span>| <span class="number">10</span>    |<span class="params"> Heavyweight Locked 重量级锁</span>| </span><br><span class="line">|<span class="params">--------------------------------------------------------------------</span>|--------------------|<span class="params"> </span></span><br><span class="line"><span class="params"></span>|                                                            |<span class="params"> 11    </span>|    <span class="title class_">Marked</span> <span class="keyword">for</span> <span class="variable constant_">GC</span>   |<span class="params"> </span></span><br><span class="line"><span class="params"></span>|--------------------------------------------------------------------|<span class="params">--------------------</span>|</span><br></pre></td></tr></table></figure><h2 id="synchronized加锁过程"><a href="#synchronized加锁过程" class="headerlink" title="synchronized加锁过程"></a>synchronized加锁过程</h2><ol><li><strong>无锁状态（Unlocked）</strong>：一开始，对象处于无锁状态。这意味着没有线程持有该对象的锁。</li><li><strong>偏向锁检测（Biased Lock Check）</strong>：在进入同步块之前，JVM 会尝试检测对象是否已经偏向某个线程。偏向锁是一种优化，旨在减少不必要的竞争。如果对象已经被偏向某个线程，且当前线程是偏向线程，那么它可以直接进入同步块，跳过后续步骤。</li><li><strong>自旋锁（Spin Locking）</strong>：如果对象不是偏向任何线程，或者当前线程不是偏向线程，JVM 会尝试使用自旋锁来避免进入重量级锁。自旋锁是一种快速的锁获取尝试，线程会短暂自旋等待锁的释放，而不进入阻塞状态。</li><li><strong>轻量级锁尝试（Lightweight Lock Attempt）</strong>：如果自旋锁不成功，当前线程将尝试使用轻量级锁。此时，JVM会尝试在对象头中的 <code>Mark Word</code> 中设置标志来表示当前线程持有该对象的锁。</li><li><strong>竞争（Contention）</strong>：如果轻量级锁尝试失败，表示可能有其他线程也在竞争同一个锁，进入竞争状态。这时，JVM 将使用适当的机制来处理竞争，通常会升级锁为重量级锁。</li><li><strong>重量级锁（Heavyweight Lock）</strong>：如果竞争仍然存在，JVM 将升级锁为重量级锁。重量级锁使用操作系统的原生同步机制，例如互斥量，来确保同一时刻只有一个线程可以进入同步块。其他线程将被阻塞，直到持有锁的线程释放它。</li><li><strong>执行同步块（Executing Synchronized Block）</strong>：一旦线程成功获取锁，它可以进入同步块内执行相应的代码。只有一个线程可以同时执行同步块内的代码。</li><li><strong>释放锁（Release Lock）</strong>：当线程退出同步块或抛出异常时，它会释放锁，允许其他线程竞争该锁。</li></ol><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但<strong>加锁的时间是错开的（也就是没有竞争）</strong>，那么可以 使用<strong>轻量级锁来优化</strong>。</p><p>轻量级锁对使用者是透明的，即语法仍然是 synchronized</p><p>假设有两个方法同步块，利用同一个对象加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 A</span></span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的 Mark Word</li></ul><p><img src="https://bu.dusays.com/2023/10/31/65407ab1aaa5b.png" alt=""></p><ul><li>让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存 入锁记录</li></ul><p><img src="https://bu.dusays.com/2023/10/31/65407aec0b215.png" alt="image-20231031115626931"></p><ul><li><p>如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下</p><p><img src="https://bu.dusays.com/2023/10/31/65409fcebb4e5.png" alt="image-20231031143349476"></p></li><li><p>如果 cas 失败，有两种情况 </p><ul><li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程 </li><li>如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数</li></ul></li></ul><p><img src="https://bu.dusays.com/2023/10/31/6540a0592d705.png" alt="image-20231031143607867"></p><ul><li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重 入计数减一</p><p><img src="https://bu.dusays.com/2023/10/31/6540a082d7bc0.png" alt="image-20231031143649632"></p></li><li><p>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象 头 </p><ul><li>成功，则解锁成功 </li><li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li></ul></li></ul><h2 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h2><p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁</li></ul><p><img src="https://bu.dusays.com/2023/10/31/6540a0face4e1.png" alt="image-20231031143825427"></p><ul><li><p>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程     </p><ul><li>即为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址 </li><li>然后自己进入 Monitor 的 EntryList BLOCKED</li></ul></li><li><p>当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁 流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程</p></li></ul><h2 id="自旋优化"><a href="#自旋优化" class="headerlink" title="自旋优化"></a>自旋优化</h2><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步 块，释放了锁），这时当前线程就可以避免阻塞。</p><p> 自旋重试成功的情况</p><p><img src="https://bu.dusays.com/2023/10/31/6540a1666e84d.png" alt="image-20231031144036930"></p><p>自旋重试失败的情况</p><p><img src="https://bu.dusays.com/2023/10/31/6540a190d130b.png" alt="image-20231031144119594"></p><ul><li>自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。</li><li>在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。 </li><li>Java 7 之后不能控制是否开启自旋功能,由操作系统底层控制</li></ul><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。 </p><p>Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现 这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。</p><p>以后只要不发生竞争，这个对象就归该线程所有 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 A</span></span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 B</span></span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 C</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/10/31/6540a21006e00.png" alt="image-20231031144326659"></p><p><img src="https://bu.dusays.com/2023/10/31/6540a2172cd60.png" alt="image-20231031144334098"></p><h3 id="偏向状态"><a href="#偏向状态" class="headerlink" title="偏向状态"></a>偏向状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|--------------------------------------------------------------------|--------------------|</span><br><span class="line">|                        Mark <span class="title function_">Word</span> <span class="params">(<span class="number">64</span> bits)</span>                         |       State        |</span><br><span class="line">|--------------------------------------------------------------------|--------------------| </span><br><span class="line">| unused:<span class="number">25</span> | hashcode:<span class="number">31</span> | unused:<span class="number">1</span> | age:<span class="number">4</span> | biased_lock:<span class="number">0</span> | <span class="number">01</span>    |    Normal          | </span><br><span class="line">|--------------------------------------------------------------------|--------------------| </span><br><span class="line">| thread:<span class="number">54</span> | epoch:<span class="number">2</span>     | unused:<span class="number">1</span> | age:<span class="number">4</span> | biased_lock:<span class="number">1</span> | <span class="number">01</span>    | Biased 偏向锁       | </span><br><span class="line">|--------------------------------------------------------------------|--------------------| </span><br><span class="line">|             ptr_to_lock_record:<span class="number">62</span>                          | <span class="number">00</span>    | Lightweight Locked | </span><br><span class="line">|--------------------------------------------------------------------|--------------------| </span><br><span class="line">|             ptr_to_heavyweight_monitor:<span class="number">62</span>                  | <span class="number">10</span>    | Heavyweight Locked | </span><br><span class="line">|--------------------------------------------------------------------|--------------------| </span><br><span class="line">|                                                            | <span class="number">11</span>    |    Marked <span class="keyword">for</span> GC   | </span><br><span class="line">|--------------------------------------------------------------------|--------------------|</span><br></pre></td></tr></table></figure><p>一个对象创建时： </p><ul><li>如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的 thread、epoch、age 都为 0 </li><li>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 <code>-XX:BiasedLockingStartupDelay=0</code> 来禁用延迟 </li><li>如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、 age 都为 0，第一次用到 hashcode 时才会赋值</li></ul><h3 id="测试偏向锁延迟特性"><a href="#测试偏向锁延迟特性" class="headerlink" title="测试偏向锁延迟特性"></a>测试偏向锁延迟特性</h3><p>默认<code>synchronized</code> 加锁是先加的偏向锁</p><p>首先配置: <code>-XX:BiasedLockingStartupDelay=0</code> 禁用延迟,如果不禁用,请用sleep方法让主线程睡不低于4s,因为这是偏向锁的特性,延迟加载</p><p><img src="https://bu.dusays.com/2023/11/01/6541b37b727fc.png" alt="image-20231101101002777"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    <span class="type">ClassLayout</span> <span class="variable">classLayout</span> <span class="operator">=</span> ClassLayout.parseInstance(a);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;加锁前:&#123;&#125;&quot;</span>, classLayout.toPrintableSimpleSerMs());</span><br><span class="line">        <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;加锁之后：&#123;&#125;&quot;</span>, classLayout.toPrintableSimpleSerMs());</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;解锁后:&#123;&#125;&quot;</span>, classLayout.toPrintableSimpleSerMs());</span><br><span class="line">    &#125;, <span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印结果"><a href="#打印结果" class="headerlink" title="打印结果"></a>打印结果</h4><ul><li>第一次打印锁状态为 <code>101</code> 为偏向锁状态</li><li>第二次对A对象进行加锁操作,最后三位可以看到还是<code>101</code>依然是偏向锁,不同的是后面的54为多了T1线程的ThreadId</li><li>第三次解锁之后打印的结果跟第二次一样,这也就是偏向锁的思想,偏向锁的对象解锁后，线程 id 仍存储于对象头中</li></ul><p><img src="https://bu.dusays.com/2023/11/01/6541b8a29b6fb.png" alt="image-20231101103202099"></p><p>上述的<code>toPrintableSimpleSerMs()</code>方法是基于Jol-core Jar包进行的扩展方法,详细可以看这篇文章</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.serms.top/post/8388fdb4/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">https://bu.dusays.com/2023/10/11/65269ea6226c8.png </div>            <div class="tag-link-sitename"> Java扩展第三方Jar </div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="测试禁用偏向锁"><a href="#测试禁用偏向锁" class="headerlink" title="测试禁用偏向锁"></a>测试禁用偏向锁</h3><p>在运行配置中设置<code>VM Options</code> <code>-XX:-UseBiasedLocking</code></p><p><img src="https://bu.dusays.com/2023/11/01/6541b9d8787ae.png" alt="image-20231101103711769"></p><h4 id="打印结果-1"><a href="#打印结果-1" class="headerlink" title="打印结果"></a>打印结果</h4><ul><li>因禁用了偏向锁,所以第一次打印的最后三位为<code>001</code>处于无锁的状态</li><li>第二次是加锁,最后三位为<code>000</code>偏向锁被禁用了,只能升级为轻量级锁,前面54为依然为<code>ThreadId</code></li><li>第三次解锁之后,回到无锁状态<code>001</code></li></ul><p><img src="https://bu.dusays.com/2023/11/01/6541b9fb30913.png" alt="image-20231101103746789"></p><h3 id="测试HashCode"><a href="#测试HashCode" class="headerlink" title="测试HashCode"></a>测试HashCode</h3><p>运行配置改成取消延迟加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    <span class="type">ClassLayout</span> <span class="variable">classLayout</span> <span class="operator">=</span> ClassLayout.parseInstance(a);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;加锁前:&#123;&#125;&quot;</span>, classLayout.toPrintableSimpleSerMs());</span><br><span class="line">        a.hashCode();</span><br><span class="line">        <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;加锁之后：&#123;&#125;&quot;</span>, classLayout.toPrintableSimpleSerMs());</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;解锁后:&#123;&#125;&quot;</span>, classLayout.toPrintableSimpleSerMs());</span><br><span class="line">    &#125;, <span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印结果-2"><a href="#打印结果-2" class="headerlink" title="打印结果"></a>打印结果</h4><ul><li>第一次后三位为<code>101</code>,偏向锁状态</li><li>第二次加锁后升级为<code>轻量级锁</code>,后面的 62位记录的是偏向锁的详细信息,在取消加锁的时候会用到</li><li>第三次取消加锁之后,后三位为<code>001</code>无锁状态,前面的为HashCode值</li></ul><p><img src="https://bu.dusays.com/2023/11/01/6541bb9759168.png" alt="image-20231101104438972"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码解析 </tag>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode209:MinSubArrayLen</title>
      <link href="/posts/cbdb7b6f.html"/>
      <url>/posts/cbdb7b6f.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p><img src="https://bu.dusays.com/2023/10/25/6538926ef38e9.webp" alt=""><br><span class='p center logo large'>坚持就是胜利</span></p></div><h2 id="LeetCode地址"><a href="#LeetCode地址" class="headerlink" title="LeetCode地址"></a>LeetCode地址</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://leetcode.cn/problems/minimum-size-subarray-sum/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://bu.dusays.com/2023/10/25/653891265eac8.webp)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">LeetCode </div>            <div class="tag-link-sitename">209</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="滑动窗口解题思路"><a href="#滑动窗口解题思路" class="headerlink" title="滑动窗口解题思路"></a>滑动窗口解题思路</h2><h3 id="初始化变量和窗口"><a href="#初始化变量和窗口" class="headerlink" title="初始化变量和窗口"></a>初始化变量和窗口</h3><ul><li>定义两个指针 left 和 right，分别表示窗口的左右边界，初始化为0。 </li><li>定义一个变量 sum 用于存储窗口内元素的和，初始值为0。 </li><li>定义一个变量 minlength 用于记录符合条件的最短子数组的长度，初始值为0。</li></ul><h3 id="移动右边界，扩大窗口"><a href="#移动右边界，扩大窗口" class="headerlink" title="移动右边界，扩大窗口"></a>移动右边界，扩大窗口</h3><ul><li>在一个 while 循环中，不断将 nums[right] 加到 sum 中，然后将右指针 right 向右移动，扩大窗口。<h3 id="移动左边界，缩小窗口"><a href="#移动左边界，缩小窗口" class="headerlink" title="移动左边界，缩小窗口"></a>移动左边界，缩小窗口</h3></li><li>如果当前窗口的和大于等于目标值 target，则在另一个内部的 while 循环中，不断将 nums[left] 从 sum 中减去，并将左指针 left 向右移动，缩小窗口，直到窗口内的和小于目标值。 </li><li>在这个过程中，不断更新 minlength，保持其为符合条件的最短子数组的长度。<h3 id="循环直到右指针到达数组末尾"><a href="#循环直到右指针到达数组末尾" class="headerlink" title="循环直到右指针到达数组末尾"></a>循环直到右指针到达数组末尾</h3></li><li>不断执行步骤2和步骤3，直到右指针 right 到达数组的末尾。<h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3></li><li>返回 minlength，即为符合条件的最短子数组的长度。</li></ul><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 左指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 右指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 子数组和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minlength</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 最小子数组长度</span></span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.length) &#123;</span><br><span class="line">            sum += nums[right]; <span class="comment">// 添加当前元素到和</span></span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123; <span class="comment">// 当和大于等于目标值时</span></span><br><span class="line">                <span class="keyword">if</span> (right - left + <span class="number">1</span> &lt; minlength || minlength == <span class="number">0</span>) &#123; <span class="comment">// 如果当前子数组长度小于之前的子数组长度</span></span><br><span class="line">                    minlength = right - left + <span class="number">1</span>; <span class="comment">// 更新最小子数组长度</span></span><br><span class="line">                &#125;</span><br><span class="line">                sum -= nums[left]; <span class="comment">// 从左边移除元素，减小和</span></span><br><span class="line">                left++; <span class="comment">// 左指针向右移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            right++; <span class="comment">// 右指针向右移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minlength; <span class="comment">// 返回最小子数组长度</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="双指针解题思路"><a href="#双指针解题思路" class="headerlink" title="双指针解题思路"></a>双指针解题思路</h2><h3 id="初始化变量和窗口-1"><a href="#初始化变量和窗口-1" class="headerlink" title="初始化变量和窗口"></a>初始化变量和窗口</h3><ul><li>size 表示数组的长度，ans 用于记录符合条件的最短子数组的长度，初始化为 size + 1，确保初始值大于任何可能的子数组长度。 </li><li>l 表示窗口的左边界，初始化为0。 </li><li>sum 表示窗口内元素的和，初始化为0。<h3 id="移动右边界，扩大窗口-1"><a href="#移动右边界，扩大窗口-1" class="headerlink" title="移动右边界，扩大窗口"></a>移动右边界，扩大窗口</h3></li><li>使用一个 for 循环，遍历数组，移动右指针 r，将 nums[r] 加到 sum 中，扩大窗口。<h3 id="移动左边界，缩小窗口-1"><a href="#移动左边界，缩小窗口-1" class="headerlink" title="移动左边界，缩小窗口"></a>移动左边界，缩小窗口</h3></li><li>在一个内部的 while 循环中，如果当前窗口的和大于等于目标值 target，则计算当前子数组的长度 r - l + 1，并更新 ans 为较小的值，即 Math.min(ans, r - l + 1)。 </li><li>然后将窗口的左边界向右移动，即 sum -= nums[l++]，缩小窗口。<h3 id="循环直到右指针到达数组末尾-1"><a href="#循环直到右指针到达数组末尾-1" class="headerlink" title="循环直到右指针到达数组末尾"></a>循环直到右指针到达数组末尾</h3></li><li>不断执行步骤2和步骤3，直到右指针 r 到达数组的末尾。<h3 id="返回结果-1"><a href="#返回结果-1" class="headerlink" title="返回结果"></a>返回结果</h3></li><li>返回 ans，即为符合条件的最短子数组的长度。如果 ans 的值没有被更新，说明没有符合条件的子数组，返回0。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 双指针</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minSubArrayLen03</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>, min = Integer.MAX_VALUE, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; nums.length) &#123;</span><br><span class="line">        sum += nums[right];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">            min = Math.min(min, right - left + <span class="number">1</span>);</span><br><span class="line">            sum -= nums[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min &lt;= nums.length ? min : <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><span class='p center logo large'>如果您还有更好的解题思路请在下方评论区交流</span> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无需VIP，一键转存海量文件</title>
      <link href="/posts/4180f06.html"/>
      <url>/posts/4180f06.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在网上找到一批好的学习资料，想保存到网盘，奈何贫穷的我没有雄厚的财力无法支撑我去开网盘的VIP，不知道大家是否也有过这头疼的问题</p><p>因此给大家安利一波一个无需VIP，一键转存海量文件的工具，让你可以免费转存任意文件到百度网盘</p><h2 id="百度开发者"><a href="#百度开发者" class="headerlink" title="百度开发者"></a>百度开发者</h2><p>百度开放平台进行注册</p><p><img src="https://bu.dusays.com/2023/10/27/653b7a0a27468.png" alt=""></p><ol><li><p>注册之后点击<a href="https://pan.baidu.com/union/console/applist">控制台</a>创建应用,然后你就会得到如下信息</p><p><img src="https://bu.dusays.com/2023/10/27/653b7a92e9897.png" alt=""></p></li><li><p>进入到<a href="https://pan.baidu.com/union/doc/al0rwqzzl">百度开放平台</a>,找到<code>接入授权</code>下的<code>授权码模式授权</code>,当然你也可以不用进,因为接口在下方我以贴出来了</p><p><img src="https://bu.dusays.com/2023/10/27/653b7b3569154.png" alt=""></p></li></ol><h2 id="发起授权码Code请求"><a href="#发起授权码Code请求" class="headerlink" title="发起授权码Code请求"></a>发起授权码Code请求</h2><p>发起授权码 Code 请求依赖于以下链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET http://openapi.baidu.com/oauth/2.0/authorize?</span><br><span class="line">response_type=code&amp;</span><br><span class="line">client_id=您应用的AppKey&amp;</span><br><span class="line">redirect_uri=您应用的授权回调地址&amp;</span><br><span class="line">scope=basic,netdisk&amp;</span><br><span class="line">device_id=您应用的AppID</span><br><span class="line"></span><br><span class="line">**注意**:这里的回调地址如果你没有就直接写`redirect_uri=oob`</span><br><span class="line">以上链接示例中参数仅给出了必选参数，其中device_id为硬件应用下的必选参数。</span><br><span class="line">关于应用的相关信息，您可在控制台，点进去您对应的应用，查看应用详情获得。</span><br></pre></td></tr></table></figure><p>上述用到的<code>AppKey</code>、<code>AppId</code>可在控制台中的<a href="https://pan.baidu.com/union/console/applist">应用</a>里面查看,<a href="https://developer.baidu.com/wiki/index.php?title=docs/oauth/redirect">回调地址</a>请查看官方文档说明进行配置</p><p><strong>注意</strong>:这里的回调地址如果你没有就直接写<code>redirect_uri=oob</code></p><p><img src="https://bu.dusays.com/2023/10/27/653b7c467ff38.png" alt=""></p><p>直接将填写好的api接口放到<code>浏览器</code>中请求，浏览器默认就是<code>GET</code>请求,请求之后你会得到一个<strong>授权码</strong></p><p><img src="https://bu.dusays.com/2023/10/27/653b7c8d6faf9.png" alt="image-20231027170203296"></p><h2 id="换取AccessToken凭证"><a href="#换取AccessToken凭证" class="headerlink" title="换取AccessToken凭证"></a>换取AccessToken凭证</h2><p>拿到上面请求到的授权码接着调用这个接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET https://openapi.baidu.com/oauth/2.0/token?</span><br><span class="line">grant_type=authorization_code&amp;</span><br><span class="line">code=用户授权码 Code 值&amp;</span><br><span class="line">client_id=您应用的AppKey&amp;</span><br><span class="line">client_secret=您应用的SecretKey&amp;</span><br><span class="line">redirect_uri=您应用设置的授权回调地址</span><br><span class="line"></span><br><span class="line">**注意**:这里的回调地址如果你没有就直接写`redirect_uri=oob`</span><br><span class="line">以上链接示例中参数仅给出了必选参数。</span><br><span class="line">关于应用的相关信息，您可在控制台，点进去您对应的应用，查看应用详情获得。</span><br></pre></td></tr></table></figure><p>然后我们就会看到返回的结果当中有<code>access_token</code>了</p><p><img src="https://bu.dusays.com/2023/10/27/653b7d6d4a5c2.png" alt="image-20231027170547289"></p><h2 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h2><p>配置<a href="https://greasyfork.org/zh-CN/scripts/468633-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%A7%92%E4%BC%A0%E8%BD%AC%E5%AD%98%E5%8A%A9%E6%89%8B-%E6%94%AF%E6%8C%81pc%E5%8F%8A%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E6%B0%B8%E4%B9%85%E6%97%A0%E5%B9%BF%E5%91%8A%E7%BB%BF%E8%89%B2%E7%89%88">油猴插件脚本</a></p><p><img src="https://bu.dusays.com/2023/10/27/653b7e2e3e7b0.png" alt="image-20231027170859608"></p><p>还不知道油猴是什么的小伙伴可以,可以点击链接下载: <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">油猴下载</a>地址</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>勾选需要转存的文件,点击生成秒传</p><p><img src="https://bu.dusays.com/2023/10/27/653b7e8cc27ef.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 工具与软件 </category>
          
          <category> 实用插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 油猴插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程:共享模型之管程</title>
      <link href="/posts/784dacca.html"/>
      <url>/posts/784dacca.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是管程（Monitor）"><a href="#什么是管程（Monitor）" class="headerlink" title="什么是管程（Monitor）"></a>什么是管程（Monitor）</h2><p><strong>管程（Monitor）是一种并发编程的模型和技术，用于解决多线程之间的互斥访问和条件等待的问题</strong>。它是由荷兰计算机科学家 Edsger Dijkstra 在 1971 年提出的一种同步机制。</p><p>管程提供了一种方式让多个线程能够协调彼此的执行，确保在任意时刻只有一个线程可以访问共享资源，从而避免了线程间的竞争条件（Race Condition）和数据不一致的问题。</p><p>管程通常由以下几个要素组成：</p><p><strong>互斥锁（Mutex）</strong>：用于实现对共享资源的互斥访问，保证同一时刻只有一个线程可以进入管程进行操作。</p><p><strong>条件变量（Condition Variable）</strong>：用于实现线程间的条件等待和通知机制。线程可以在条件不满足的情况下等待，并在条件满足时被唤醒继续执行。</p><p><strong>入口队列（Entry Queue）</strong>：用于存放等待访问资源的线程队列。</p><p><strong>管程内部方法</strong>：包括对资源的操作和对条件变量的操作等。</p><p><strong>通过管程</strong>，可以将对共享资源的访问限制在管程的范围内，线程在进入管程之前需要获得管程的互斥锁，如果资源被占用，线程将进入入口队列等待；当某个线程完成对共享资源的操作后，会释放互斥锁并唤醒等待队列中的某个线程继续执行。</p><p>管程的主要优点是提供了一种高层次的抽象和封装，简化了多线程编程的复杂性，提供了一种结构化的方式来管理线程之间的同步和协作。它可以有效地避免死锁（Deadlock）和饥饿（Starvation）等并发编程中常见的问题。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>在多线程中有A、B两个线程同时需要修改某一个共享资源，线程A从内存中读取共享资源，但还未来得及提交修改，或者处于休眠状态；同时，线程B获取到同一个共享资源并进行了修改，然后将修改后的值放回内存中。接着，当线程A继续执行并将它的修改放回内存时，它会覆盖线程B之前的修改，从而导致最终的结果不一致</p><p>上述例子也就体现了，线程A和线程B同时竞争修改共享资源，其操作顺序可能会导致不一致的结果,因此我们可以采用同步机制，管程或锁机制来确保只有一个线程可以修改资源</p><h3 id="Java体现资源争抢"><a href="#Java体现资源争抢" class="headerlink" title="Java体现资源争抢"></a>Java体现资源争抢</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            counter--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的结果可能为负数、正数或0，因为Java中对静态变量的自增或自减操作并不是原子性操作</p><h2 id="临界区-Critical-Section"><a href="#临界区-Critical-Section" class="headerlink" title="临界区 Critical Section"></a>临界区 Critical Section</h2><ul><li>一个程序运行多个线程本身是没有问题的 </li><li>问题出在多个线程访问<strong>共享资源</strong> <ul><li>多个线程<strong>读</strong>共享资源其实也没有问题 </li><li>在多个线程对共享资源<strong>读写操作</strong>时发生指令交错，就会出现问题 </li></ul></li><li>一段代码块内如果存在对共享资源的多线程读写操作，称这段代码块为<strong>临界区</strong> 例如，下面代码中的临界区</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> </span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">&#123; </span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> </span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">&#123; </span><br><span class="line">    counter--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="竞态条件-Race-Condition"><a href="#竞态条件-Race-Condition" class="headerlink" title="竞态条件 Race Condition"></a>竞态条件 Race Condition</h2><p>多个线程在<strong>临界区内</strong>执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了竞态条件</p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>为了避免临界区的竞态条件发生，有多种手段可以达到目的。 </p><ul><li>阻塞式的解决方案：synchronized，Lock </li><li>非阻塞式的解决方案：原子变量</li></ul><p>synchronized 即俗称的【对象锁】，它采用互斥的方式让同一 时刻至多<strong>只有一个线程</strong>能持有【<strong>对象锁</strong>】，其它线程再想获取这个【<strong>对象锁</strong>】时就会<strong>阻塞住</strong>。这样就能保证拥有锁的线程可以安全的执行临界区内的代码，不用担心线程上下文切换(也就是线程切换)</p><blockquote><p><strong>注意</strong> </p><p>虽然 java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的： </p><ul><li>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码 </li><li>同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点</li></ul></blockquote><p>语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象) <span class="comment">// 线程1， 线程2(blocked)</span></span><br><span class="line">&#123;</span><br><span class="line">    临界区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2023/10/27 11 58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 1839928782@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Blog</span>: https://serms.top</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Test04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>  (Test04.class) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                    counter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Test04.class)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                    counter--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法上的-synchronized"><a href="#方法上的-synchronized" class="headerlink" title="方法上的 synchronized"></a>方法上的 synchronized</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Test.class) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Monitor概念"><a href="#Monitor概念" class="headerlink" title="Monitor概念"></a>Monitor概念</h2><h3 id="Java-对象头"><a href="#Java-对象头" class="headerlink" title="Java 对象头"></a>Java 对象头</h3><p>普通对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|--------------------------------------------------------------|</span><br><span class="line">| Object <span class="title function_">Header</span> <span class="params">(<span class="number">64</span> bits)</span> |</span><br><span class="line">|------------------------------------|-------------------------|</span><br><span class="line">| Mark <span class="title function_">Word</span> <span class="params">(<span class="number">32</span> bits)</span> | Klass <span class="title function_">Word</span> <span class="params">(<span class="number">32</span> bits)</span> |</span><br><span class="line">|------------------------------------|-------------------------|</span><br></pre></td></tr></table></figure><p>数组对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|---------------------------------------------------------------------------------|</span><br><span class="line">| Object <span class="title function_">Header</span> <span class="params">(<span class="number">96</span> bits)</span> |</span><br><span class="line">|--------------------------------|-----------------------|------------------------|</span><br><span class="line">| Mark <span class="title function_">Word</span><span class="params">(32bits)</span> | Klass <span class="title function_">Word</span><span class="params">(32bits)</span> | array <span class="title function_">length</span><span class="params">(32bits)</span> |</span><br><span class="line">|--------------------------------|-----------------------|------------------------|</span><br></pre></td></tr></table></figure><p>其中 Mark Word 结构为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">| Mark <span class="title function_">Word</span> <span class="params">(<span class="number">32</span> bits)</span>                                   |        State       |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">| hashcode:<span class="number">25</span> | age:<span class="number">4</span> | biased_lock:<span class="number">0</span> | <span class="number">01</span>              | Normal             |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">| thread:<span class="number">23</span> | epoch:<span class="number">2</span> | age:<span class="number">4</span> | biased_lock:<span class="number">1</span> | <span class="number">01</span>      | Biased             |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">| ptr_to_lock_record:<span class="number">30</span> | <span class="number">00</span>                            | Lightweight Locked |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">| ptr_to_heavyweight_monitor:<span class="number">30</span> | <span class="number">10</span>                    | Heavyweight Locked |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br><span class="line">| | <span class="number">11</span>                                                  | Marked <span class="keyword">for</span> GC       |</span><br><span class="line">|-------------------------------------------------------|--------------------|</span><br></pre></td></tr></table></figure><p>64位虚拟机Mark Word</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|--------------------------------------------------------------------|--------------------|</span><br><span class="line">| Mark Word (64 bits) | State |</span><br><span class="line">|--------------------------------------------------------------------|--------------------|</span><br><span class="line">| unused:25 | hashcode:31 | unused:1 | age:4 | biased_lock:0 | 01 | Normal|</span><br><span class="line">|--------------------------------------------------------------------|--------------------|</span><br><span class="line">| thread:54 | epoch:2 | unused:1 | age:4 | biased_lock:1 | 01 |Biased  |</span><br><span class="line">|--------------------------------------------------------------------|--------------------|</span><br><span class="line">| ptr_to_lock_record:62 | 00 | Lightweight Locked |</span><br><span class="line">|--------------------------------------------------------------------|--------------------|</span><br><span class="line">| ptr_to_heavyweight_monitor:62 | 10 | Heavyweight Locked |</span><br><span class="line">|--------------------------------------------------------------------|--------------------|</span><br><span class="line">| | 11 | Marked <span class="keyword">for</span> GC |</span><br><span class="line">|--------------------------------------------------------------------|--------------------|</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/10/27/653b6554cf311.png" alt=""></p><p>上图所示,其实Monitor就是充当一个锁,只要是同一个对象,都会跟同一个Monitor相关联</p><ul><li>Monitor 被翻译为监视器或管程 </li><li>每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的 Mark Word 中就被设置指向 Monitor 对象的指针</li></ul><p>Monitor 结构如下</p><p><img src="https://bu.dusays.com/2023/10/27/653b67b0c4372.png" alt=""></p><ul><li>刚开始 Monitor 中 Owner 为 null </li><li>当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一 个 Owner </li><li>在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入 EntryList BLOCKED </li><li>Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的 </li><li>图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲 wait-notify 时会分析</li></ul><blockquote><p><strong>注意</strong>：</p><ul><li>synchronized 必须是进入同一个对象的 monitor 才有上述的效果 </li><li>不加 synchronized 的对象不会关联监视器，不遵从以上规则</li></ul></blockquote><h3 id="Monitor原理之synchronize"><a href="#Monitor原理之synchronize" class="headerlink" title="Monitor原理之synchronize"></a>Monitor原理之synchronize</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">  <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">counter++; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//字节码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>; </span><br><span class="line">descriptor: ([Ljava/lang/String;)V </span><br><span class="line">flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">Code:</span><br><span class="line">     stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: getstatic #<span class="number">2</span> <span class="comment">// &lt;- lock引用 （synchronized开始）</span></span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         <span class="number">4</span>: astore_1 <span class="comment">// lock引用 -&gt; slot 1</span></span><br><span class="line">         <span class="number">5</span>: monitorenter <span class="comment">// 将 lock对象 MarkWord 置为 Monitor 指针</span></span><br><span class="line">         <span class="number">6</span>: getstatic #<span class="number">3</span> <span class="comment">// &lt;- i</span></span><br><span class="line">         <span class="number">9</span>: iconst_1 <span class="comment">// 准备常数 1</span></span><br><span class="line">         <span class="number">10</span>: iadd <span class="comment">// +1</span></span><br><span class="line">         <span class="number">11</span>: putstatic #<span class="number">3</span> <span class="comment">// -&gt; i</span></span><br><span class="line">         <span class="number">14</span>: aload_1 <span class="comment">// &lt;- lock引用</span></span><br><span class="line">         <span class="number">15</span>: monitorexit <span class="comment">// 将 lock对象 MarkWord 重置, 唤醒 EntryList</span></span><br><span class="line">         <span class="number">16</span>: <span class="keyword">goto</span> <span class="number">24</span></span><br><span class="line">         <span class="number">19</span>: astore_2 <span class="comment">// e -&gt; slot 2 </span></span><br><span class="line">         <span class="number">20</span>: aload_1 <span class="comment">// &lt;- lock引用</span></span><br><span class="line">         <span class="number">21</span>: monitorexit <span class="comment">// 将 lock对象 MarkWord 重置, 唤醒 EntryList</span></span><br><span class="line">         <span class="number">22</span>: aload_2 <span class="comment">// &lt;- slot 2 (e)</span></span><br><span class="line">         <span class="number">23</span>: athrow <span class="comment">// throw e</span></span><br><span class="line">         <span class="number">24</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">         from to target type</span><br><span class="line">         <span class="number">6</span> <span class="number">16</span>  <span class="number">19</span> any</span><br><span class="line">         <span class="number">19</span> <span class="number">22</span>   <span class="number">19</span> any</span><br><span class="line">     LineNumberTable:</span><br><span class="line">         line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">         line <span class="number">9</span>: <span class="number">6</span></span><br><span class="line">         line <span class="number">10</span>: <span class="number">14</span></span><br><span class="line">         line <span class="number">11</span>: <span class="number">24</span></span><br><span class="line">     LocalVariableTable:</span><br><span class="line">     Start Length Slot Name Signature</span><br><span class="line">     <span class="number">0</span> <span class="number">25</span> <span class="number">0</span> args [Ljava/lang/String;</span><br><span class="line">     StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">     frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">     offset_delta = <span class="number">19</span></span><br><span class="line">             locals = [ class <span class="string">&quot;[Ljava/lang/String;&quot;</span>, <span class="keyword">class</span> <span class="title class_">java</span>/lang/Object ]</span><br><span class="line">             stack = [ <span class="keyword">class</span> <span class="title class_">java</span>/lang/Throwable ]</span><br><span class="line">     frame_type = <span class="number">250</span> <span class="comment">/* chop */</span></span><br><span class="line">             offset_delta = <span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程:Java线程</title>
      <link href="/posts/f69483be.html"/>
      <url>/posts/f69483be.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建和运行线程"><a href="#创建和运行线程" class="headerlink" title="创建和运行线程"></a>创建和运行线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 要执行的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法的参数是给线程指定名字，推荐</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t1&quot;</span>) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// run 方法内实现了要执行的任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">t1.start();</span><br></pre></td></tr></table></figure><h2 id="使用-Runnable-配合-Thread"><a href="#使用-Runnable-配合-Thread" class="headerlink" title="使用 Runnable 配合 Thread"></a>使用 Runnable 配合 Thread</h2><p>Runnablen： 可以看作是一个需要执行的任务本体</p><p>把【线程】和【任务】（要执行的代码）分开</p><ul><li>Thread 代表线程 </li><li>Runnable 可运行的任务（线程要执行的代码）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 要执行的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>( runnable );</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">t.start(); </span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task2, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><p><strong>Java 8</strong> 以后可以使用 <strong>lambda</strong> 精简代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task2</span> <span class="operator">=</span> () -&gt; log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task2, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><h2 id="Thread-与-Runnable-的关系"><a href="#Thread-与-Runnable-的关系" class="headerlink" title="Thread 与 Runnable 的关系"></a>Thread 与 Runnable 的关系</h2><p><code>Thread</code> 类是Java提供的表示一个线程的类，它继承自 <code>java.lang.Thread</code>。通过创建 <code>Thread</code> 类的实例，可以表示一个独立的线程，可以在该线程中执行一段代码。</p><p><code>Runnable</code> 接口是Java提供的表示可执行任务的接口，它定义了<code>run()</code>方法。通过实现 <code>Runnable</code> 接口，可以将一段代码封装成一个任务，并交给 <code>Thread</code> 进行执行。</p><p><code>Thread</code> 类和 <code>Runnable</code> 接口之间的关系是，<code>Thread</code> 类可以通过构造函数接受一个实现了 <code>Runnable</code> 接口的对象作为参数，从而将实现了 <code>Runnable</code> 接口的任务指派给该线程进行执行。具体地，<code>Thread</code> 类提供了一个构造函数 <code>Thread(Runnable target)</code>，用于接收一个 <code>Runnable</code> 对象，并把它设置为该线程的任务。</p><p>使用 <code>Runnable</code> 接口有以下几个优势：</p><ol><li>更好地面向对象：通过实现 <code>Runnable</code> 接口，任务代码与线程对象本身进行解耦，使得代码更加清晰、简洁和可维护。</li><li>继承的灵活性：Java中的类是单继承的，如果一个类已经继承了其他类，就不能再继承 <code>Thread</code> 类。而通过实现 <code>Runnable</code> 接口，可以避免这种限制，使得任务代码可以与其他类进行更好的组合。</li><li>资源共享：多个线程可以共享同一个 <code>Runnable</code> 对象，实现资源共享。</li><li>线程池支持：使用 <code>Runnable</code> 接口可以更方便地将任务提交给线程池进行管理和调度。</li></ol><p>下面是一个示例代码，演示了使用 <code>Runnable</code> 接口创建线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程执行代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RunnableDemo</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>RunnableDemo</code> 类实现了 <code>Runnable</code> 接口，并实现了 <code>run()</code> 方法作为任务的代码逻辑。然后，创建一个 <code>Thread</code> 实例，将 <code>runnable</code> 对象传入 <code>Thread</code> 的构造函数中，最后调用 <code>start()</code> 方法启动线程。</p><p>通过使用 <code>Runnable</code> 接口，可以更好地将任务和线程进行分离，提高代码的可读性和可维护性。</p><h2 id="FutureTask-配合-Thread"><a href="#FutureTask-配合-Thread" class="headerlink" title="FutureTask 配合 Thread"></a>FutureTask 配合 Thread</h2><p><code>FutureTask</code>能够接收 <code>Callable</code>类型的参数，用来处理有返回结果的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line">FutureTask&lt;Integer&gt; task3 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(task3, <span class="string">&quot;t3&quot;</span>).start();</span><br><span class="line"><span class="comment">// 主线程阻塞，同步等待 task 执行完毕的结果</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> task3.get();</span><br><span class="line">log.debug(<span class="string">&quot;结果是:&#123;&#125;&quot;</span>, result);</span><br></pre></td></tr></table></figure><h2 id="查看进程线程的方法"><a href="#查看进程线程的方法" class="headerlink" title="查看进程线程的方法"></a>查看进程线程的方法</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>任务管理器可以查看进程和线程数，也可以用来杀死进</p><p><img src="https://bu.dusays.com/2023/10/27/653b20fa7ca6e.png" alt=""></p><p><code>tasklist</code>查看进程</p><p> <img src="https://bu.dusays.com/2023/10/27/653b21370b7f6.png" alt="image-20231027103221563"></p><p><code>taskkill</code>杀死进程</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><ul><li><code>ps -fe</code>查看所有进程 </li><li><code>ps -fT -p</code>查看某个进程（PID）的所有线程 </li><li><code>kill</code>杀死进程 </li><li><code>top</code>按大写 H 切换是否显示线程 </li><li><code>top -H -p</code>查看某个进程（PID）的所有线程</li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li>jps 命令查看所有 Java 进程 </li><li><code>jstack</code>查看某个 Java 进程（PID）的所有线程状态 </li><li><code>jconsole</code>来查看某个 Java 进程中线程的运行情况（图形界面）</li></ul><p>jconsole 远程监控配置 </p><ul><li>需要以如下方式运行你的 java 类</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote -</span><br><span class="line">Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 -</span><br><span class="line">Dcom.sun.management.jmxremote.authenticate=是否认证 java类</span><br></pre></td></tr></table></figure><ul><li>修改 /etc/hosts 文件将 127.0.0.1 映射至主机名 </li></ul><p>如果要认证访问，还需要做如下步骤</p><ul><li>复制 jmxremote.password 文件 </li><li>修改 jmxremote.password 和 jmxremote.access 文件的权限为 600 即文件所有者可读写 </li><li>连接时填入 controlRole（用户名），R&amp;D（密码）</li></ul><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><h3 id="栈与栈帧"><a href="#栈与栈帧" class="headerlink" title="栈与栈帧"></a>栈与栈帧</h3><p>Java Virtual Machine Stacks （Java 虚拟机栈）</p><p>我们都知道 JVM 中由堆、栈、方法区所组成，其中栈内存是给线程用的,每个线程启动后，虚拟机就会为其分配一块栈内存</p><ul><li>每个栈由多个栈帧（Frame)组成，对应着每次方法调用时所占用的内存</li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</li></ul><h3 id="线程上下文切换（Thread-Context-Switch）"><a href="#线程上下文切换（Thread-Context-Switch）" class="headerlink" title="线程上下文切换（Thread Context Switch）"></a>线程上下文切换（Thread Context Switch）</h3><p>因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码 </p><ul><li>线程的 cpu 时间片用完 </li><li>垃圾回收 </li><li>有更高优先级的线程需要运行 </li><li>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法 </li></ul><p>当 Context Switch 发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java 中对应的概念 就是程序计数器（Program Counter Register），它的作用是记住下一条 jvm 指令的执行地址，是线程私有的</p><ul><li>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等 </li><li>Context Switch 频繁发生会影响性能</li></ul><h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><div class="table-container"><table><thead><tr><th><strong>方法名</strong></th><th><strong>static</strong></th><th><strong>功能说明</strong></th><th style="text-align:left"><strong>注意</strong></th></tr></thead><tbody><tr><td>start()</td><td></td><td>启动一个新线程，在新的线程运行 run 方法中的代码</td><td style="text-align:left">start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU 的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateException</td></tr><tr><td>run()</td><td></td><td>新线程启动后会调用的方法</td><td style="text-align:left">如果在构造 Thread 对象时传递了 Runnable 参数，则线程启动后会调用  Runnable 中的 run 方法，否则默认不执行任何操作。但可以创建 Thread 的子类对象， 来覆盖默认行为</td></tr><tr><td>join()</td><td></td><td>等待线程运行结束</td><td style="text-align:left"></td></tr><tr><td>join(long n)</td><td></td><td>等待线程运行结束,最多等待 n 毫秒</td><td style="text-align:left"></td></tr><tr><td>getId()</td><td></td><td>获取线程长整型的 id</td><td style="text-align:left">id 唯一</td></tr><tr><td>getName()</td><td></td><td>获取线程名</td><td style="text-align:left"></td></tr><tr><td>setName(String)</td><td></td><td>修改线程名</td><td style="text-align:left"></td></tr><tr><td>getPriority()</td><td></td><td>获取线程优先级</td><td style="text-align:left"></td></tr><tr><td>setPriority(int)</td><td></td><td>修改线程优先级</td><td style="text-align:left">java中规定线程优先级是1~10 的整数，较大的优先级能提高该线程被 CPU 调度的机率</td></tr><tr><td>getState()</td><td></td><td>获取线程状态</td><td style="text-align:left">Java 中线程状态是用 6 个 enum 表示，分别为： NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED</td></tr><tr><td>isInterrupted()</td><td></td><td>判断是否被打断，</td><td style="text-align:left">不会清除 打断标记</td></tr><tr><td>isAlive()</td><td></td><td>线程是否存活  （还没有运行完毕）</td><td style="text-align:left"></td></tr><tr><td>interrupt()</td><td></td><td>打断线程</td><td style="text-align:left">如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并清除 打断标  记 ；如果打断的正在运行的线程，则会设置 打断标记 ；park 的线程被打断，也会设置 打断标记</td></tr><tr><td>interrupted()</td><td>static</td><td>判断当前线程是否被打断</td><td style="text-align:left">会清除  打断标记</td></tr><tr><td>currentThread()</td><td>static</td><td>获取当前正在执行的线程</td><td style="text-align:left"></td></tr><tr><td>sleep(long n)</td><td>static</td><td>让当前执行的线程休眠n毫秒， 休眠时让出 cpu 的时间片给其它线程</td><td style="text-align:left"></td></tr><tr><td>yield()</td><td>static</td><td>提示线程调度器让出当前线程对CPU的使用</td><td style="text-align:left">主要是为了测试和调试</td></tr></tbody></table></div><h2 id="start-与-run"><a href="#start-与-run" class="headerlink" title="start 与 run"></a>start 与 run</h2><h3 id="调用-run"><a href="#调用-run" class="headerlink" title="调用 run"></a>调用 run</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t1&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(Thread.currentThread().getName());</span><br><span class="line">            FileReader.read(Constants.MP4_FULL_PATH);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    t1.run();</span><br><span class="line">    log.debug(<span class="string">&quot;do other things ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">19:39:14 [main] c.TestStart - main</span><br><span class="line">19:39:14 [main] c.FileReader - <span class="built_in">read</span> [1.mp4] start ...</span><br><span class="line">19:39:18 [main] c.FileReader - <span class="built_in">read</span> [1.mp4] end ... cost: 4227 ms</span><br><span class="line">19:39:18 [main] c.TestStart - <span class="keyword">do</span> other things ...</span><br></pre></td></tr></table></figure><p>程序仍在 main 线程运行， FileReader.read() 方法调用还是同步的,也就是说并没有额外开辟线程去执行run里面的业务</p><h3 id="调用-start"><a href="#调用-start" class="headerlink" title="调用 start"></a>调用 start</h3><p>将上述代码的 t1.run() 改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.start();</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">19:41:30 [main] c.TestStart - <span class="keyword">do</span> other things ...</span><br><span class="line">19:41:30 [t1] c.TestStart - t1</span><br><span class="line">19:41:30 [t1] c.FileReader - <span class="built_in">read</span> [1.mp4] start ...</span><br><span class="line">19:41:35 [t1] c.FileReader - <span class="built_in">read</span> [1.mp4] end ... cost: 4542 ms</span><br></pre></td></tr></table></figure><p>程序在 t1 线程运行， FileReader.read() 方法调用是异步的</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>直接调用 run 是在主线程中执行了 run，没有启动新的线程</li><li>使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码</li></ul><h2 id="sleep-与-yield"><a href="#sleep-与-yield" class="headerlink" title="sleep 与 yield"></a>sleep 与 yield</h2><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><ol><li><p>调用 sleep 会让当前线程从 <em>Running</em> 进入 <em>Timed Waiting</em> 状态（阻塞）</p></li><li><p>其它线程可以使用  interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出</p></li><li><p>睡眠结束后的线程未必会立刻得到执行</p></li><li><p>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性</p></li></ol><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><ol><li><p>调用 yield 会让当前线程从 <em>Running</em> 进入 <em>Runnable</em> 就绪状态，然后调度执行其它线程</p></li><li><p>具体的实现依赖于操作系统的任务调度器</p></li><li><p>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性</p></li></ol><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><ul><li><p>线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它</p></li><li><p>如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">task1</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----&gt;1 &quot;</span> + count++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// Thread.yield();</span></span><br><span class="line">        System.out.println(<span class="string">&quot; ----&gt;2 &quot;</span> + count++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task1, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task2, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"><span class="comment">// t1.setPriority(Thread.MIN_PRIORITY);</span></span><br><span class="line"><span class="comment">// t2.setPriority(Thread.MAX_PRIORITY);</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure></li></ul><h2 id="join-方法"><a href="#join-方法" class="headerlink" title="join 方法"></a>join 方法</h2><p>下面的代码执行，打印 r 是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    test1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">        r = <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">//  t1.join();</span></span><br><span class="line">    log.debug(<span class="string">&quot;结果为:&#123;&#125;&quot;</span>, r);</span><br><span class="line">    log.debug(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>因为主线程和线程 t1 是并行执行的，t1 线程需要 1 秒之后才能算出 r=10 </li><li>而主线程一开始就要打印 r 的结果，所以只能打印出 r=0 </li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>用 join，加在 t1.start() 之后即可</li></ul><h3 id="有时效的-join"><a href="#有时效的-join" class="headerlink" title="有时效的 join"></a>有时效的 join</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> test3();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"> sleep(<span class="number">1</span>);</span><br><span class="line"> r1 = <span class="number">10</span>;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"> t1.start();</span><br><span class="line">     <span class="comment">// 线程执行结束会导致 join 结束</span></span><br><span class="line"> t1.join(<span class="number">1500</span>);</span><br><span class="line"> <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"> log.debug(<span class="string">&quot;r1: &#123;&#125; r2: &#123;&#125; cost: &#123;&#125;&quot;</span>, r1, r2, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等待1.5s</p><h3 id="sleep-和-join区别"><a href="#sleep-和-join区别" class="headerlink" title="sleep 和 join区别"></a>sleep 和 join区别</h3><ol><li>功能不同：<code>sleep()</code> 方法是让线程进入休眠状态，暂停当前线程的执行一段时间后再继续执行；而 <code>join()</code> 方法则是用于等待一个线程的终止，当前线程会等待被调用线程的执行完成后再继续执行。</li><li>使用方式不同：<code>sleep()</code> 方法是 <code>Thread</code> 类的成员方法，可以通过 <code>Thread.sleep()</code> 来调用；而 <code>join()</code> 方法也是 <code>Thread</code> 类的成员方法，需要通过调用其他线程的 <code>join()</code> 方法来等待该线程的执行完成。</li><li>等待的对象不同：<code>sleep()</code> 方法是当前线程调用自身的 <code>sleep()</code> 方法，使得该线程进入休眠；而 <code>join()</code> 方法是当前线程调用其他线程的 <code>join()</code> 方法，使得当前线程等待其他线程的执行完成。</li><li>异常处理不同：<code>sleep()</code> 方法需要处理 <code>InterruptedException</code> 异常，该异常在其他线程中调用当前线程的 <code>interrupt()</code> 方法时会抛出；而 <code>join()</code> 方法则不需要处理异常。</li></ol><h2 id="interrupt-方法详"><a href="#interrupt-方法详" class="headerlink" title="interrupt 方法详"></a>interrupt 方法详</h2><h3 id="打断-sleep，wait，join-的线程"><a href="#打断-sleep，wait，join-的线程" class="headerlink" title="打断 sleep，wait，join 的线程"></a>打断 sleep，wait，join 的线程</h3><p>这几个方法都会让线程进入阻塞状态 打断 sleep 的线程, 会清空打断状态，以 sleep 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    sleep(<span class="number">0.5</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">    log.debug(<span class="string">&quot; 打断状态: &#123;&#125;&quot;</span>, t1.isInterrupted());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java.lang.InterruptedException: <span class="built_in">sleep</span> interrupted</span><br><span class="line"> at java.lang.Thread.<span class="built_in">sleep</span>(Native Method)</span><br><span class="line"> at java.lang.Thread.<span class="built_in">sleep</span>(Thread.java:340)</span><br><span class="line"> at java.util.concurrent.TimeUnit.<span class="built_in">sleep</span>(TimeUnit.java:386)</span><br><span class="line"> at cn.itcast.n2.util.Sleeper.<span class="built_in">sleep</span>(Sleeper.java:8)</span><br><span class="line"> at cn.itcast.n4.TestInterrupt.lambda$test1<span class="variable">$3</span>(TestInterrupt.java:59)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">21:18:10.374 [main] c.TestInterrupt - 打断状态: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="打断正常运行的线程"><a href="#打断正常运行的线程" class="headerlink" title="打断正常运行的线程"></a>打断正常运行的线程</h3><p>打断正常运行的线程, 不会清空打断状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> current.isInterrupted();</span><br><span class="line">            <span class="keyword">if</span>(interrupted) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot; 打断状态: &#123;&#125;&quot;</span>, interrupted);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    t2.start();</span><br><span class="line">    sleep(<span class="number">0.5</span>);</span><br><span class="line">    t2.interrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20:57:37.964 [t2] c.TestInterrupt - 打断状态: <span class="literal">true</span> </span><br></pre></td></tr></table></figure><h3 id="打断-park-线程"><a href="#打断-park-线程" class="headerlink" title="打断 park 线程"></a>打断 park 线程</h3><p>打断 park 线程, 不会清空打断状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        log.debug(<span class="string">&quot;unpark...&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    sleep(<span class="number">0.5</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">21:11:52.795 [t1] c.TestInterrupt - park... </span><br><span class="line">21:11:53.295 [t1] c.TestInterrupt - unpark... </span><br><span class="line">21:11:53.295 [t1] c.TestInterrupt - 打断状态：<span class="literal">true</span> </span><br></pre></td></tr></table></figure><p>如果打断标记已经是 true, 则 park 会失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t1.start();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">21:13:48.783 [Thread-0] c.TestInterrupt - park... </span><br><span class="line">21:13:49.809 [Thread-0] c.TestInterrupt - 打断状态：<span class="literal">true</span> </span><br><span class="line">21:13:49.812 [Thread-0] c.TestInterrupt - park... </span><br><span class="line">21:13:49.813 [Thread-0] c.TestInterrupt - 打断状态：<span class="literal">true</span> </span><br><span class="line">21:13:49.813 [Thread-0] c.TestInterrupt - park... </span><br><span class="line">21:13:49.813 [Thread-0] c.TestInterrupt - 打断状态：<span class="literal">true</span> </span><br><span class="line">21:13:49.813 [Thread-0] c.TestInterrupt - park... </span><br><span class="line">21:13:49.813 [Thread-0] c.TestInterrupt - 打断状态：<span class="literal">true</span> </span><br><span class="line">21:13:49.813 [Thread-0] c.TestInterrupt - park... </span><br><span class="line">21:13:49.813 [Thread-0] c.TestInterrupt - 打断状态：<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>可以使用 Thread.interrupted() 清除打断状态</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程前言</title>
      <link href="/posts/34c3fdc6.html"/>
      <url>/posts/34c3fdc6.html</url>
      
        <content type="html"><![CDATA[<h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><p>并发和并行目标都是最大化CPU的使用率</p><p><strong>并行</strong>：在<strong>同一时刻</strong>，多条指令在多个处理器上同时执行，无论是从微观还是宏观的角度来看二者都是<strong>一起执行</strong>的</p><p><strong>并发</strong>：在<strong>同一时刻只能有一条指令执行</strong>，但多个进程指令快速的<strong>轮换执行</strong>，使得在宏观上具有多个进程时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干份，使多个进程快速<strong>交替执行</strong></p><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul><li>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在 指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的</li><li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。 </li><li>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器 等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li>一个进程之内可以分为一到多个线程。</li><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</li><li>Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作为线程的容器</li></ul><h3 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h3><ul><li>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集</li><li>进程拥有共享的资源，如内存空间等，供其内部的线程共享</li><li>进程间通信较为复杂<ul><li>同一台计算机的进程通信称为 IPC（Inter-process communication)</li></ul></li><li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如  HTTP</li><li>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量 线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</li></ul><h2 id="多线程的作用"><a href="#多线程的作用" class="headerlink" title="多线程的作用"></a>多线程的作用</h2><p>对于多线程的作用有这三个：<strong>同步、互斥、分工</strong>。</p><p><strong>同步</strong>：指的是A线程的结果需要依赖B线程的结果。比如说用户访问tomcat开启一个tomcat的线程。而tomcat线程会去访问应用程序线程，应用程序线程又会调用jdbc的线程访问数据。拿到一系列结果后放回给tomcat 再放回给用户。这就是线程之间的同步协作。</p><p><strong>互斥</strong>：指的是A线程在使用这个资源，其他线程无法使用，必须等到A线程释放后才能访问该资源。比如在数据库中对某个数据加了写锁，在一个线程进行写操作的时候另一个线程无法访问到该数据。</p><p><strong>分工</strong>：每个线程分配不同的任务，最后结果汇总起来。比如说在计算很大数据时，开启多个线程，每个线程计算一部分，最后把所有线程计算的结果汇总</p><h2 id="并发编程出现bug的根本原因"><a href="#并发编程出现bug的根本原因" class="headerlink" title="并发编程出现bug的根本原因"></a>并发编程出现bug的根本原因</h2><p>根本原因在于：<strong>可见性</strong>、<strong>原子性和有序性问题</strong>。这也是并发的三大特性</p><h2 id="并发编程三特性"><a href="#并发编程三特性" class="headerlink" title="并发编程三特性"></a>并发编程三特性</h2><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>当一个线程修改了共享变量的值，其他线程能够看到修改的值。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介 的方法来实现可见性的。 如何保证可见性:</p><ul><li>通过 <strong>volatile</strong> 关键字保证可见性。</li><li>通过 内存屏障保证可见性。</li><li>通过 <strong>synchronized</strong> 关键字保证可见性。</li><li>通过 <strong>Lock</strong>锁机制保证可见性。</li><li>通过 <strong>final</strong> 关键字保证可见性<h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3>即程序执行的顺序按照代码的先后顺序执行。<strong>JVM 存在指令重排</strong>，所以存在<strong>有序</strong>性问题。 如何保证有序性：</li><li>通过 <strong>volatile</strong> 关键字保证<strong>有序</strong>性。</li><li>通过 内存屏障保证有序性。</li><li>通过 <strong>synchronized</strong>关键字保证<strong>有序</strong>性。 通过 Lock锁机制保证<strong>有序</strong>性。<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3>一个或多个操作，要么全部执行且在执行过程中不被任何因素打断，要么全部不执行。在 Java 中，对基本数据类型的变量的读取和赋值操作是原子性操作（64位处理器）。不采取任何的原子性保障措施的自增操作并不是原子性的。如何保证原子性：</li><li>通过 synchronized 关键字保证原子性。</li><li>通过 Lock锁机制保证原子性。</li><li>通过 CAS保证原子性。</li></ul><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode844 backspaceCompare</title>
      <link href="/posts/1665a8bc.html"/>
      <url>/posts/1665a8bc.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p><img src="https://bu.dusays.com/2023/10/25/6538926ef38e9.webp" alt=""><br><span class='p center logo large'>坚持就是胜利</span></p></div><h2 id="LeetCode地址"><a href="#LeetCode地址" class="headerlink" title="LeetCode地址"></a>LeetCode地址</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://leetcode.cn/problems/backspace-string-compare/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://bu.dusays.com/2023/10/25/653891265eac8.webp)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">LeetCode </div>            <div class="tag-link-sitename">844</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="模拟栈思想"><a href="#模拟栈思想" class="headerlink" title="模拟栈思想"></a>模拟栈思想</h2><p>我们可以使用栈的思想来模拟这个过程。从左到右遍历字符串，当遇到字符时，将其压入栈中，当遇到 ‘#’ 时，弹出栈顶字符，表示退格。最后，比较两个字符串栈中的内容是否相等。</p><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> buildString(s).equals(buildString(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">buildString</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sb.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双指针方法"><a href="#双指针方法" class="headerlink" title="双指针方法"></a>双指针方法</h2><p>除了使用栈的方法，我们还可以采用双指针的方式，从字符串末尾开始逐个字符比较，遇到 ‘#’ 时跳过下一个非 ‘#’ 字符，继续比较。</p><h2 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> t.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">skipS</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">skipT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                skipS++;</span><br><span class="line">                i--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipS &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                skipS--;</span><br><span class="line">                i--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t.charAt(j) == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                skipT++;</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipT &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                skipT--;</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i) != t.charAt(j)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((i &gt;= <span class="number">0</span>) != (j &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span class='p center logo large'>如果您还有更好的解题思路请在下方评论区交流</span>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode27 RemoveElement</title>
      <link href="/posts/cec2b6f3.html"/>
      <url>/posts/cec2b6f3.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p><img src="https://bu.dusays.com/2023/10/25/6538926ef38e9.webp" alt=""><br><span class='p center logo large'>坚持就是胜利</span></p></div><h2 id="LeetCode地址"><a href="#LeetCode地址" class="headerlink" title="LeetCode地址"></a>LeetCode地址</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://leetcode.cn/problems/remove-element/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://bu.dusays.com/2023/10/25/653891265eac8.webp)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">LeetCode </div>            <div class="tag-link-sitename">27</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="解题思路01"><a href="#解题思路01" class="headerlink" title="解题思路01"></a>解题思路01</h2><p>通过双指针方式，将不等于val的元素移动到数组的前面，定义两个双指针，slow、fast，初始值均为0。</p><ol><li>遍历数组，当nums[fast]不等于val时，将其赋值给nums[slow],并同时将slow和fast指针都向后移动一位.</li><li>当nums[fast]等于val时,只需要将fast指针向后移动一位即可.同时slow也会随着循环的自增+1</li><li>最后返回fast的长度即可<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayElementRemoval</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 慢指针</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>; fast &lt; nums.length; fast++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != val) &#123;</span><br><span class="line">                nums[slow++] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New length: 2</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2></li></ol><ul><li>时间复杂度：遍历数组，时间复杂度为 O(n)，其中 n 为数组的长度。 </li><li>空间复杂度：原地修改输入数组，使用 O(1) 的额外空间。</li></ul><h2 id="解题思路02"><a href="#解题思路02" class="headerlink" title="解题思路02"></a>解题思路02</h2><p>如果你希望进一步优化算法的性能，可以考虑以下几个方面：</p><ol><li>减少元素复制的次数：目前的实现中，当遇到不等于 val 的元素时，会进行一次元素复制操作。你可以通过判断 slow 和 fast 指针是否指向同一个位置，避免不必要的元素复制。这样可以减少一部分复制操作的次数。</li><li>从数组末尾开始遍历：由于题目要求不需要考虑新长度后面的元素，我们可以考虑从数组末尾开始遍历，将等于 val 的元素交换到数组末尾。这样的话，就可以避免在每次遇到 val 时都进行元素复制操作，从而减少复制操作的次数。<h2 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> r=  nums.length;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l] == val)&#123;</span><br><span class="line">                nums[l] = nums[r-- - <span class="number">1</span> ];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当然你还可以这样写<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 慢指针</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> nums.length - <span class="number">1</span>; <span class="comment">// 快指针</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (slow &lt;= fast) &#123;</span><br><span class="line">          <span class="keyword">if</span> (nums[fast] == val) &#123;</span><br><span class="line">              fast--;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[slow] == val) &#123;</span><br><span class="line">              nums[slow] = nums[fast];</span><br><span class="line">              slow++;</span><br><span class="line">              fast--;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              slow++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> slow;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><span class='p center logo large'>如果您还有更好的解题思路请在下方评论区交流</span></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode69:x的平方根</title>
      <link href="/posts/c6709c91.html"/>
      <url>/posts/c6709c91.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p><img src="https://bu.dusays.com/2023/10/25/6538926ef38e9.webp" alt=""><br><span class='p center logo large'>坚持就是胜利</span></p></div><h2 id="LeetCode地址"><a href="#LeetCode地址" class="headerlink" title="LeetCode地址"></a>LeetCode地址</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://leetcode.cn/problems/sqrtx/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://bu.dusays.com/2023/10/25/653891265eac8.webp)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">LeetCode </div>            <div class="tag-link-sitename">69</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>这道题需要你对 <code>算术平方根</code>有一定的了解，如果您不知道，可以先点开学习一下<code>平方和平方根的概念</code><br><details class="folding-tag" ><summary> 点我查看 </summary>              <div class='content'>              <p>当我们谈论算术平方根时，需要先理解平方和平方根的概念。</p><p>平方是对一个数进行乘以自身的操作。例如，2 的平方是 2 <em> 2 = 4，3 的平方是 3 </em> 3 = 9。</p><p>而平方根则是指一个数的平方等于给定数的操作。例如，4 的平方根就是一个数，使得它的平方等于 4。因为 2 * 2 = 4，所以 2 就是 4 的平方根。</p><p>在数学中，平方根有两种情况：正平方根和负平方根。</p><p>正平方根指的是一个非负实数的平方根，例如 4 的正平方根是 2。<br>负平方根指的是一个负数的平方根，例如 -4 的负平方根是 -2。但是在常见的数学应用中，一般只讨论非负实数的平方根。<br>计算算术平方根的过程可以使用不同的方法，其中最常见的方法是牛顿迭代法。下面以牛顿迭代法为例进行讲解：</p><p>以计算非负实数 a 的算术平方根为例，我们可以通过迭代逼近的方式计算其平方根 x。</p><p>具体过程如下：</p><p>选择一个初始的猜测值 x0，通常可以选择 a/2 作为初始猜测值。<br>使用迭代公式求出下一个猜测值 xn+1：xn+1 = (xn + a / xn) / 2。<br>不断地重复步骤 2，直到 xn+1 与 xn 的差值足够小，即满足要求的精度。<br>迭代过程中，每次计算出的新的猜测值都会越来越接近实际的算术平方根。</p><p>例如，我们想要计算数 4 的算术平方根：</p><p>初始猜测值为 x0 = 4 / 2 = 2。<br>使用迭代公式计算下一个猜测值：x1 = (x0 + 4 / x0) / 2 = (2 + 4 / 2) / 2 = 3。<br>迭代计算直到满足要求的精度。<br>通过不断迭代，我们可以接近并计算出数 4 的算术平方根。</p><p>看到这里相信你已经了解了什么是平方和平方根了，现在考你一下16正负平方根是多少呢？<br>答案：<psw>正负4，因为4乘以4等于16，同时-4乘以-4也等于16。所以16的平方根有两个解：正数4和负数-4。在一般情况下，当我们讨论平方根时，默认情况下指的是非负数解。所以，16的正平方根为4。你答对了嘛？</psw></p>              </div>            </details></p><span class='p center logo large'>如果您还有更好的解题思路请在下方评论区交流</span> ]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode35:搜索位置插入</title>
      <link href="/posts/c6da6a8a.html"/>
      <url>/posts/c6da6a8a.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p><img src="https://bu.dusays.com/2023/10/25/6538926ef38e9.webp" alt=""><br><span class='p center logo large'>坚持就是胜利</span></p></div><h2 id="LeetCode地址"><a href="#LeetCode地址" class="headerlink" title="LeetCode地址"></a>LeetCode地址</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://leetcode.cn/problems/search-insert-position/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://bu.dusays.com/2023/10/25/653891265eac8.webp)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">LeetCode </div>            <div class="tag-link-sitename">35</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>给定一个非递减排序的数组nums，和一个目标值target。要求在数组中搜索目标值的位置，如果目标值存在，则返回其索引，如果目标值不存在，返回应该插入的位置索引。</p><h2 id="暴力解法-左闭右开"><a href="#暴力解法-左闭右开" class="headerlink" title="暴力解法(左闭右开)"></a>暴力解法(左闭右开)</h2><p>暴力解法的思路比较简单，遍历数组中的每个元素，如果当前元素大于等于目标值，说明目标值应该插入到当前位置或之前的位置，即返回当前索引。如果遍历完整个数组都没有找到大于等于目标值的元素，说明目标值应该插入到数组的末尾位置，即返回数组的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; nums.length; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt;= target) <span class="keyword">return</span> i; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="暴力解法-左闭右闭"><a href="#暴力解法-左闭右闭" class="headerlink" title="暴力解法(左闭右闭)"></a>暴力解法(左闭右闭)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt;= nums.length - <span class="number">1</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt;= target) <span class="keyword">return</span> i; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>由于数组已经是非递减排序的，我们可以使用二分查找的思想来加快搜索的过程。具体步骤如下：</p><ol><li>初始化左边界l为数组的第一个元素，右边界r为数组的最后一个元素。 </li><li>使用循环不断缩小搜索的范围，直到左右边界相遇： <ul><li>计算中间索引mid，并取得中间元素值nums[mid]。</li><li>如果中间元素值大于目标值，说明目标值在左边，将右边界r更新为mid - 1。</li><li>如果中间元素值小于目标值，说明目标值在右边，将左边界l更新为mid + 1。</li><li>如果中间元素值等于目标值，直接返回中间索引mid。</li></ul></li><li>当左右边界相遇时，说明目标值不在数组中，此时左边界即为应该插入的位置，返回左边界即可。</li></ol><h2 id="二分-左闭右闭"><a href="#二分-左闭右闭" class="headerlink" title="二分(左闭右闭)"></a>二分(左闭右闭)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> nums.length -<span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                r = mid -<span class="number">1</span> ;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找法-左闭又开"><a href="#二分查找法-左闭又开" class="headerlink" title="二分查找法(左闭又开)"></a>二分查找法(左闭又开)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> nums.length ;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>暴力解法的时间复杂度为O(n)，其中n为数组的长度。</li><li>二分查找的时间复杂度为O(log n)，因为每次查找都将搜索范围缩小一半。</li><li>空间复杂度为O(1)，不需要使用额外的空间。</li></ul><p>根据题目要求，我们选择使用二分查找的方法来实现，因为其时间复杂度更低。根据具体的情况，可以选择左闭右闭、左闭右开等方式来实现二分查找。在代码中给出了四种不同的实现方式供参考。</p><p>上述是对LeetCode35题目的解题思路和四种解题方法的介绍。通过二分查找的思想，我们可以快速地在非递减排序的数组中查找目标值的位置或应该插入的位置。</p><span class='p center logo large'>如果您还有更好的解题思路请在下方评论区交流</span> ]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode704:二分查找</title>
      <link href="/posts/94342fd4.html"/>
      <url>/posts/94342fd4.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p><img src="https://bu.dusays.com/2023/10/25/6538926ef38e9.webp" alt=""><br><span class='p center logo large'>坚持就是胜利</span></p></div><h2 id="LeetCode地址"><a href="#LeetCode地址" class="headerlink" title="LeetCode地址"></a>LeetCode地址</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://leetcode.cn/problems/binary-search/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://bu.dusays.com/2023/10/25/653891265eac8.webp)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">LeetCode </div>            <div class="tag-link-sitename">704</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="二分法要素"><a href="#二分法要素" class="headerlink" title="二分法要素"></a>二分法要素</h2><p class='p red'>一个题解能不能使用二分法需要满足两个提前条件</p><ul><li>数组必须为有序   </li><li>数组中无重复元素： 一旦有重复元素，使用二分法返回的元素下表可能不唯一</li></ul><h2 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h2><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><blockquote><p>传进来目标值target是在一个左闭右闭的区间里，也就是在 <code>[L , R]</code> ，区间定义之后就决定了二分法的代码应该如何写了，</p><ul><li>while(l &lt;= r)要使用 <code>&lt;=</code> 因为 <code>l == r</code> 是有意义的,所以使用&lt;=</li><li>当if(nums[mid] &gt;  target) r将要赋值为mid-1,因为当前这个num[mid]是大于target的,首先mid位置的数肯定不是target,大于那肯定就是在左边,因为数组是有序的,那接下来肯定是要在l 到 mid-1的位置进行二分查找,所以r要等于mid-1<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 第一个版本</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> nums.length -<span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="comment">// 求中间位置mid</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + ((r -l) / <span class="number">2</span>); <span class="comment">// 防止溢出</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                r = mid -<span class="number">1</span> ;  <span class="comment">// target大于mid得位置，说明mid右边得数都比target大，因此要在l - mid得范围找</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">                l = mid+<span class="number">1</span>; <span class="comment">// 与上同理</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;    <span class="comment">// 找到了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未找到目标值</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/10/18/652f32d9e2546.png" alt="好家伙击败百分之百"/></div><span class="image-caption">好家伙击败百分之百</span></div></li></ul></blockquote><h2 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h2><h3 id="左闭右开"><a href="#左闭右开" class="headerlink" title="左闭右开"></a>左闭右开</h3><p>l = 0 , r = nums.length 而不是 nums.length - 1,这种情况下, 当num[mid] &gt; target 时候, r 是 直接赋值给mid,而不是r -1 , 因为是[l , r)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 第二个版本 左闭右开 [l , r )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length; <span class="comment">// 定义target在左闭右开的区间里，即：[left, right)</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 因为left == right的时候，在[left, right)是无效的空间，所以使用 &lt;</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle; <span class="comment">// target 在左区间，在[left, middle)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>; <span class="comment">// target 在右区间，在[middle + 1, right)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// nums[middle] == target</span></span><br><span class="line">                <span class="keyword">return</span> middle; <span class="comment">// 数组中找到目标值，直接返回下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未找到目标值</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><span class='p center logo large'>如果您还有更好的解题思路请在下方评论区交流</span>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anzhiyu主题优化</title>
      <link href="/posts/b9cf97e0.html"/>
      <url>/posts/b9cf97e0.html</url>
      
        <content type="html"><![CDATA[<details class="folding-tag" ><summary> 更新记录 </summary>              <div class='content'>              <div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>本教程基于<a href="https://docs.anheyu.com/page/album.html">anzhiyu</a>主题修改，如果是小白建议先按照<span class='p green'>鱼佬文档教程</span>搭建好基本页面在看此教程</p></div><div class='checkbox checked green'><input type="radio" checked="checked"/>            <p>nav顶栏左侧应用列表ICON优化</p>            </div><div class='checkbox checked green'><input type="radio" checked="checked"/>            <p>首页顶部相关配置home_top优化</p>            </div>              </div>            </details><h2 id="顶栏navIcon问题"><a href="#顶栏navIcon问题" class="headerlink" title="顶栏navIcon问题"></a>顶栏navIcon问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><details class="folding-tag" ><summary> 点开展示 </summary>              <div class='content'>              <p><a href="https://docs.anheyu.com/advanced/#%E9%85%8D%E7%BD%AE-nav-%E9%A1%B6%E6%A0%8F%E5%B7%A6%E4%BE%A7%E5%BA%94%E7%94%A8%E5%88%97%E8%A1%A8">原教程</a>中 <code>nav.meun.item.link</code>下只支持链接图标(也不能算是图标吧,就是图片)<br>换成<a href="https://docs.anheyu.com/global/base.html#%E5%9B%BE%E6%A0%87%E9%85%8D%E7%BD%AE">anzhiyu-icon-xxx</a>也不行,说明此处并不支持icon的图标<br>那就只能自己适配了,修改完后的nav可适配 <code>阿里图标</code>、<code>aanzhiyi-icon</code>、<code>fa</code></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/10/16/652d049f3d4a7.png" alt="anzhiyu主题仓库中此处只有img标签，并不支持icon图标展示" style="width:600px;"/></div><span class="image-caption">anzhiyu主题仓库中此处只有img标签，并不支持icon图标展示</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/10/16/652d050869564.png" alt="因此此处也只能填写外链图片地址" style="width:500px;"/></div><span class="image-caption">因此此处也只能填写外链图片地址</span></div>              </div>            </details><h3 id="修改nav-pug"><a href="#修改nav-pug" class="headerlink" title="修改nav.pug"></a>修改nav.pug</h3><p>文件路径: <code>themes/anzhiyu/layout/includes/header/nav.pug</code><br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    - const &#123; darkmode &#125; = theme</span><br><span class="line">    nav#nav</span><br><span class="line">      #nav-group</span><br><span class="line">        span#blog_name</span><br><span class="line">          if theme.nav.enable</span><br><span class="line">            .back-home-button</span><br><span class="line">              i.anzhiyufont.anzhiyu-icon-grip-vertical</span><br><span class="line">              .back-menu-list-groups</span><br><span class="line"><span class="addition">+                each group in theme.nav.menu</span></span><br><span class="line"><span class="addition">+                  .back-menu-list-group</span></span><br><span class="line"><span class="addition">+                    .back-menu-list-title= group.title</span></span><br><span class="line"><span class="addition">+                    .back-menu-list</span></span><br><span class="line"><span class="addition">+                      each item in group.item</span></span><br><span class="line"><span class="addition">+                        - var link = url_for(item.link)</span></span><br><span class="line"><span class="addition">+                        - var name = item.name</span></span><br><span class="line"><span class="addition">+                        - var iconValue = item.icon</span></span><br><span class="line"><span class="addition">+                        - var iconType = &quot;img&quot;</span></span><br><span class="line"><span class="addition">+                        - if (iconValue.startsWith(&quot;fa&quot;))</span></span><br><span class="line"><span class="addition">+                          - var iconType = &quot;fa&quot;</span></span><br><span class="line"><span class="addition">+                          - var iconClass = iconValue</span></span><br><span class="line"><span class="addition">+                          - var animaValue = item.animaValue ? item.animaValue : &#x27;faa-tada&#x27;</span></span><br><span class="line"><span class="addition">+                        - else if (iconValue.startsWith(&quot;icon&quot;))</span></span><br><span class="line"><span class="addition">+                          - var iconType = &quot;icon&quot;</span></span><br><span class="line"><span class="addition">+                          - var iconClass = item.iconClass ? item.iconClass : &#x27;&#x27;</span></span><br><span class="line"><span class="addition">+                        - else if (iconValue.startsWith(&quot;anzhiyu&quot;))</span></span><br><span class="line"><span class="addition">+                          - var iconType = &quot;anzhiyu&quot;</span></span><br><span class="line"><span class="addition">+                          - var iconClass = iconValue</span></span><br><span class="line"><span class="addition">+                        a.back-menu-item(href=link, title=name)</span></span><br><span class="line"><span class="addition">+                          - if (iconType === &quot;fa&quot;)</span></span><br><span class="line"><span class="addition">+                            i(class=iconClass + &#x27; &#x27; + animaValue)</span></span><br><span class="line"><span class="addition">+                          - else if (iconType === &quot;icon&quot;)</span></span><br><span class="line"><span class="addition">+                            svg.icon(aria-hidden=&quot;true&quot; class=iconClass style=&quot;width: 24px;height: 24px;&quot;)</span></span><br><span class="line"><span class="addition">+                              use(xlink:href=`#` + iconValue)</span></span><br><span class="line"><span class="addition">+                          - else if (iconType === &quot;anzhiyu&quot;)</span></span><br><span class="line"><span class="addition">+                            i.anzhiyufont(class=iconClass)</span></span><br><span class="line"><span class="addition">+                          - else</span></span><br><span class="line"><span class="addition">+                            img.back-menu-item-icon(src=iconValue alt=name)</span></span><br><span class="line">                          span.back-menu-item-text= name</span><br><span class="line">          a#site-name(href=url_for(&#x27;/&#x27;) accesskey=&quot;h&quot;)</span><br><span class="line">                  .title #[=config.title]</span><br><span class="line">                  i.anzhiyufont.anzhiyu-icon-house-chimney</span><br></pre></td></tr></table></figure></p><h3 id="引入自定义阿里图标库"><a href="#引入自定义阿里图标库" class="headerlink" title="引入自定义阿里图标库"></a>引入自定义阿里图标库</h3><p>在 <code>_config.anzhiyu.yml</code>中修改<code>icons</code>,填入您自己的icon链接,此处是拿阿里的图标库举例,可根据个人的来<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">icons:</span></span><br><span class="line">  <span class="attr">ali_iconfont_js:</span>  <span class="comment"># 阿里图标symbol 引用链接，主题会进行加载 symbol 引用</span></span><br><span class="line">  <span class="attr">fontawesome:</span> <span class="literal">false</span> <span class="comment">#是否启用fontawesome6图标</span></span><br><span class="line">  <span class="attr">fontawesome_animation_css:</span> <span class="comment">#fontawesome_animation 如果有就会加载，示例值：https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@1.0.17/lib/assets/font-awesome-animation.min.css</span></span><br></pre></td></tr></table></figure><br><img src="https://bu.dusays.com/2023/10/16/652d06dc61e70.png" alt=""></p><h3 id="最后的操作"><a href="#最后的操作" class="headerlink" title="最后的操作"></a>最后的操作</h3><p>在<code>_config.anzhiyu.yml</code>中修改<code>nav</code>处,填入你的icon即可生效</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://bu.dusays.com/2023/10/16/652d0722b713d.png" alt=""></h2><h2 id="home-top优化"><a href="#home-top优化" class="headerlink" title="home_top优化"></a>home_top优化</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><details class="folding-tag" ><summary> 点开展示 </summary>              <div class='content'>              <p><img src="https://bu.dusays.com/2023/10/16/652d43bb54585.png" alt=""><br><img src="https://bu.dusays.com/2023/10/16/652d42d8c20de.png" alt=""><br><a href="https://docs.anheyu.com/advanced/#%E9%A6%96%E9%A1%B5%E9%A1%B6%E9%83%A8-3-%E5%A4%A7%E5%88%86%E7%B1%BB%E9%85%8D%E7%BD%AE">home_top</a>原文地址,在这块的配置是固定的三个分类,前端、大学、生活<br>链接都是本站跳转，我想让他支持本站跳转的同时，也支持外链跳转</p>              </div>            </details><h3 id="修改top-pug"><a href="#修改top-pug" class="headerlink" title="修改top.pug"></a>修改top.pug</h3><p>文件路径: <code>themes/anzhiyu/layout/includes/top/top.pug</code>,在如下位置添加两行即可<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">        .categoryGroup</span><br><span class="line">          each item in home_top_config.category</span><br><span class="line">            .categoryItem(style=`box-shadow:$&#123;item.shadow&#125;`)</span><br><span class="line"><span class="addition">+             if (item.path.startsWith(&quot;https&quot;))</span></span><br><span class="line"><span class="addition">+              a.categoryButton(href=item.path class=`$&#123;item.class&#125;`)</span></span><br><span class="line"><span class="addition">+                span.categoryButtonText=item.name</span></span><br><span class="line"><span class="addition">+                if (item.icon.startsWith(&quot;fa&quot;))</span></span><br><span class="line"><span class="addition">+                  i(class=`$&#123;item.icon&#125;`)</span></span><br><span class="line"><span class="addition">+                else if (item.icon.startsWith(&quot;icon&quot;))</span></span><br><span class="line"><span class="addition">+                  svg.icon(aria-hidden=&quot;true&quot;)</span></span><br><span class="line"><span class="addition">+                    use(xlink:href=`#` + item.icon)</span></span><br><span class="line"><span class="addition">+                else if (item.icon.startsWith(&quot;anzhiyu&quot;))</span></span><br><span class="line"><span class="addition">+                  i.anzhiyufont(class=`$&#123;item.icon&#125;`)</span></span><br><span class="line"><span class="addition">+             else</span></span><br><span class="line">                a.categoryButton(onclick=`pjax.loadUrl(&quot;$&#123;item.path&#125;&quot;);` href=&#x27;javascript:void(0);&#x27; class=`$&#123;item.class&#125;`)</span><br><span class="line">                  span.categoryButtonText=item.name</span><br><span class="line">                  if (item.icon.startsWith(&quot;fa&quot;))</span><br><span class="line">                    i(class=`$&#123;item.icon&#125;`)</span><br><span class="line">                  else if (item.icon.startsWith(&quot;icon&quot;))</span><br><span class="line">                    svg.icon(aria-hidden=&quot;true&quot;)</span><br><span class="line">                      use(xlink:href=`#`+ item.icon)</span><br><span class="line">                  else if (item.icon.startsWith(&quot;anzhiyu&quot;))</span><br><span class="line">                    i.anzhiyufont(class=`$&#123;item.icon&#125;`)</span><br></pre></td></tr></table></figure></p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>path可改为外链地址及分类名称地址,修改后再次点击三大分类时,如果path为外链地址将会跳转到别的网站<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/10/16/652d46b552c38.png" alt="path写为外链或本站分类名称都支持"/></div><span class="image-caption">path写为外链或本站分类名称都支持</span></div><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/10/16/652d472fc5c73.png" alt="此时鼠标移入将会跳转至外链地址"/></div><span class="image-caption">此时鼠标移入将会跳转至外链地址</span></div></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
          <category> Hexo </category>
          
          <category> 主题优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anzhiyu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相册接入Memos实现自动更新</title>
      <link href="/posts/ae92cb28.html"/>
      <url>/posts/ae92cb28.html</url>
      
        <content type="html"><![CDATA[<details class="folding-tag" ><summary> 更新记录 </summary>              <div class='content'>              <div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>本教程基于<a href="https://docs.anheyu.com/page/album.html">anzhiyu</a>二改，如果是小白建议先按照<span class='p green'>鱼佬文档教程</span>搭建好基本页面在看此教程</p></div><div class='checkbox checked green'><input type="radio" checked="checked"/>            <p>相册支持<code>Memos</code>地址</p>            </div><div class='checkbox checked green'><input type="radio" checked="checked"/>            <p>相册细节优化（type为2展示时间）</p>            </div><div class='checkbox red'><input type="radio" />            <p><code>album_list</code>和<code>url</code>问题</p>            </div>              </div>            </details><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>初衷:<br>更新相册为了更方便一点,按照鱼的主题教程来搭建的目前只支持手动在 <code>album.yml</code> 文件中更新照片数据<br>更新完之后还需要 <span class='p red'>在编译</span> 、 <span class='p red'>在提交</span>博客到仓库,为了方便更新相册数据因此接入<span class='p green'>Memos</span>,省去在博客中操作的繁琐步骤<br>让页面看起来更顺我心意，看不顺眼那就魔改一下下吧~</p><ol><li>这里在详细说明一下关于 <code>album_list</code>的问题,在鱼佬的<a href="https://docs.anheyu.com/page/album.html">相册页面配置</a>教程中,有一个<code>album_list</code>和一个<code>url</code>属性,<br>当<code>album_list</code>和<code>url</code>同时存在的时候,会将<code>url</code>中的数据覆盖掉<code>album_list</code>中的数据,所以我觉得要么就都展示,要么就严谨一点做个断言处理,如果url存在链接地址,将会直接忽略<code>album_list</code><br>这个只是一个小问题,可以忽略,但是作为强迫症患者的我受不了一点…到时候在做修改吧</li></ol></div><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><div class="tabs" id="效果预览"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="效果预览-1">鱼佬效果</button><button type="button" class="tab " data-href="效果预览-2">修改后的效果</button></ul><div class="tab-contents"><div class="tab-item-content active" id="效果预览-1"><ol><li>图片展示无时间显示<br>当 <code>type</code>为2时页面图片无时间展示<br><img src="https://bu.dusays.com/2023/10/15/652bffe45b264.png" alt="鱼佬效果图"><br>但是 <code>type</code>为1时就有时间….. 本人强迫症看到此时此景非常的不爽,要么都有,要么都没有,这里忍不住吐槽一番吧~<br><img src="https://bu.dusays.com/2023/10/15/652c02d540169.png" alt="鱼佬效果图"></li></ol></div><div class="tab-item-content" id="效果预览-2"><p><a href="https://blog.serms.top/album/">相册</a></p><ol><li>图片展示时间<br><img src="https://bu.dusays.com/2023/10/15/652c03981eeab.png" alt="SerMs相册展示"></li><li>接入Memos,前面四张一样的是memos做测试用的<br><img src="https://bu.dusays.com/2023/10/15/652c043834557.png" alt="Memos链接"></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>本文不对<code>Memos</code>搭建做说明,如果您还未搭建自己的<code>Memos</code>地址请移步到<a class="btn-anzhiyu " href="https://immmmm.com/hi-memos/"   title="hi-memos"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>hi-memos</span></a><br>也可以使用可以使用小N和杜老师维护的公益服务：<a href="https://www.imcharon.com/1467/">memos纯公益代部署服务</a></p></div><h2 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h2><h3 id="修改main-js"><a href="#修改main-js" class="headerlink" title="修改main.js"></a>修改main.js</h3><p>文件地址 <code>themes/anzhiyu/source/js/main.js</code>,搜代码<code>justified-gallery 圖庫排版</code>,改动较多建议直接全部复制替换这个方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * justified-gallery 圖庫排版</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> runJustifiedGallery = <span class="keyword">function</span> (<span class="params">ele</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">htmlStr</span> = arr =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">replaceDq</span> = str =&gt; str.<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&quot;&amp;quot;&quot;</span>); <span class="comment">// replace double quotes to &amp;quot;</span></span><br><span class="line">        arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> alt = i.<span class="property">alt</span> ? <span class="string">`alt=&quot;<span class="subst">$&#123;replaceDq(i.alt)&#125;</span>&quot;`</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">const</span> title = i.<span class="property">title</span> ? <span class="string">`title=&quot;<span class="subst">$&#123;replaceDq(i.title)&#125;</span>&quot;`</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">const</span> dateTime = i.<span class="property">date</span> ? <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>(i.date).toISOString()&#125;</span>`</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">const</span> address = i.<span class="property">address</span> ? i.<span class="property">address</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">const</span> galleryItem = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;fj-gallery-item&quot; id=&quot;serms-fj-gallery-item&quot;&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;address ? <span class="string">`&lt;div class=&quot;tag-address&quot;&gt;<span class="subst">$&#123;address&#125;</span>&lt;/div&gt;`</span> : <span class="string">&quot;&quot;</span>&#125;</span></span></span><br><span class="line"><span class="string">      &lt;img src=&quot;<span class="subst">$&#123;i.url&#125;</span>&quot; <span class="subst">$&#123;alt + title&#125;</span> class=&quot;card_cover&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;serms-album-info-time&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;time class=&quot;datatime&quot; datatime=<span class="subst">$&#123;i.date&#125;</span> style=&quot;display: inline;&quot;&gt;<span class="subst">$&#123;i.date&#125;</span>&lt;/time&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">            str += galleryItem;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">lazyloadFn</span> = (<span class="params">i, arr, limit</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> loadItem = <span class="title class_">Number</span>(limit);</span><br><span class="line">        <span class="keyword">const</span> arrLength = arr.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">if</span> (arrLength &gt; loadItem) i.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;beforeend&quot;</span>, <span class="title function_">htmlStr</span>(arr.<span class="title function_">splice</span>(<span class="number">0</span>, loadItem)));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            i.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;beforeend&quot;</span>, <span class="title function_">htmlStr</span>(arr));</span><br><span class="line">            i.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;lazyload&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">lazyLoadInstance</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">lazyLoadInstance</span>.<span class="title function_">update</span>();</span><br><span class="line">        <span class="keyword">return</span> arrLength &gt; loadItem ? loadItem : arrLength;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">imageInfo</span>(<span class="params">input</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> lines = input.<span class="title function_">split</span>(<span class="string">&#x27;\n&#x27;</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">line</span> =&gt;</span> line.<span class="title function_">trim</span>() !== <span class="string">&#x27;&#x27;</span>); <span class="comment">// 分割成每行，并过滤掉空行</span></span><br><span class="line">        <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">        lines.<span class="title function_">forEach</span>(<span class="function"><span class="params">line</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> regex = <span class="regexp">/\!\[(.*?)\]\((.*?)\)/</span>;</span><br><span class="line">            <span class="keyword">const</span> match = line.<span class="title function_">match</span>(regex);</span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                <span class="keyword">const</span> [, titlePart, url] = match;</span><br><span class="line">                <span class="keyword">const</span> [, date, address, title] = titlePart.<span class="title function_">trim</span>().<span class="title function_">match</span>(<span class="regexp">/(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)\s(.*?)\s(.*)/</span>);</span><br><span class="line">                <span class="keyword">const</span> infoObject = &#123;</span><br><span class="line">                    <span class="string">&quot;url&quot;</span>: url.<span class="title function_">trim</span>(),</span><br><span class="line">                    <span class="string">&quot;address&quot;</span>: address.<span class="title function_">trim</span>(),</span><br><span class="line">                    <span class="string">&quot;date&quot;</span>: date.<span class="title function_">trim</span>(),</span><br><span class="line">                    <span class="string">&quot;title&quot;</span>: title.<span class="title function_">trim</span>(),</span><br><span class="line">                &#125;;</span><br><span class="line">                result.<span class="title function_">push</span>(infoObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchUrl</span> = <span class="keyword">async</span> url =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> [dUrl, mUrl] = url.<span class="title function_">split</span>(<span class="string">&quot;https://&quot;</span>).<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">const</span> [dUrlResponse, mUrlResponse] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">                <span class="title function_">fetch</span>(<span class="string">`https://<span class="subst">$&#123;dUrl&#125;</span>`</span>),</span><br><span class="line">                <span class="title function_">fetch</span>(<span class="string">`https://<span class="subst">$&#123;mUrl&#125;</span>`</span>)</span><br><span class="line">            ]);</span><br><span class="line">            <span class="keyword">if</span> (!dUrlResponse.<span class="property">ok</span> || !mUrlResponse.<span class="property">ok</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> [dUrlData, mUrlData] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">                dUrlResponse.<span class="title function_">json</span>(),</span><br><span class="line">                mUrlResponse.<span class="title function_">json</span>()</span><br><span class="line">            ]);</span><br><span class="line">            <span class="keyword">const</span> mUrlArryData = <span class="title function_">imageInfo</span>(mUrlData[<span class="number">0</span>].<span class="property">content</span>);</span><br><span class="line">            <span class="keyword">return</span> mUrlArryData.<span class="title function_">concat</span>(dUrlData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error occurred:&#x27;</span>, error);</span><br><span class="line">            <span class="keyword">return</span> []; <span class="comment">// 返回空数组或者其他错误处理策略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">runJustifiedGallery</span> = (<span class="params">item, arr</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> limit = item.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-limit&quot;</span>) ?? arr.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">if</span> (!item.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;lazyload&quot;</span>) || arr.<span class="property">length</span> &lt; limit) &#123;</span><br><span class="line">            <span class="comment">// 不懒加载</span></span><br><span class="line">            item.<span class="property">innerHTML</span> = <span class="title function_">htmlStr</span>(arr);</span><br><span class="line">            item.<span class="property">nextElementSibling</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!item.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;btn_album_detail_lazyload&quot;</span>) || item.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;page_img_lazyload&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 滚动懒加载</span></span><br><span class="line">                <span class="title function_">lazyloadFn</span>(item, arr, limit);</span><br><span class="line">                <span class="keyword">const</span> <span class="title function_">clickBtnFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">const</span> lastItemLength = <span class="title function_">lazyloadFn</span>(item, arr, limit);</span><br><span class="line">                    <span class="title function_">fjGallery</span>(</span><br><span class="line">                        item,</span><br><span class="line">                        <span class="string">&quot;appendImages&quot;</span>,</span><br><span class="line">                        item.<span class="title function_">querySelectorAll</span>(<span class="string">`.fj-gallery-item:nth-last-child(-n+<span class="subst">$&#123;lastItemLength&#125;</span>)`</span>)</span><br><span class="line">                    );</span><br><span class="line">                    anzhiyu.<span class="title function_">loadLightbox</span>(item.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img&quot;</span>));</span><br><span class="line">                    <span class="keyword">if</span> (lastItemLength &lt; <span class="title class_">Number</span>(limit)) &#123;</span><br><span class="line">                        observer.<span class="title function_">unobserve</span>(item.<span class="property">nextElementSibling</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 创建IntersectionObserver实例</span></span><br><span class="line">                <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">                    entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果元素进入视口</span></span><br><span class="line">                        <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">                            <span class="comment">// 执行clickBtnFn函数</span></span><br><span class="line">                            <span class="built_in">setTimeout</span>(<span class="title function_">clickBtnFn</span>(), <span class="number">100</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">                observer.<span class="title function_">observe</span>(item.<span class="property">nextElementSibling</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 相册详情 按钮懒加载</span></span><br><span class="line">                <span class="title function_">lazyloadFn</span>(item, arr, limit);</span><br><span class="line">                <span class="keyword">const</span> <span class="title function_">clickBtnFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">const</span> lastItemLength = <span class="title function_">lazyloadFn</span>(item, arr, limit);</span><br><span class="line">                    <span class="title function_">fjGallery</span>(</span><br><span class="line">                        item,</span><br><span class="line">                        <span class="string">&quot;appendImages&quot;</span>,</span><br><span class="line">                        item.<span class="title function_">querySelectorAll</span>(<span class="string">`.fj-gallery-item:nth-last-child(-n+<span class="subst">$&#123;lastItemLength&#125;</span>)`</span>)</span><br><span class="line">                    );</span><br><span class="line">                    anzhiyu.<span class="title function_">loadLightbox</span>(item.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img&quot;</span>));</span><br><span class="line">                    lastItemLength &lt; limit &amp;&amp; item.<span class="property">nextElementSibling</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, clickBtnFn);</span><br><span class="line">                &#125;;</span><br><span class="line">                item.<span class="property">nextElementSibling</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, clickBtnFn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        anzhiyu.<span class="title function_">initJustifiedGallery</span>(item);</span><br><span class="line">        anzhiyu.<span class="title function_">loadLightbox</span>(item.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img&quot;</span>));</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">lazyLoadInstance</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">lazyLoadInstance</span>.<span class="title function_">update</span>();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addJustifiedGallery</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        ele.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;url&quot;</span>) ? <span class="title function_">fetchUrl</span>(item.<span class="property">textContent</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">runJustifiedGallery</span>(item, res);</span><br><span class="line">                &#125;)</span><br><span class="line">                : <span class="title function_">runJustifiedGallery</span>(item, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(item.<span class="property">textContent</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">fjGallery</span>) &#123;</span><br><span class="line">        <span class="title function_">addJustifiedGallery</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getCSS</span>(<span class="string">`<span class="subst">$&#123;GLOBAL_CONFIG.source.justifiedGallery.css&#125;</span>`</span>);</span><br><span class="line">    <span class="title function_">getScript</span>(<span class="string">`<span class="subst">$&#123;GLOBAL_CONFIG.source.justifiedGallery.js&#125;</span>`</span>).<span class="title function_">then</span>(addJustifiedGallery);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="修改album-detail-css"><a href="#修改album-detail-css" class="headerlink" title="修改album_detail.css"></a>修改album_detail.css</h3><p>文件地址 <code>themes/anzhiyu/source/css/_extra/album/album_detail.css</code>,新增以下代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fj-gallery-item</span> &gt; <span class="selector-class">.serms-album-info-time</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-black-op);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--anzhiyu-white);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#serms-fj-gallery-item</span><span class="selector-pseudo">:hover</span>  &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>) <span class="built_in">translateZ</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">1.2</span>) <span class="built_in">contrast</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="修改album-detail-pug"><a href="#修改album-detail-pug" class="headerlink" title="修改album_detail.pug"></a>修改album_detail.pug</h3><p>文件地址 <code>themes/anzhiyu/layout/includes/page/album_detail.pug</code>, 只需新增带<code>+</code>号的代码即可<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">可在此文件中搜全局搜  else if type == 2  请不要复制这行到代码中</span><br><span class="line">    else if type == 2      </span><br><span class="line">      .type-gallery</span><br><span class="line">        - const rowHeight = i.rowHeight != &quot;undefined&quot; ? i.rowHeight : 220</span><br><span class="line">        - const limit = i.limit != &quot;undefined&quot; ? i.limit : 10</span><br><span class="line">        - const lazyload = i.lazyload != &quot;undefined&quot; ? i.lazyload : true</span><br><span class="line">        - const lazyloadClass = lazyload == true ? &quot;lazyload&quot; : &quot;&quot;;</span><br><span class="line">        - const btn = i.btnLazyload != &quot;undefined&quot; ? i.btnLazyload : false</span><br><span class="line">        - const btnLazyloadClass = btn == true ? &quot; btn_album_detail_lazyload&quot; : &quot;&quot;;</span><br><span class="line">        - const imgType = i.url ? &quot; url&quot; : &quot; data&quot;;</span><br><span class="line">        - let dataStr = []</span><br><span class="line">        - const durl = i.url ?? false</span><br><span class="line"><span class="addition">+       - const murl = i.murl ?? false</span></span><br><span class="line">        each item, index in i.album_list</span><br><span class="line">          each iten, indey in item.image</span><br><span class="line">              - let obj = &#123;&#125;</span><br><span class="line">              - obj.url = iten</span><br><span class="line">              - obj.alt = item.content</span><br><span class="line">              - obj.title = item.content</span><br><span class="line">              - obj.address = item.address</span><br><span class="line">              - obj.date = item.date</span><br><span class="line">              - dataStr.push(obj)</span><br><span class="line">        .gallery</span><br><span class="line">          .fj-gallery(data-rowHeight=rowHeight data-limit=limit class=`$&#123;lazyloadClass + btnLazyloadClass + imgType&#125;`)</span><br><span class="line">            if durl</span><br><span class="line">              span.gallery-data=durl</span><br><span class="line">            else</span><br><span class="line">              span.gallery-data=JSON.stringify(dataStr)</span><br><span class="line"><span class="addition">+           if murl</span></span><br><span class="line"><span class="addition">+             span.gallery-data=murl</span></span><br><span class="line">          if btn</span><br><span class="line">            button.gallery-load-more</span><br><span class="line">              span=_p(&#x27;load_more&#x27;)</span><br><span class="line">              i.anzhiyufont.anzhiyu-icon-arrow-down</span><br><span class="line">          else</span><br><span class="line">            #album_detail_gallery_load_more</span><br></pre></td></tr></table></figure></p><h3 id="最后在album-yml添加murl即可"><a href="#最后在album-yml添加murl即可" class="headerlink" title="最后在album.yml添加murl即可"></a>最后在album.yml添加murl即可</h3><p>文件地址 <code>source/_data/album.yml</code><br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    - class_name: 世界各地夕阳与风景</span><br><span class="line">      path_name: /wordScenery</span><br><span class="line">      type: 2</span><br><span class="line">      description: 因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。</span><br><span class="line">      cover: https://bu.dusays.com/2023/10/09/6523a7789ed31.jpg</span><br><span class="line">      top_background: https://jsd.onmicrosoft.cn/gh/Ser-MingShao/HexoPublicStaiciImg/serms/202303271231748.jpg</span><br><span class="line">      rowHeight: 260</span><br><span class="line">      limit: 10</span><br><span class="line">      lazyload: false</span><br><span class="line">      btnLazyload: false</span><br><span class="line">      url: https://img.serms.top/static/js/wordScenery.json</span><br><span class="line"><span class="addition">+     murl: https://memos.serms.top/api/v1/memo?creatorId=1&amp;tag=wordScenery     (这里添加你自己的memos地址)</span></span><br><span class="line">      top_link: /album</span><br><span class="line">      top_btn_text: 返回</span><br><span class="line">      album_list:</span><br><span class="line">        - date: 2022/10/26 01:00:00</span><br><span class="line">          content: 湘潭的一角。</span><br><span class="line">          address: 湖南湘潭</span><br><span class="line">          from: 再吃一口就减肥</span><br><span class="line">          image:</span><br><span class="line">            - https://bu.dusays.com/2023/04/09/64329399db122.webp</span><br><span class="line">        - date: 2022-10-25</span><br><span class="line">          content: 洛阳暴雨后的天空。</span><br><span class="line">          address: 河南洛阳</span><br><span class="line">          from: SerMs</span><br><span class="line">          image:</span><br><span class="line">            - https://bu.dusays.com/2023/04/09/64329399db122.webp</span><br><span class="line">            - https://bu.dusays.com/2023/04/09/64329399db2e1.webp</span><br></pre></td></tr></table></figure></p><h3 id="memos演示"><a href="#memos演示" class="headerlink" title="memos演示"></a>memos演示</h3><p><img src="https://bu.dusays.com/2023/10/16/652ce381ec54e.png" alt=""><br>我这里是有三个细分相册,所以创建memos<code>tag</code>的时候根据细分相册名称来定义的,这里没有强制性要求,自己自定义即可<br><img src="https://bu.dusays.com/2023/10/16/652ce37f4126f.png" alt=""><br>书写格式如上,将你的memosApi放入<span class='p red'>album.yaml</span>文件中,在上文中有说明<br><img src="https://bu.dusays.com/2023/10/16/652ce630a407d.png" alt=""><br>如果不想让图片在memos上展示,可以使用Markdown中代码块的写法,一样适用<br><img src="https://bu.dusays.com/2023/10/16/652ce6b70491f.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
          <category> Hexo </category>
          
          <category> 功能扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/posts/d0edc1ed.html"/>
      <url>/posts/d0edc1ed.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="系统服务管理"><a href="#系统服务管理" class="headerlink" title="系统服务管理"></a>系统服务管理</h2><h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><ul><li>启动服务：systemctl start httpd.service</li><li>关闭服务：systemctl stop httpd.service</li><li>重启服务（不管是否在运行）：systemctl restart httpd.service</li><li>重新载入配置（不中断服务）：systemctl reload httpd.service</li><li>查看运行状态：systemctl status httpd.service</li><li>设置开机启动：systemctl enable httpd.service</li><li>禁止开机启动：systemctl disable httpd.service</li><li>查看系统安装的服务：systemctl list-units —type=service</li></ul><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>列出/home目录下的子目录：ls -l /home<br>列出当前文件夹下所有文件夹及文件大小：ls -lht</p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>显示当前工作目录</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>切换目录： cd /usr/local</p><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>以指定格式显示日期；date ‘+date:%x time:%X’</p><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><p>修改root密码：passwd root</p><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p>普通用户切换到超级用户：su -</p><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>清除屏幕信息</p><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>查看ls命令的帮助信息：man ls</p><h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><ul><li>查看当前运行级别：who -r</li><li>显示用的登录详情：who -buT</li></ul><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>以MB显示内存使用状态：free -m</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>查看系统所有进程：ps -ef<br>查看运行的java进程： ps -ef | grep java</p><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>查看系统当前活跃进程信息</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>创建目录</p><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>分页查看<br>每10行显示一屏查看：more -c -10</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>查看config文件：cat -Ab config</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul><li>删除文件：rm a.txt</li><li>删除文件夹： rm -rf a/</li></ul><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>创建一个文件：touch a.txt</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>将目录a的文件拷贝到目录b: cp -r /home/a /home/b</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>移动或覆盖文件：mv a.txt b.txt</p><h2 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h2><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><ul><li>打包文件夹到单独的文件：tar -cvf /opt/etc.tar /etc</li><li>压缩文件夹到压缩文件（gzip）：tar -zcvf /opt/etc.tar.gz /etc</li><li>压缩文件夹到压缩文件（bzip2）：tar -jcvf /opt/etc.tar.bz2 /etc</li><li>查阅压缩包中内容（gzip）：tar -ztvf /opt/etc.tar.gz /etc</li><li>解压文件到当前目录（gzip）：tar -zxvf /opt/etc.tar.gz</li></ul><h2 id="磁盘和网络管理"><a href="#磁盘和网络管理" class="headerlink" title="磁盘和网络管理"></a>磁盘和网络管理</h2><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>查看磁盘占用情况：df -hT</p><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><p>查看当前网络接口状态</p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><ul><li>查看路由信息：netstat -rn</li><li>查看所有有效TCP连接：netstat -an</li><li>查看系统中启动的监听服务：netstat -tulnp</li><li>查看处于连接状态的系统资源信息：netstat -atunp</li></ul><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>从网络上下载软件</p><h2 id="软件的安装与管理"><a href="#软件的安装与管理" class="headerlink" title="软件的安装与管理"></a>软件的安装与管理</h2><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><ul><li>安装软件包：rpm -ivh nginx-1.12.2-2.el7.x86_64.rpm</li><li>模糊搜索软件包：rpm -qa | grep nginx</li><li>精确查找软件包：rpm -qa nginx</li><li>查询软件包的安装路径：rpm -ql nginx-1.12.2-2.el7.x86_64</li><li>查看软件包的概要信息：rpm -qi nginx-1.12.2-2.el7.x86_64</li><li>验证软件包内容和安装文件是否一致：rpm -V nginx-1.12.2-2.el7.x86_64</li><li>更新软件包：rpm -Uvh nginx-1.12.2-2.el7.x86_64</li><li>删除软件包：rpm -e nginx-1.12.2-2.el7.x86_64</li></ul><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><ul><li>安装软件包： yum install nginx</li><li>检查可以更新的软件包：yum check-update</li><li>更新指定的软件包：yum update nginx</li><li>在资源库中查找软件包信息：yum info nginx*</li><li>列出已经安装的所有软件包：yum info installed</li><li>列出软件包名称：yum list redis*</li><li>模糊搜索软件包：yum search redis</li></ul><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><ul><li>开启防火墙：systemctl start iptables.service</li><li>关闭防火墙：systemctl stop iptables.service</li><li>查看防火墙状态：systemctl status iptables.service</li><li>设置开机启动：systemctl enable iptables.service</li><li>禁用开机启动：systemctl disable iptables.service</li><li>查看filter表的链信息：iptables -L -n</li><li>查看NAT表的链信息：iptables -t nat -L -n</li><li>清除防火墙所有规则：iptables -F;iptables -X;iptables -Z;</li><li>添加过滤规则（开发80端口）：iptables -I INPUT -p tcp —dport 80 -j ACCEPT</li><li>查找规则所做行号：iptables -L INPUT —line-numbers -n</li><li>根据行号删除过滤规则：iptables -D INPUT 1</li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装与部署</title>
      <link href="/posts/53d552cb.html"/>
      <url>/posts/53d552cb.html</url>
      
        <content type="html"><![CDATA[<h2 id="Centos7前置操作"><a href="#Centos7前置操作" class="headerlink" title="Centos7前置操作"></a>Centos7前置操作</h2><h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><p>运行以下命令可以更新系统的软件包和组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><h2 id="安装必要的软件"><a href="#安装必要的软件" class="headerlink" title="安装必要的软件"></a>安装必要的软件</h2><p>安装一些常用的软件和工具，比如 <code>vim</code> 编辑器、<code>net-tools</code>、<code>wget</code> 等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install vim net-tools wget</span><br></pre></td></tr></table></figure><h2 id="设置静态-IP-地址或者配置网络"><a href="#设置静态-IP-地址或者配置网络" class="headerlink" title="设置静态 IP 地址或者配置网络"></a>设置静态 IP 地址或者配置网络</h2><p> 修改 <code>/etc/sysconfig/network-scripts/ifcfg-&lt;interface&gt;</code> 文件来配置网络接口。</p><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><p>根据需要打开或关闭防火墙端口： 启用防火墙：<code>sudo systemctl start firewalld</code> 禁用防火墙：<code>sudo systemctl stop firewalld</code></p><h2 id="更新内核（可选）："><a href="#更新内核（可选）：" class="headerlink" title="更新内核（可选）："></a>更新内核（可选）：</h2><p> 更新内核可以提高系统的稳定性和安全性。可以使用以下命令来更新内核：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install kernel</span><br></pre></td></tr></table></figure><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费），EE 即企业版，强调安全，付费使用。<br>Docker CE 分为 stable 、test 和 nightly 三个更新频道。</p><blockquote><p>本教程以Centos7为教程，其他的系统大同小异，大家可做参考</p><h2 id="Centos7安装Docker"><a href="#Centos7安装Docker" class="headerlink" title="Centos7安装Docker"></a>Centos7安装Docker</h2></blockquote><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装 Docker</p><p><strong>所以必须是Centos7这个版本，低于这个版本就会出问题！</strong></p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>如果之前安装过旧版本的 <code>dokcer</code> ,可以使用下面的命令卸载,(建议不管你有没有安装都跑一次卸载)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><h3 id="安装Yum工具"><a href="#安装Yum工具" class="headerlink" title="安装Yum工具"></a>安装Yum工具</h3><p>首先需要大家虚拟机联网，安装yum工具,此文不做说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装必要的一些系统工具</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 --skip-broken</span><br><span class="line">或</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><br><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>建议直接使用清华源,阿里源最近不知道出了啥问题, 直接访问超时拉取不到docker-ce</p></div></p><h3 id="阿里源"><a href="#阿里源" class="headerlink" title="阿里源"></a>阿里源</h3><p>将本地镜像源更换成阿里源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置docker镜像源</span></span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 替换docker源</span></span><br><span class="line">sed -i <span class="string">&#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>使用阿里云安装Docker-ce报错解决方案更换清华源</p><p><img src="https://bu.dusays.com/2024/03/13/65f10ff492323.png" alt="使用阿里云docker-ce报错"></p><h3 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sed -i <span class="string">&#x27;s+https://download.docker.com+https://mirrors.tuna.tsinghua.edu.cn/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>可能会比较久，所以一定要先执行上一步，有了镜像可以快很多！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新并安装Docker-CE</span></span><br><span class="line"><span class="built_in">sudo</span> yum makecache fast</span><br><span class="line"><span class="built_in">sudo</span> yum -y install docker-ce</span><br></pre></td></tr></table></figure></p><h2 id="Docker的使用"><a href="#Docker的使用" class="headerlink" title="Docker的使用"></a>Docker的使用</h2><h3 id="尝试启动docker"><a href="#尝试启动docker" class="headerlink" title="尝试启动docker"></a>尝试启动docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start docker  </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 停止docker服务</span></span><br><span class="line">systemctl stop docker  </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker  </span><br></pre></td></tr></table></figure><h3 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="将docker设置开机启动"><a href="#将docker设置开机启动" class="headerlink" title="将docker设置开机启动"></a>将docker设置开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><h3 id="查看是否设置成功"><a href="#查看是否设置成功" class="headerlink" title="查看是否设置成功"></a>查看是否设置成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files | grep <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/10/18/652fa7cd12135.png" alt="docker.server设置成功" style="width:55;"/></div><span class="image-caption">docker.server设置成功</span></div><h3 id="关闭开机启动"><a href="#关闭开机启动" class="headerlink" title="关闭开机启动"></a>关闭开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> docker.service</span><br></pre></td></tr></table></figure><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>docker官方镜像仓库网速较<strong>差</strong>（就像我们去访问github一样），我们需要设置<strong>国内镜像</strong>服务，首推阿里云！</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://img.alicdn.com/tfs/TB13DzOjXP7gK0jSZFjXXc5aXXa-212-48.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">阿里云Docker镜像服务</div>            <div class="tag-link-sitename"> 阿里云 </div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>配置完成需重载 daemon 并重启 docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>到这里您的<code>docker</code>就已经安装好了</p><h1 id="Docker-镜像常用命令"><a href="#Docker-镜像常用命令" class="headerlink" title="Docker 镜像常用命令"></a>Docker 镜像常用命令</h1><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>docker search java</p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><ul><li>docker pull java:8</li><li>docker pull macro/eureka-server:0.0.1</li></ul><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><p>docker images</p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><ul><li>docker rmi java</li><li>docker rmi -f java </li><li>docker rmi -f $(docker images)</li></ul><h2 id="Docker-容器常用命令"><a href="#Docker-容器常用命令" class="headerlink" title="Docker 容器常用命令"></a>Docker 容器常用命令</h2><h3 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h3><p>docker run -d -p 91:80 nginx</p><h3 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h3><p>docker ps</p><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><p>docker stop $ContainerId</p><h3 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h3><p>docker kill $ContainerId</p><h3 id="启动已停止的容器"><a href="#启动已停止的容器" class="headerlink" title="启动已停止的容器"></a>启动已停止的容器</h3><p>docker start $ContainerId</p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><ul><li>docker inspect —format “” $ContainerId</li><li>nsenter —target “$pid” —mount —uts —ipc —net —pid</li></ul><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><ul><li>docker rm $ContainerId</li><li>docker rm -f $(docker ps -a -q)</li></ul><h3 id="查看启动错误日志"><a href="#查看启动错误日志" class="headerlink" title="查看启动错误日志"></a>查看启动错误日志</h3><p>docker logs $ContainerIdName(或者$ContainerId)</p><h3 id="查看容器的IP地址（172-17-0-）"><a href="#查看容器的IP地址（172-17-0-）" class="headerlink" title="查看容器的IP地址（172.17.0.*）"></a>查看容器的IP地址（172.17.0.*）</h3><p><code>dockerdocker inspect --format &#39;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#39; $ContainerId</code></p><h3 id="同步宿主机时间到容器"><a href="#同步宿主机时间到容器" class="headerlink" title="同步宿主机时间到容器"></a>同步宿主机时间到容器</h3><p>docker cp /etc/localtime $ContainerName:/etc/</p><h3 id="在宿主机查看docker使用cpu、内存、网络、io情况"><a href="#在宿主机查看docker使用cpu、内存、网络、io情况" class="headerlink" title="在宿主机查看docker使用cpu、内存、网络、io情况"></a>在宿主机查看docker使用cpu、内存、网络、io情况</h3><ul><li>查看指定容器情况：docker stats $ContainerName</li><li>查看所有容器情况：docker stats -a</li></ul><h3 id="进入docker内部的bash"><a href="#进入docker内部的bash" class="headerlink" title="进入docker内部的bash"></a>进入docker内部的bash</h3><p>docker exec -it $ContainerName /bin/bash</p><h2 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h2><h3 id="Docker-Registry-2-0搭建"><a href="#Docker-Registry-2-0搭建" class="headerlink" title="Docker Registry 2.0搭建"></a>Docker Registry 2.0搭建</h3><p>docker run -d -p 5000:5000 —restart=always —name registry2 registry:2</p><h3 id="推送到私有仓库"><a href="#推送到私有仓库" class="headerlink" title="推送到私有仓库"></a>推送到私有仓库</h3><p>docker push localhost:5000/macro/eureka-server:0.0.1</p><h3 id="修改镜像标签"><a href="#修改镜像标签" class="headerlink" title="修改镜像标签"></a>修改镜像标签</h3><p>docker tag macro/eureka-server:0.0.1 localhost:5000/macro/eureka-server:0.0.1</p><h2 id="使用maven构建Docker镜像"><a href="#使用maven构建Docker镜像" class="headerlink" title="使用maven构建Docker镜像"></a>使用maven构建Docker镜像</h2><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><ul><li>command：mvn clean package docker:build</li><li>tip：<br>Linux服务器需要开启远程api:vi /usr/lib/systemd/system/docker.service<br>修改为：ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock   </li></ul><h3 id="推送镜像到私有仓库"><a href="#推送镜像到私有仓库" class="headerlink" title="推送镜像到私有仓库"></a>推送镜像到私有仓库</h3><ul><li>command：mvn clean package docker:build -DpushImage</li><li>tip：<br>pom.xml修改<imageName>192.168.1.71:5000/macro/${project.artifactId}:${project.version}</imageName></li><li>tip：<br>docker要支持http:echo ‘{ “insecure-registries”:[“39.98.190.128:5000”] }’ &gt; /etc/docker/daemon.json </li></ul><h3 id="修改Docker镜像存放位置"><a href="#修改Docker镜像存放位置" class="headerlink" title="修改Docker镜像存放位置"></a>修改Docker镜像存放位置</h3><ol><li>查看Docker的存放位置：docker info | grep “Docker Root Dir”（默认为/var/lib/docker）</li><li>关闭Docker服务：systemctl stop docker</li><li>移动目录到目标路径：mv /var/lib/docker /root/data/docker</li><li>建立软连接：ln -s /root/data/docker /var/lib/docker</li></ol><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>下载地址：<a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></li><li>安装地址：/usr/local/bin/docker-compose</li><li>设置为可执行：sudo chmod +x /usr/local/bin/docker-compose</li><li>测试是否安装成功：docker-compose —version</li></ol><h3 id="安装命令补全工具"><a href="#安装命令补全工具" class="headerlink" title="安装命令补全工具"></a>安装命令补全工具</h3><p>sudo curl -L <a href="https://raw.githubusercontent.com/docker/compose/1.22.0/contrib/completion/bash/docker-compose">https://raw.githubusercontent.com/docker/compose/1.22.0/contrib/completion/bash/docker-compose</a> -o /etc/bash_completion.d/docker-compose</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>构建、创建、启动相关容器：docker-compose up</li><li>列出所有容器：docker-compose ps</li><li>删除指定服务的容器：docker-compose rm eureka</li><li>对容器进行动态扩容：docker-compose scale eureka=3</li><li>停止相关容器：docker-compose stop eureka</li><li>启动相关容器：docker-compose start eureka</li></ul><h3 id="编排SpringCloud微服务"><a href="#编排SpringCloud微服务" class="headerlink" title="编排SpringCloud微服务"></a>编排SpringCloud微服务</h3><h4 id="所使用到的工程"><a href="#所使用到的工程" class="headerlink" title="所使用到的工程"></a>所使用到的工程</h4><ul><li>eureka-server</li><li>hello-service</li><li>feign-consumer</li><li>api-gateway</li></ul><h4 id="编排模式"><a href="#编排模式" class="headerlink" title="编排模式"></a>编排模式</h4><ol><li>编排SpringCloud微服务：见eureka-server/docker-res/docker-compose.yml</li><li>简化SpringCloud微服务编排：见eureka-server/docker-res/docker-compose-simple.yml</li><li>编排高可用的注册中心：见eureka-server/docker-res/docker-compose-eureka.yml</li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker理论篇</title>
      <link href="/posts/359e3d64.html"/>
      <url>/posts/359e3d64.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识Docker"><a href="#初识Docker" class="headerlink" title="初识Docker"></a>初识Docker</h1><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li><li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul><h3 id="应用部署的环境问题"><a href="#应用部署的环境问题" class="headerlink" title="应用部署的环境问题"></a>应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li><p>依赖关系复杂，容易出现兼容性问题</p></li><li><p>开发、测试、生产环境有差异</p></li></ul><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142207947.png" alt=""></p><p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p><h3 id="Docker解决依赖兼容问题"><a href="#Docker解决依赖兼容问题" class="headerlink" title="Docker解决依赖兼容问题"></a>Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p><p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p></li><li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p></li></ul><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142209399.png" alt=""></p><p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p><p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p><h3 id="Docker解决操作系统环境差异"><a href="#Docker解决操作系统环境差异" class="headerlink" title="Docker解决操作系统环境差异"></a>Docker解决操作系统环境差异</h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206694.png" alt="image-20210731143401460"></p><p>结构包括：</p><ul><li>计算机硬件：例如CPU、内存、磁盘等</li><li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li></ul><p>应用于计算机交互的流程如下：</p><p>1）应用调用操作系统应用（函数库），实现各种功能</p><p>2）系统函数库是对内核指令集的封装，会调用内核指令</p><p>3）内核指令操作计算机硬件</p><p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206991.png" alt="image-20210731144304990"></p><p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206755.png" alt="image-20210731144458680"></p><p>Docker如何解决不同系统环境的问题？</p><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul><p>如图：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206761.png" alt="image-20210731144820638"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><p>Docker如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul><p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ul><h2 id="Docker和虚拟机的区别"><a href="#Docker和虚拟机的区别" class="headerlink" title="Docker和虚拟机的区别"></a>Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p><p>两者有什么差异呢？</p><p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p><p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206154.png" alt="image-20210731145914960"></p><p>对比来看：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206714.png" alt="image-20210731152243765"></p><p>小结：</p><p>Docker和虚拟机的差异：</p><ul><li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p></li><li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p></li></ul><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><p>Docker中有几个重要的概念：</p><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p><p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p><p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p><p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p><p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206766.png" alt="image-20210731153059464"></p><p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p><h3 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p><ul><li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p></li><li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p></li></ul><p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206943.png" alt="image-20210731153743354"></p><h3 id="Docker架构-1"><a href="#Docker架构-1" class="headerlink" title="Docker架构"></a>Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p><p>Docker是一个CS架构的程序，由两部分组成：</p><ul><li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p></li><li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p></li></ul><p>如图：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206344.png" alt="image-20210731154257653"></p><blockquote><p>总结:</p><p>第一步，当我们客户端发起指令，去dockerhub或者私有仓库去拉取指定的镜像，把该镜像存储在当前Linux系统中的本地镜像中</p><p>第二不，由客户端发起指令，创建容器的指令，去基于本地镜像中的指定镜像，然后通过创建容器的命令，从而生成指定的容器，</p></blockquote><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>镜像：</p><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul><p>容器：</p><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul><p>Docker结构：</p><ul><li><p>服务端：接收命令或远程请求，操作镜像或容器</p></li><li><p>客户端：发送命令或者请求到Docker服务端</p></li></ul><p>DockerHub：</p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li></ul><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此我们在CentOS下安装Docker</p><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。</p><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><h4 id="检查centos7的内核命令"><a href="#检查centos7的内核命令" class="headerlink" title="检查centos7的内核命令"></a>检查centos7的内核命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r </span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206962.png" alt="1567261735176"></p><h4 id="centos7的ip地址"><a href="#centos7的ip地址" class="headerlink" title="centos7的ip地址"></a>centos7的ip地址</h4><p>查看ip地址命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206915.png" alt="1567262080798"></p><h4 id="更改静态ip地址"><a href="#更改静态ip地址" class="headerlink" title="更改静态ip地址"></a>更改静态ip地址</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1、找到配置文件</span><br><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">vi ifcfg-ens33</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPADDR=192.168.200.132</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.200.2</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=b8fd5718-51f5-48f8-979b-b9f1f7a5ebf2</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重启网卡</span><br><span class="line">service network restart</span><br><span class="line"></span><br><span class="line">测试网卡</span><br><span class="line">ping www.baidu.com 如果有字节输出，则表示网络正常</span><br></pre></td></tr></table></figure><h3 id="Docker安装与启动："><a href="#Docker安装与启动：" class="headerlink" title="Docker安装与启动："></a>Docker安装与启动：</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、yum 包更新到最新,需要几分钟时间(注意:也可以直接跨过)</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum update</span></span><br><span class="line"><span class="comment"># 2、作用：安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br><span class="line"><span class="comment"># 3、 设置yum源</span></span><br><span class="line"><span class="comment"># 3.1、方案一：使用ustc的（默认的）</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum-config-manager --add-repo http://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># 3.2、方案二：使用阿里云（推荐使用）</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># 4、 安装docker；出现输入的界面都按 y</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">yum install -y docker-ce</span></span><br><span class="line"><span class="comment"># 5、 查看docker版本</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><h4 id="设置镜像加速器"><a href="#设置镜像加速器" class="headerlink" title="设置镜像加速器"></a>设置镜像加速器</h4><p>默认的镜像是ustc，而ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。<br><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>1、 编辑文件/etc/docker/daemon.json</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行如下命令：</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">/etc/docker  表示创建一个文件夹</span></span><br><span class="line"><span class="comment">#如果有该文件则进入编辑状态，如果没有，则创建该文件然后进入编辑状态</span></span><br><span class="line"><span class="attr">vi</span> <span class="string">/etc/docker/daemon.json  </span></span><br></pre></td></tr></table></figure><p>2、在当前文件中加入阿里云的加速器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: <span class="string">[&quot;https://icw7lzsr.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">注意：[“自己的镜像加速器地址”]</span></span><br></pre></td></tr></table></figure><p>注意：docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p><p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><p>4、重启操作</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">systemctl daemon-reload</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">systemctl restart docker</span></span><br></pre></td></tr></table></figure><h4 id="Docker启动与停止命令"><a href="#Docker启动与停止命令" class="headerlink" title="Docker启动与停止命令"></a>Docker启动与停止命令</h4><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker服务：</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start docker</span></span><br><span class="line"><span class="comment"># 停止docker服务：</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">stop docker</span></span><br><span class="line"><span class="comment"># 重启docker服务：</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart docker</span></span><br><span class="line"><span class="comment"># 查看docker服务状态：</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">status docker</span></span><br><span class="line"><span class="comment"># 设置开机启动docker服务：</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">enable docker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#查看防火墙状态</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">status firewalld.service</span></span><br><span class="line"><span class="comment">#停止防火墙--临时停止</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">stop firewalld.service</span></span><br><span class="line"><span class="comment">#停止防火墙-终止</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">disable firewalld.service</span></span><br><span class="line"><span class="comment">#启动防火墙</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start firewalld.service</span></span><br></pre></td></tr></table></figure><h1 id="Docker的基本操作"><a href="#Docker的基本操作" class="headerlink" title="Docker的基本操作"></a>Docker的基本操作</h1><h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="镜像名称"><a href="#镜像名称" class="headerlink" title="镜像名称"></a>镜像名称</h3><p>首先来看下镜像的名称组成：</p><ul><li>镜名称一般分两部分组成：[repository]:[tag]。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><p>如图：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206812.png" alt="image-20210731155141362"></p><p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p>常见的镜像操作命令如图：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206771.png" alt="image-20210731155649535"></p><h4 id="常用镜像命令集："><a href="#常用镜像命令集：" class="headerlink" title="常用镜像命令集："></a>常用镜像命令集：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看本地镜像</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">images </span></span><br><span class="line"><span class="comment"># 如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">search 镜像名称</span></span><br><span class="line"><span class="comment"># 拉取镜像就是从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本 </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull 镜像名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 可以按照镜像id删除镜像，命令如下：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rmi 镜像id</span></span><br><span class="line"><span class="comment"># 删除所有镜像,注意：包含着docker images -q的符号是波浪号那个键</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rmi `docker images -q`</span></span><br></pre></td></tr></table></figure><h4 id="镜像迁移与备份命令："><a href="#镜像迁移与备份命令：" class="headerlink" title="镜像迁移与备份命令："></a>镜像迁移与备份命令：</h4><p>其中涉及到的命令有： </p><p>​    docker commit 将容器保存为镜像 </p><p>​    docker save 将镜像备份为tar文件 </p><p>​    docker load 根据tar文件恢复为镜像</p><p>容器保存为镜像命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令形式：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">commit 现有容器名称  镜像名称</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：该容器必须是停止状态。并且当前本地镜像中没有该镜像名称</p></blockquote><p>将镜像备份成tar文件命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令形式：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">save –o tar文件名 镜像名</span></span><br><span class="line"><span class="comment">#-o 输出到的文件</span></span><br></pre></td></tr></table></figure><p>根据tar文件恢复为镜像命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令形式：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">load -i tar文件名 </span></span><br><span class="line"><span class="comment">#-i 输入的文件</span></span><br></pre></td></tr></table></figure><p>修改镜像名字：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker tag 镜像ID 经项目名字:镜像版本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker</span> <span class="string">tag 51086ed63d8c nginx:1.23.1</span></span><br></pre></td></tr></table></figure><h3 id="案例1-拉取、查看镜像"><a href="#案例1-拉取、查看镜像" class="headerlink" title="案例1-拉取、查看镜像"></a>案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p><p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142207181.png" alt="image-20210731155844368"></p><p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206668.png" alt="image-20210731155856199"></p><p>3）通过命令：docker images 查看拉取到的镜像</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206367.png" alt="image-20210731155903037"></p><h3 id="案例2-保存、导入镜像"><a href="#案例2-保存、导入镜像" class="headerlink" title="案例2-保存、导入镜像"></a>案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p><p>1）利用docker xx —help命令查看docker save和docker load的语法</p><p>例如，查看save命令用法，可以输入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206308.png" alt=""></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></table></figure><p>2）使用docker save导出镜像到磁盘 </p><p>运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206176.png" alt=""></p><p>3）使用docker load加载镜像</p><p>先删除本地的nginx镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure><p>然后运行命令，加载本地文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206359.png" alt=""></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>需求：去DockerHub搜索并拉取一个Redis镜像</p><p>目标：</p><p>1）去DockerHub搜索Redis镜像</p><p>2）查看Redis镜像的名称和版本</p><p>3）利用docker pull命令拉取镜像</p><p>4）利用docker save命令将 redis:latest打包为一个redis.tar包</p><p>5）利用docker rmi 删除本地的redis:latest</p><p>6）利用docker load 重新加载 redis.tar文件</p><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><p>容器操作的命令如图：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206251.png" alt=""></p><p>容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul><p>容器，也是docker中的核心概念，容器是由镜像运行产生的运行实例。镜像和容器的关系，就如同Java语言中类和对象的关系。</p><p>Docker提供的关于容器的操作有：<br>        查看容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看正在运行的容器使用命令</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">ps</span></span><br><span class="line"><span class="comment">#查看所有容器使用命令</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">ps -a </span></span><br></pre></td></tr></table></figure><p>​        创建容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建并运行一个容器，处于运行状态</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run </span></span><br></pre></td></tr></table></figure><p>​        进入容器内部</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it 容器名称 bash</span></span><br></pre></td></tr></table></figure><p>​        启动容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">start 容器名称[或者容器ID]</span></span><br></pre></td></tr></table></figure><p>​        停止容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">stop 容器名称[或者容器ID]</span></span><br></pre></td></tr></table></figure><p>​        文件拷贝</p><p>将linux宿主机中的文件拷贝到容器内可以使用命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一步， 在Linux中创建一个文件abc.txt</span></span><br><span class="line"><span class="attr">touch</span> <span class="string">abc.txt</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#第二步，复制abc.txt到nginx的容器的   /表示根目录</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">cp 文件名称 容器名称:/ </span></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">cp abc.txt nginx:/</span></span><br><span class="line"><span class="comment">#第三步， 进入nginx容器</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">exec -it nginx /bin/bash</span></span><br><span class="line"><span class="comment"># 第四步，查看容器 / 目录下文件 是否有该文件</span></span><br><span class="line"><span class="attr">ls</span></span><br></pre></td></tr></table></figure><blockquote><p>docker这个命令是在linux系统中安装的，所以说容器中没有docker这个命令</p></blockquote><p>将文件从容器内拷贝出来到linux宿主机使用命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker cp 容器名称:容器目录 需要拷贝的文件或目录</span></span><br><span class="line"><span class="comment">#进入容器后创建文件cba.txt</span></span><br><span class="line"><span class="attr">touch</span> <span class="string">cba.txt</span></span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="attr">exit</span></span><br><span class="line"><span class="comment"># 在Linux宿主机器执行复制；将容器mycentos2的/cba.txt文件复制到 宿主机器的/root目录下</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">cp nginx:/cba.txt  /root</span></span><br></pre></td></tr></table></figure><p>​    查看容器ip地址</p><p>可以通过以下命令查看容器运行的各种数据 docker inspect 容器名称（容器ID） </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在linux宿主机下查看 nginx 的ip </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">inspect nginxclear</span></span><br></pre></td></tr></table></figure><p>​        <img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206486.png" alt=""></p><p>删除容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除指定的容器：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rm 容器名称（容器ID） </span></span><br><span class="line"><span class="comment">#删除所有容器：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rm `docker ps -a -q` </span></span><br></pre></td></tr></table></figure><blockquote><p>注意：只能删除停止状态下的容器</p></blockquote><p>暂停容器：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#让一个运行的容器暂停</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pause nginx</span></span><br></pre></td></tr></table></figure><p>让一个容器从暂停状态恢复运行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">unpause nginx</span></span><br></pre></td></tr></table></figure><h3 id="案例-创建并运行一个容器"><a href="#案例-创建并运行一个容器" class="headerlink" title="案例-创建并运行一个容器"></a>案例-创建并运行一个容器</h3><p>==可以基于已有的镜像来创建和启动容器==，创建与启动容器使用命令：docker run<br>参数说明：<br>-i：表示运行容器<br>-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。（==其实加入该命令就表示是创建的是交互式容器==）<br>—name :为创建的容器命名。</p><p>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。(==其实就是目录挂载==)<br>-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。(==其实加上该命令表示就是创建的是守护式容器==)<br>-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射(==加上该命令可以被window系统访问该容器==)</p><h4 id="1）交互式容器-前台启动"><a href="#1）交互式容器-前台启动" class="headerlink" title="1）交互式容器(前台启动)"></a>1）交互式容器(前台启动)</h4><p>以交互式方式创建并启动容器，启动完成后，直接进入当前容器。使用exit命令退出容器。需要注意的是以此种方式启动容器，如果退出容器，则容器会进入停止状态。</p><p>创建并运行nginx容器的命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -it --name=容器名称 -p 80:80  镜像名称  bash</span></span><br></pre></td></tr></table></figure><h4 id="2）守护式容器-后台启动"><a href="#2）守护式容器-后台启动" class="headerlink" title="2）守护式容器(后台启动)"></a>2）守护式容器(后台启动)</h4><p>创建一个守护式容器；如果对于一个需要长期运行的容器来说，我们可以创建一个守护式容器。命令如下（容器名称不能重复）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建并启动守护式容器</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=容器名称 镜像名称</span></span><br><span class="line"><span class="comment">#登录进入容器命令为：</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">exec -it 容器名称 (或者 容器ID)  /bin/bash</span></span><br><span class="line"><span class="comment">#exit退出时，容器不会停止</span></span><br></pre></td></tr></table></figure><h4 id="3）-创建Nginx容器"><a href="#3）-创建Nginx容器" class="headerlink" title="3） 创建Nginx容器"></a>3） 创建Nginx容器</h4><p>命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=mynginx -p 80:80 nginx </span></span><br></pre></td></tr></table></figure><p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p><p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142206747.png" alt=""></p><blockquote><p>宿主机和容器的关系解析</p><p>1、window系统和虚拟机中的centos系统：<br>   在window系统上安装了虚拟机vmware，在vmware中安装了centos系统。<br>宿主机就是window系统电脑， 虚拟机就是centos<br>2、docker容器和linux(centos)：<br>   linux是宿主机，docker是容器，也就是说docker寄存在linux系统上</p></blockquote><h3 id="案例-进入容器，修改文件"><a href="#案例-进入容器，修改文件" class="headerlink" title="案例-进入容器，修改文件"></a>案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p><p><strong>提示</strong>：进入容器要用到docker exec命令。</p><p><strong>步骤</strong>：</p><p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mn bash</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><p>docker exec ：进入容器内部，执行一个命令</p></li><li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p></li><li><p>mn ：要进入的容器的名称</p></li><li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p></li></ul><p>2）进入nginx的HTML所在目录 /usr/share/nginx/html</p><p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205497.png" alt=""></p><p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p><p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p><p>我们执行命令，进入该目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure><p> 查看目录下文件：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205187.png" alt=""></p><p>3）修改index.html的内容</p><p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#传智教育欢迎您#g&#x27;</span> -e <span class="string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure><p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101，即可看到结果：">http://192.168.150.101，即可看到结果：</a></p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205717.png" alt=""></p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>docker run命令的常见参数有哪些？</p><ul><li>—name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p>查看容器日志的命令：</p><ul><li>docker logs</li><li>添加 -f 参数可以持续查看日志</li></ul><p>查看容器状态：</p><ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已经停止的</li></ul><h2 id="数据卷（容器数据管理）"><a href="#数据卷（容器数据管理）" class="headerlink" title="数据卷（容器数据管理）"></a>数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p><p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205309.png" alt=""></p><p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p><h3 id="什么是数据卷"><a href="#什么是数据卷" class="headerlink" title="什么是数据卷"></a>什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142208979.png" alt=""></p><p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p><p>这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了</p><h3 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -di \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 8080:80 \</span><br><span class="line">  nginx </span><br></pre></td></tr></table></figure><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li></ul><h3 id="案例-给nginx挂载数据卷"><a href="#案例-给nginx挂载数据卷" class="headerlink" title="案例-给nginx挂载数据卷"></a>案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p><p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p><p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p><p>步骤：</p><p>1、 创建容器并挂载数据卷到容器内的HTML目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在Linux的root目录下创建一个html文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> html</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建nginx容器并且目录挂载</span></span><br><span class="line"> docker run -di --name=mn -v /root/html/:/usr/share/nginx/html -p 80:80 nginx</span><br></pre></td></tr></table></figure><p>2、访问nginx</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205611.png" alt=""></p><p>发现展示的页面是403，这不是报错，而是因为我们nginx容器中的/usr/share/nginx/html中并没有任何html文件导致的。所以我们要执行第三步</p><p>3、从本地的nginx中找一个index.html存储到Linux系统中的/root/html文件夹中即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传index.html到/root/html中</span></span><br></pre></td></tr></table></figure><p>4、再访问nginx</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205782.png" alt=""></p><h3 id="案例-给MySQL挂载本地目录"><a href="#案例-给MySQL挂载本地目录" class="headerlink" title="案例-给MySQL挂载本地目录"></a>案例-给MySQL挂载本地目录</h3><p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p><p>实现思路如下：</p><p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p><p>2）创建目录/tmp/mysql/data</p><p>3）创建目录/tmp/mysql/conf，将课前资料提供的hmy.cnf文件上传到/tmp/mysql/conf</p><p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p><p>① 挂载/tmp/mysql/data到mysql容器内数据存储目录</p><p>② 挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件</p><p>③ 设置MySQL密码</p><p>命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建目录：</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">-p  /tmp/mysql/conf</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">-p  /tmp/mysql/data</span></span><br><span class="line"><span class="comment">#创建容器</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run \</span></span><br><span class="line"><span class="string"> --name=mysql \</span></span><br><span class="line"><span class="string"> -e MYSQL_ROOT_PASSWORD=root \</span></span><br><span class="line"><span class="string"> -p 3306:3306 \</span></span><br><span class="line"><span class="string"> -v /tmp/mysql/data:/var/lib/mysql \</span></span><br><span class="line"><span class="string"> -v /tmp/mysql/conf:/etc/mysql/conf.d \</span></span><br><span class="line"><span class="string"> -di \</span></span><br><span class="line"><span class="string"> mysql:5.7</span></span><br><span class="line"><span class="comment">#上传资料中的hmy.cnf到mysql容器中的/etc/mysql/conf.d文件夹下</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#最后测试mysql</span></span><br></pre></td></tr></table></figure><h1 id="Dockerfile自定义镜像"><a href="#Dockerfile自定义镜像" class="headerlink" title="Dockerfile自定义镜像"></a>Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p><p>而要自定义镜像，就必须先了解镜像的结构才行。</p><h2 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>我们以MySQL为例，来看看镜像的组成结构：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142208279.png" alt=""></p><p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><p>我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="Dockerfile语法"><a href="#Dockerfile语法" class="headerlink" title="Dockerfile语法"></a>Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p><p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p><p>而描述上述信息的文件就是Dockerfile文件。</p><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205843.png" alt="image-20210731180321133"></p><p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><h2 id="构建Java项目"><a href="#构建Java项目" class="headerlink" title="构建Java项目"></a>构建Java项目</h2><h3 id="基于Ubuntu构建Java项目"><a href="#基于Ubuntu构建Java项目" class="headerlink" title="基于Ubuntu构建Java项目"></a>基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li><p>步骤1：新建一个空文件夹docker-demo</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205826.png" alt=""></p></li><li><p>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142208629.png" alt=""></p></li><li><p>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205113.png" alt=""></p></li><li><p>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205675.png" alt=""></p><p>其中的内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="comment">#最终使用的是这行</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>步骤5：进入docker-demo</p><p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p></li><li><p>步骤6：运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .</span><br></pre></td></tr></table></figure></li><li><p>创建并运行当前容器</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=javaweb -p 8090:8090 javaweb:1.0</span></span><br></pre></td></tr></table></figure><p>最后访问 <a href="http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip">http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</a></p><h3 id="基于java8构建Java项目"><a href="#基于java8构建Java项目" class="headerlink" title="基于java8构建Java项目"></a>基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p><p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p><p>实现思路如下：</p><ul><li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p></li><li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p></li><li><p>③ 编写Dockerfile文件：</p><ul><li><p>a ）基于java:8-alpine作为基础镜像</p></li><li><p>b ）将app.jar拷贝到镜像中</p></li><li><p>c ）暴露端口</p></li><li><p>d ）编写入口ENTRYPOINT</p><p>内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>④ 使用docker build命令构建镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t javaweb:2.0 .</span><br></pre></td></tr></table></figure><ul><li>⑤ 使用docker run创建容器并运行</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=javaweb -p 8090:8090 javaweb:2.0</span></span><br></pre></td></tr></table></figure><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>小结：</p><ol><li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p></li></ol><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205410.png" alt=""></p><h2 id="初识DockerCompose"><a href="#初识DockerCompose" class="headerlink" title="初识DockerCompose"></a>初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version<span class="punctuation">:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> services<span class="punctuation">:</span></span><br><span class="line">  mysql<span class="punctuation">:</span></span><br><span class="line">    image<span class="punctuation">:</span> mysql<span class="punctuation">:</span><span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment<span class="punctuation">:</span></span><br><span class="line">     MYSQL_ROOT_PASSWORD<span class="punctuation">:</span> <span class="number">123</span> </span><br><span class="line">    volumes<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span><br><span class="line">  web<span class="punctuation">:</span></span><br><span class="line">    build<span class="punctuation">:</span> .</span><br><span class="line">    ports<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul><p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p><h2 id="安装DockerCompose"><a href="#安装DockerCompose" class="headerlink" title="安装DockerCompose"></a>安装DockerCompose</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。它<strong>是一个定义和运行多容器的</strong> <strong>docker应用工具</strong>。使用compose，你能通过YMAL文件配置你自己的服务，然后通过一个命令，你能使用配置文件 创建和运行所有的服务。</p><h4 id="安装DockerCompose-1"><a href="#安装DockerCompose-1" class="headerlink" title="安装DockerCompose"></a>安装DockerCompose</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">国内资源(建议)</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置文件可执行权限</span> </span><br><span class="line">chmod +x /usr/local/bin/docker-compose </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本信息</span> </span><br><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure><h2 id="部署微服务集群"><a href="#部署微服务集群" class="headerlink" title="部署微服务集群"></a>部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p><p><strong>实现思路</strong>：</p><p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p><p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p><p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p><p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p><p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p><h3 id="compose文件"><a href="#compose文件" class="headerlink" title="compose文件"></a>compose文件</h3><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205112.png" alt=""></p><p>内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:1.4.1</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MODE:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span></span><br><span class="line">  <span class="attr">userservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">  <span class="attr">orderservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./gateway</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10010:10010&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到，其中包含5个service服务：</p><ul><li><code>nacos</code>：作为注册中心和配置中心<ul><li><code>image: nacos/nacos-server:1.4.1</code>： 基于nacos/nacos-server镜像构建</li><li><code>environment</code>：环境变量<ul><li><code>MODE: standalone</code>：单点模式启动</li></ul></li><li><code>ports</code>：端口映射，这里暴露了8848端口</li></ul></li><li><code>mysql</code>：数据库<ul><li><code>image: mysql:5.7</code>：镜像版本是mysql:5.7</li><li><code>environment</code>：环境变量<ul><li><code>MYSQL_ROOT_PASSWORD: root</code>：设置数据库root账户的密码为root</li></ul></li><li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li></ul></li><li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li></ul><p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205839.png" alt=""></p><p>查看微服务目录，可以看到都包含Dockerfile文件：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205404.png" alt=""></p><p>内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure><h3 id="修改微服务配置"><a href="#修改微服务配置" class="headerlink" title="修改微服务配置"></a>修改微服务配置</h3><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p><p>如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># nacos服务地址</span></span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p><p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 服务打包的最终名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包后：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142204021.png" alt=""></p><h3 id="拷贝jar包到部署目录"><a href="#拷贝jar包到部署目录" class="headerlink" title="拷贝jar包到部署目录"></a>拷贝jar包到部署目录</h3><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p><p>user-service：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142204139.png" alt=""></p><p>order-service：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205522.png" alt=""></p><p>gateway：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142205385.png" alt=""></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。</p><p>上传到任意目录：</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142204879.png" alt=""></p><p>部署：</p><p>进入cloud-demo目录，然后运行下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>==注意：最后要把三个服务的容器重新启动==</p><h1 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h1><h2 id="搭建私有镜像仓库"><a href="#搭建私有镜像仓库" class="headerlink" title="搭建私有镜像仓库"></a>搭建私有镜像仓库</h2><h4 id="私有仓库搭建与配置"><a href="#私有仓库搭建与配置" class="headerlink" title="私有仓库搭建与配置"></a><strong>私有仓库搭建与配置</strong></h4><p>Docker官方的Docker hub（<a href="https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像">https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像</a> 到本地，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜 像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像。 </p><p>私有仓库搭建步骤：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、拉取私有仓库镜像 </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull registry </span></span><br><span class="line"><span class="comment"># 2、启动私有仓库容器 </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=registry -p 5000:5000 registry </span></span><br><span class="line"><span class="comment"># 3、打开浏览器 输入地址http://宿主机ip:5000/v2/_catalog，看到&#123;&quot;repositories&quot;:[]&#125; 表示私有仓库 搭建成功 </span></span><br><span class="line"><span class="comment"># 4、修改daemon.json </span></span><br><span class="line"><span class="attr">vi</span> <span class="string">/etc/docker/daemon.json </span></span><br><span class="line"><span class="comment"># 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将宿主机ip修改为自己宿主 机真实ip </span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: <span class="string">[</span></span><br><span class="line">        <span class="attr">&quot;http</span>:<span class="string">//hub-mirror.c.163.com&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//docker.mirrors.ustc.edu.cn&quot;,</span></span><br><span class="line">        <span class="attr">&quot;https</span>:<span class="string">//registry.docker-cn.com&quot;</span></span><br><span class="line">    <span class="attr">],</span></span><br><span class="line">   <span class="attr">&quot;insecure-registries&quot;</span>:<span class="string">[&quot;192.168.33.31:5000&quot;]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 5、重启docker 服务 </span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart docker </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">start registry</span></span><br></pre></td></tr></table></figure><p>访问私有仓库 <a href="http://192.168.200.140:5000/v2/_catalog">http://192.168.200.140:5000/v2/_catalog</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://IP:5000/v2/_catalog </span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg/serms/202307142204440.png" alt=""></p><h2 id="推送、拉取镜像"><a href="#推送、拉取镜像" class="headerlink" title="推送、拉取镜像"></a>推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.33.31:5000/</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.33.31:5000/nginx:1.0 </span><br></pre></td></tr></table></figure><p>② 推送镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.33.31:5000/nginx:1.0 </span><br></pre></td></tr></table></figure><p>③ 拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.33.318:5000/nginx:1.0 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手撸Java Spring</title>
      <link href="/posts/c02fe0e2.html"/>
      <url>/posts/c02fe0e2.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>首先，我们需要明白什么是BeanFactory和Ioc容器。在Java中，BeanFactory是一种用于创建和管理对象（也称为bean）的机制，而Ioc（Inversion of Control，控制反转）容器则是负责实现BeanFactory的框架。简单来说，BeanFactory就像是一个工厂，根据我们的需求来创建和提供对象。</p></div><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="Spring-IOC容器的概念"><a href="#Spring-IOC容器的概念" class="headerlink" title="Spring IOC容器的概念"></a>Spring IOC容器的概念</h3><blockquote><p>Spring IOC（控制反转）容器是Spring框架的核心组件之一。它负责管理应用程序中的对象，实现了对象的创建、组装和管理等功能。IOC容器通过反转控制，将对象的创建和依赖注入的责任从应用程序代码转移到容器中，提供了更高的灵活性和可测试性。</p></blockquote><h3 id="DI（依赖注入）"><a href="#DI（依赖注入）" class="headerlink" title="DI（依赖注入）"></a>DI（依赖注入）</h3><blockquote><p>依赖注入（DI）是IOC容器的重要特性之一。通过DI，对象的依赖关系由容器在运行时动态地注入，而不是由对象自己负责创建或查找依赖的实例。这种解耦的方式使得对象之间的协作更加灵活、可扩展和易于维护。</p></blockquote><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="获取Bean"><a href="#获取Bean" class="headerlink" title="获取Bean"></a>获取Bean</h3><p>我们先来看一下最常用的getBean()方法，在实现上，该方法主要分为三个步骤：</p><ul><li>获取BeanDefinition</li><li>创建Bean实例</li><li>初始化Bean</li></ul><h3 id="获取BeanDefinition"><a href="#获取BeanDefinition" class="headerlink" title="获取BeanDefinition"></a>获取BeanDefinition</h3><p>前两个步骤非常简单，我们直接来看第一步的实现。获取BeanDefinition主要调用的是DefaultListableBeanFactory类中的getBeanDefinition()方法，该方法返回的就是Bean的定义信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BeanDefinition <span class="title function_">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="comment">// 从缓存中获取BeanDefinition</span></span><br><span class="line">    <span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="built_in">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line">    <span class="keyword">if</span> (bd == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchBeanDefinitionException</span>(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回BeanDefinition</span></span><br><span class="line">    <span class="keyword">return</span> bd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法中，beanDefinitionMap是一个ConcurrentHashMap，用来缓存BeanDefinition对象，key为Bean的名称，value为BeanDefinition对象，这个容器是Spring IOC管理Bean的核心，后面的初始化Bean和创建Bean都是基于这个容器进行的，我们可以看到这个方法先从容器中获取BeanDefinition对象，如果获取到就直接返回，如果获取不到就抛出一个NoSuchBeanDefinitionException异常。</p><h3 id="创建Bean实例"><a href="#创建Bean实例" class="headerlink" title="创建Bean实例"></a>创建Bean实例</h3><p>下面是Bean实例化的主要过程（主要包含了Bean的创建，包括构造函数的调用和依赖注入等逻辑）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, Object[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 第一步，根据BeanDefinition获取Bean的class对象</span></span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步，校验Bean的依赖关系以及循环依赖，这里省略实现细节</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步，执行BeanDefinition中Scheduler的回调函数，这里省略实现细节</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object beanInstance;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第四步，判断是否启用了工厂方法构造Bean</span></span><br><span class="line">        <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第五步，执行构造函数</span></span><br><span class="line">        Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">        <span class="keyword">if</span> (ctors != <span class="literal">null</span> || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">                mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) &#123;</span><br><span class="line">            <span class="keyword">return</span> instantiateBean(beanName, mbd, args, ctors);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第六步，根据类型查找BeanFactory中是否注册了Bean的实例</span></span><br><span class="line">        beanInstance = getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (beanInstance != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanInstance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第七步，通过BeanWrapper来修改Bean的属性</span></span><br><span class="line">        <span class="type">BeanWrapper</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanWrapperImpl</span>();</span><br><span class="line">        bw.setConversionService(getConversionService());</span><br><span class="line">        initBeanWrapper(bw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第八步，为Bean属性设置值</span></span><br><span class="line">        applyPropertyValues(beanName, mbd, bw, mbd.getPropertyValues());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第九步，在设置完Bean属性之后，校验Bean的合法性等信息，这里省略实现细节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第十步，执行Bean的init方法，将Bean初始化完成</span></span><br><span class="line">        beanInstance = initializeBean(beanName, beanInstance, mbd);</span><br><span class="line">        <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            <span class="comment">// 添加原生的单例Bean</span></span><br><span class="line">            addSingleton(beanName, beanInstance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(beanName, <span class="string">&quot;Instantiation of bean failed&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码就是Bean的主要构造过程，其中主要包括了工厂方法构造、构造函数调用、属性注入、初始化等逻辑。</p><h3 id="初始化Bean"><a href="#初始化Bean" class="headerlink" title="初始化Bean"></a>初始化Bean</h3><p>最后一步就是初始化Bean了，这个过程主要包括以下三个方法：</p><p>firstly, applyBeanPostProcessorsBeforeInitialization(ob, beanName);</p><p>secondly, invokeInitMethods(beanName, wrappedBean, mbd);</p><p>thirdly, applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</p><p>这个方法可以在BeanDefinitionReaderUtils类中找到。</p><h3 id="Bean注入"><a href="#Bean注入" class="headerlink" title="Bean注入"></a>Bean注入</h3><p>pring在完成获取Bean和创建Bean的工作之后，需要将需要的Bean注入到需要该Bean的地方。在Spring中，Bean注入主要分为以下几种方式：</p><ul><li>构造函数注入</li><li>setter注入</li><li>通过注解实现的注入</li></ul><p>对于构造函数注入，Spring主要通过查找构造函数的参数及其类型，然后根据类型及其名称去容器中找到对应的Bean，最终完成注入。</p><p>对于setter注入，Spring则是直接对Bean的属性进行注入，setter属性注入其实是Spring IOC容器的一个特殊的语法糖，开发者只需要定义好setter方法，在容器中就可以完成 Bean的注入，非常方便。</p><p>对于通过注解实现的注入，所谓的注解指的是@Resource、@Autowired注解。这种方式只需要在需要注入的属性上添加对应的@Autowired或@Resource注解，Spring IOC就会自动完成注入。</p><blockquote><p>在源码中，Spring IOC的关键部分是BeanDefinition和BeanFactory的实现。BeanDefinition定义了Bean的元数据，包括类名、属性、依赖关系等信息。BeanFactory负责管理Bean的生命周期，根据BeanDefinition创建Bean实例，并处理依赖注入。</p><p>Spring IOC的核心原理是通过反射机制实现动态创建和初始化Bean对象。当容器启动时，会解析配置文件或注解，将Bean的定义转化为BeanDefinition对象，并缓存在IOC容器中。当需要获取Bean实例时，容器会根据BeanDefinition创建Bean对象，并将依赖注入到对应的属性中。</p></blockquote><h2 id="🔥开始手撕IOC"><a href="#🔥开始手撕IOC" class="headerlink" title="🔥开始手撕IOC"></a>🔥开始手撕IOC</h2><p>创建基本的Maven项目咱直接略过。。。。</p><p>首先我们通过读取xml配置文件的方式来实现，即需要引入demo4j的依赖来帮助我们解析配置文件内的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义Xml"><a href="#定义Xml" class="headerlink" title="定义Xml"></a>定义Xml</h3><p>定义⼀个外部的XML，⽤于声明Bean: applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.serms.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.serms.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写BeanDefinition"><a href="#编写BeanDefinition" class="headerlink" title="编写BeanDefinition"></a>编写BeanDefinition</h3><p>这个类表示一个bean的定义，包含了两个属性：id和className。其中，id是bean的唯一标识符，className是该bean对应的类名property就是属性，因我们的property属性可能有多个，并且对象类型也存在不同，所以这边直接采用List 集合的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinition</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">List</span> <span class="variable">propertyValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeanDefinition</span><span class="params">(String id, String className)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeanDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassName</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getPropertyValues</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyValues</span><span class="params">(List propertyValues)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.propertyValues = propertyValues;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写Bean工厂接口"><a href="#编写Bean工厂接口" class="headerlink" title="编写Bean工厂接口"></a>编写Bean工厂接口</h3><p><code>BeanFactory</code>接口是一个定义了创建和获取bean对象的机制的接口。</p><p>在Java中，我们可以把bean想象成应用程序中的各种对象，例如服务、工具、数据对象等等。而<code>BeanFactory</code>就像是一个工厂，负责根据我们的需求来创建和提供这些对象。</p><p>下面是<code>BeanFactory</code>接口中定义的方法：</p><ol><li><code>getBean(String beanName)</code>：根据指定的<code>beanName</code>获取对应的bean对象。通过调用这个方法，我们可以根据bean的名称来获取具体的对象实例。</li><li><code>containsBean(String name)</code>：检查是否存在指定名称的bean。通过调用这个方法，我们可以判断某个特定名称的bean是否已经被创建和注册。</li><li><code>registerBean(String beanName, Object obj)</code>：手动注册一个bean。通过调用这个方法，我们可以将一个对象注册为bean，并指定它的名称。</li></ol><p>在下述代码中，我们创建了一个名为<code>SimpleBeanFactory</code>的类，它是<code>BeanFactory</code>接口的一个简单实现。</p><p><code>SimpleBeanFactory</code>类继承了<code>DefaultSingletonBeanRegistry</code>类，这个类实现了<code>SingletonBeanRegistry</code>接口，提供了单例bean的管理功能。</p><p>在后面的<code>SimpleBeanFactory</code>类中，我们将要重写<code>getBean</code>方法。当我们调用<code>getBean</code>方法时，它会首先检查单例bean的管理器，即<code>DefaultSingletonBeanRegistry</code>，看看是否存在指定名称的bean。如果存在，则返回对应的单例bean实例；如果不存在，则抛出异常。</p><p>这样，通过<code>SimpleBeanFactory</code>创建的bean默认是单例的，因为它继承了单例bean管理的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取bean*/</span></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*判断包含Bean*/</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*注册Bean*/</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerBean</span><span class="params">(String beanName, Object obj)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建SingletonBeanRegistry接口"><a href="#创建SingletonBeanRegistry接口" class="headerlink" title="创建SingletonBeanRegistry接口"></a>创建<code>SingletonBeanRegistry</code>接口</h3><p><code>SingletonBeanRegistry</code>接口用于管理单例bean的注册和获取。</p><p>首先，让我们了解一下什么是单例bean。在Java中，单例bean是指只有一个实例存在的对象。在整个应用程序中，无论我们从何处获取该bean，都会得到同一个实例。</p><p>接下来，我们来解释<code>SingletonBeanRegistry</code>接口的方法：</p><ol><li><code>registerSingleton(String beanName, Object singletonObject)</code>：这个方法用于注册单例bean。我们可以通过指定的<code>beanName</code>将一个对象注册为单例bean。注册后，我们可以使用<code>beanName</code>来获取该单例bean的实例。</li><li><code>getSingleton(String beanName)</code>：这个方法用于获取指定<code>beanName</code>对应的单例bean实例。如果存在该单例bean，则返回其实例；如果不存在，则返回<code>null</code>。</li><li><code>containsSingleton(String beanName)</code>：这个方法用于检查是否存在指定名称的单例bean。如果存在，返回<code>true</code>；如果不存在，返回<code>false</code>。</li><li><code>getAllSingletons()</code>：这个方法用于获取所有已注册的单例bean的映射关系。返回一个<code>Map</code>，其中键是单例bean的名称，值是对应的单例bean实例。</li></ol><p>SingletonBeanRegistry接口主要用于管理单例Bean的注册和获取。它定义了两个方法：</p><ol><li><p>registerSingleton(String name, Object singleton): 将单例Bean注册到单例Bean容器中，其中name是该Bean的名称，singleton是该Bean的实例。</p></li><li><p>getSingleton(String name): 获取指定名称的单例Bean实例。</p></li><li><p>在下面代码中，我们实现了<code>SingletonBeanRegistry</code>接口的一个默认实现类<code>DefaultSingletonBeanRegistry</code>。</p><p><code>DefaultSingletonBeanRegistry</code>类维护了一个<code>singletons</code>字典，用于存储单例bean的名称和对应的实例。</p><p>在<code>registerSingleton</code>方法中，我们使用<code>synchronized</code>关键字来确保在多线程环境下对单例bean的安全管理。我们将指定的<code>singletonObject</code>对象与<code>beanName</code>关联，并将其存储在<code>singletons</code>字典中。</p><p><code>getSingleton</code>方法根据<code>beanName</code>从<code>singletons</code>字典中获取相应的单例bean实例。</p><p><code>containsSingleton</code>方法用于检查<code>singletons</code>字典中是否存在指定名称的单例bean。</p><p><code>getAllSingletons</code>方法返回<code>singletons</code>字典，其中包含了所有已注册的单例bean的名称和实例。</p></li></ol><p>此接口主要目的就是在整个Bean生命周期中只创建一次Bean，使用SingletonBeanRegistry可以方便地管理和获取单例Bean，保证每个单例Bean在整个应用中只存在一份，避免了重复创建和浪费资源的问题。同时，它还可以提供单例Bean之间的依赖注入和解耦的方式，使系统更加灵活、可维护和可扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*注册Bean*/</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通过名称获取对象*/</span></span><br><span class="line">    Object <span class="title function_">getSingleton</span><span class="params">(String beanName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*判断是否包含Bean*/</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsSingleton</span><span class="params">(String beanName)</span>;</span><br><span class="line"></span><br><span class="line">    String[] getSingletonNames();</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">createBean</span><span class="params">(BeanDefinition beanDefinition, List beanDefinitions)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现单例接口"><a href="#实现单例接口" class="headerlink" title="实现单例接口"></a>实现单例接口</h3><p>创建DefaultSingletonBeanRegistry类，实现<code>SingletonBeanRegistry</code>接口的所有方法，用于管理单例Bean的注册和获取。它维护了一个ConcurrentHashMap用于存储单例Bean，由名称和Bean对象组成，还维护了一个ConcurrentHashSet用于存储单例Bean名称。它提供了以下方法：</p><ul><li>registerSingleton(String beanName, Object singletonObject)：用于注册单例Bean。如果集合中已经包含相同名称的Bean，则抛出异常。</li><li>getSingleton(String beanName)：用于根据名称获取单例Bean的实例。</li><li>containsSingleton(String beanName)：用于判断是否存在指定名称的Bean。</li><li>getSingletonNames()：用于获取所有单例Bean的名称。</li><li>createBean(BeanDefinition beanDefinition, List beanDefinitions)：用于根据BeanDefinition对象创建Bean的实例。其中，BeanDefinition对象是从beanDefinitions参数中获取，是bean的配置信息。</li><li>getBeanDefinitionById(String id, List beanDefinitions)：用于通过Bean的唯一标识符id获取对应的BeanDefinition对象。</li></ul><p>在registerSingleton()方法中，使用synchronized锁定了singletons集合，以确保线程安全。在createBean()方法中，使用反射机制和依赖注入的方式创建和管理所有的Bean，若依赖对象未实例化，则会递归创建，并通过singletons集合进行缓存，以实现高效的访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储单例Bean的ConcurrentHashMap</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletons = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储单例Bean的名称的ConcurrentHashSet</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; beanNames = Collections.synchronizedSet(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册单例Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (singletons) &#123;</span><br><span class="line">            System.out.println(beanName + <span class="string">&quot; : &quot;</span> + singletonObject);</span><br><span class="line">            <span class="keyword">if</span> (singletons.containsKey(beanName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Could not register object [&quot;</span> + singletonObject + <span class="string">&quot;] under bean name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;: there is already object [&quot;</span> + singletons.get(beanName) + <span class="string">&quot;] bound&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            singletons.put(beanName, singletonObject);</span><br><span class="line">            beanNames.add(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Bean的名称</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singletons.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否包含单例bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsSingleton</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singletons.containsKey(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有单例bean的名称</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getSingletonNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> beanNames.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">createBean</span><span class="params">(BeanDefinition beanDefinition, List beanDefinitions)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bean = Class.forName(beanDefinition.getClassName()).newInstance();</span><br><span class="line">            List&lt;PropertyValue&gt; propertyValues = beanDefinition.getPropertyValues();</span><br><span class="line">            <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues) &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> bean.getClass().getDeclaredField(propertyValue.getName());</span><br><span class="line">                <span class="type">Object</span> <span class="variable">dependencyBean</span> <span class="operator">=</span> singletons.get(propertyValue.getValue());</span><br><span class="line">                <span class="keyword">if</span> (dependencyBean == <span class="literal">null</span>) &#123;</span><br><span class="line">                    dependencyBean = createBean(getBeanDefinitionById((String) propertyValue.getValue(), beanDefinitions), (List) singletons);</span><br><span class="line">                    singletons.put((String) propertyValue.getValue(), dependencyBean);</span><br><span class="line">                &#125;</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                declaredField.set(bean, dependencyBean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanDefinition <span class="title function_">getBeanDefinitionById</span><span class="params">(String id, List&lt;BeanDefinition&gt; beanDefinitions)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanDefinition beanDefinition : beanDefinitions) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanDefinition.getId().equals(id)) &#123;</span><br><span class="line">                <span class="keyword">return</span> beanDefinition;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建IOC容器类"><a href="#创建IOC容器类" class="headerlink" title="创建IOC容器类"></a>创建<code>IOC容器</code>类</h3><p>ClassPathXmlApplicationContext类实现了简单的IoC容器，它的作用是读取xml文件中的Bean配置信息，将其构建成BeanDefinition对象，然后使用反射创建Bean对象，并将其注册为单例对象，最后根据Bean的名称从容器中获取Bean实例。</p><p>在构造方法中，调用了readXml方法，该方法解析xml文件获取Bean的定义信息，并保存到beanDefinitions集合中。</p><p>instanceBeans方法用于创建Bean对象。它遍历beanDefinitions集合，先获取到一个Bean的定义信息，然后通过反射机制构建Bean对象，并将其添加到容器中。</p><p>getBean方法用于获取Bean对象。它内部调用了getSingleton方法，如果该Bean在容器中已经存在，就直接返回该Bean。否则，就抛出异常Bean is not defined: + beanName。</p><p>containsBean方法用于判断是否包含某个Bean对象，它内部调用了containsSingleton方法。</p><p>registerBean方法用于注册对象，它内部调用了registerSingleton方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储Bean的定义信息</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;BeanDefinition&gt; beanDefinitions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，读取xml文件并构建BeanDefinition对象，实例化Bean对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String xmlFileName)</span> &#123;</span><br><span class="line">        readXml(xmlFileName);</span><br><span class="line">        instanceBeans();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取xml文件，并将读取到的配置信息构建成BeanDefinition对象，并将其加入到beanDefinitions中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readXml</span><span class="params">(String xmlFileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(ClassPathXmlApplicationContext2.class.getClassLoader().getResourceAsStream(xmlFileName));</span><br><span class="line">            <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">            List&lt;Element&gt; beanElements = rootElement.elements(<span class="string">&quot;bean&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element beanElement : beanElements) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> beanElement.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> beanElement.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(id, className);</span><br><span class="line">                List&lt;Element&gt; propertyElements = beanElement.elements(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Element propertyElement : propertyElements) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> propertyElement.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> propertyElement.attributeValue(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                    <span class="type">PropertyValue</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyValue</span>(name, ref);</span><br><span class="line">                    System.out.println(propertyValue);</span><br><span class="line">                    beanDefinition.getPropertyValues().add(propertyValue);</span><br><span class="line">                &#125;</span><br><span class="line">                beanDefinitions.add(beanDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用反射来创建Bean对象，并将其存储到singletons中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">instanceBeans</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanDefinition beanDefinition : beanDefinitions) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//                Object bean = Class.forName(beanDefinition.getClassName()).newInstance();</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> createBean(beanDefinition, beanDefinitions);</span><br><span class="line">                registerSingleton(beanDefinition.getId(), bean);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Bean对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (bean == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//            throw new BeansException(&quot;Bean is not defined: &quot; + beanName);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否包含Bean对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> containsSingleton(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册Bean对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBean</span><span class="params">(String beanName, Object obj)</span> &#123;</span><br><span class="line">        registerSingleton(beanName, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建工厂实现类"><a href="#创建工厂实现类" class="headerlink" title="创建工厂实现类"></a>创建工厂实现类</h3><p>接下来我们对Bean工厂做一个简单的实现，基于 Map 存储 Bean 定义和 Bean 实例的容器。它实现了 BeanFactory 接口，可以通过 getBean 方法获取 Bean 的实例，并且实现了 SingletonBeanRegistry 接口，可以注册和存储 Bean 的单例实例。</p><p>SimpleBeanFactory 主要用于演示 Spring IoC 容器的基本原理和实现方式，对于真正的应用场景来说，它的功能和扩展性都远远不足。在实际项目中，我们通常会使用更为强大和灵活的容器，如 Spring 容器或其他开源容器，这些容器提供了很多高级特性，如 AOP、事务管理、Web 开发支持等，可以大大简化应用程序的开发和维护。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.registerSingleton(beanName, singletonObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (bean == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//            throw new BeansException(&quot;Bean is not defined: &quot; + beanName);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> containsSingleton(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBean</span><span class="params">(String beanName, Object obj)</span> &#123;</span><br><span class="line">        registerSingleton(beanName, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试自定义IOC容器"><a href="#测试自定义IOC容器" class="headerlink" title="测试自定义IOC容器"></a>测试自定义IOC容器</h2><h3 id="创建Dao层以及Service层"><a href="#创建Dao层以及Service层" class="headerlink" title="创建Dao层以及Service层"></a>创建Dao层以及Service层</h3><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg//serms/image-20230516151945494.png" alt=""></p><p>在UserDao中创建接口，Dao实现类中实现具体的业务，Service在进行调用，由于代码过于简单就不做展示了。</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg//serms/image-20230516152100323.png" alt=""></p><h3 id="创建Test测试类"><a href="#创建Test测试类" class="headerlink" title="创建Test测试类"></a>创建<code>Test</code>测试类</h3><p>创建容器对象传入<code>applicationContext.xml</code>文件。。。。。。。省略。。。。。</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg//serms/image-20230516152302642.png" alt="image-20230516152302642"></p><p>最后我们看运行结果</p><p><img src="https://cdn1.tianli0.top/gh/SerMs/HexoPublicStaiciImg//serms/image-20230516152539108.png" alt=""></p><p>可以看到Serivce对象和Dao都以及分别进行了创建，实现了单例对象，并也实现了DI注入，如上就是所有代码过程，在整个SpringIOC的源码中实现的功能，远不止上述这些，上述只是简单的实现了一个IOC容器。如有写的不对的地方，还请指点！</p><p><strong>以上就是 手撸SpringIOC 的全部内容，看完如果对你有帮助，感谢赞助支持！。</strong></p><p><img src="https://img-blog.csdnimg.cn/20210115230629703.gif#pic_center" alt=""></p><h2 id="❤️Sponsor"><a href="#❤️Sponsor" class="headerlink" title="❤️Sponsor"></a>❤️Sponsor</h2><p>您的支持是我不断前进的动力，如果您恰巧财力雄厚，又感觉本文对您有所帮助的话，可以考虑打赏一下本文，用以维持本博客的运营费用，拒绝白嫖，从你我做起！🥰🥰🥰</p><div class="table-container"><table><thead><tr><th style="text-align:center">支付宝</th><th>微信</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/alipay.png" alt=""></td><td><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/wechat.png" alt=""></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码解析 </tag>
            
            <tag> IOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键生成MVC</title>
      <link href="/posts/1d84dc88.html"/>
      <url>/posts/1d84dc88.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>写在前面的话:<br>本脚本模板不收取任何费用,初衷就是不想重复造梯子,如果对各位有帮助的话,可以给作者打上一杯奶茶钱,目前插件还是有点小 Bug,但是不影响使用,现在各平台相关的代码生成插件也比较成熟了,并且带有独特的特色和一些自带的代码提示功能,使用感受整体都不错,但是好用的插件肯定是要收费的啦~具体的请参考下面相关插件查看</p></div><details class="folding-tag" green><summary> 查看视频教程 </summary>              <div class='content'>              <iframe class="bilibili" src="//player.bilibili.com/player.html?aid=981357376&bvid=BV1q44y1u7EL&cid=711986806&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" > </iframe>              </div>            </details><div class="table-container"><table><thead><tr><th style="text-align:center">参考插件</th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="https://github.com/gejun123456/MyBatisCodeHelper-Pro">MyBatisCodeHelper-Pro</a></strong></td></tr><tr><td style="text-align:center"><a href="https://github.com/zhengjunbase/codehelper.generator"><strong>codehelper.generator</strong></a></td></tr><tr><td style="text-align:center"><a href="https://github.com/mybatis/mybatis-3"><strong>mybatis</strong></a></td></tr><tr><td style="text-align:center"><a href="https://github.com/mybatis/generator">mybatis generator</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/pagehelper/Mybatis-PageHelper">pageHelper</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/zouzg/mybatis-generator-gui">mybatis-generator-gui</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/itfsw/mybatis-generator-plugin">mybatis generator plugin</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/baomidou/mybatis-plus">mybatisplus</a></td></tr></tbody></table></div><details class="folding-tag" cyan><summary> 功能介绍 </summary>              <div class='content'>              <p>本脚本只适用于 EasyCode 模板搭配使用</p><p>支持生成代码具体如下:</p><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>controller 层代码</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>handler 处理器</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>interceptor 拦截器</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>mapper 数据库接口</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>pojo 实体类</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>service 服务层</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>service-impl 服务层实现类</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>application.yaml yaml全局配置文件</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>Bug修复~</p>            </div><p>是不是很方便,一键生成到底,基本满足你日常 CRUD</p><p>虽然还是有点 Bug,但是我觉得他已经成熟了,因为不影响使用,具体 Bug 我会在下文中讲些</p>              </div>            </details><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>随意创建一个 SpringBoot 项目,在 pom 里面引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mp代码生成器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>搜索 EasyCode 插件安装</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504090944383.png" alt=""></p><p>在文件&gt;设置&gt;其他设置&gt;EasyCode&gt;Template 中添加组名,命名随意,可以看到,除了第一个,下面四个都插件自带的,你们也可以尝试一下</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504091123867.png" alt=""></p><p>接下来就是最重要的添加模板了</p><h3 id="pojo-java-vm"><a href="#pojo-java-vm" class="headerlink" title="pojo.java.vm"></a>pojo.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$!&#123;define.vm&#125;</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line">#save(<span class="string">&quot;/pojo&quot;</span>, <span class="string">&quot;.java&quot;</span>)</span><br><span class="line"></span><br><span class="line">#setPackageSuffix(<span class="string">&quot;pojo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#tableComment(<span class="string">&quot;实体类&quot;</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>!&#123;tableInfo.name&#125; <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> serialVersionUID= $!tool.serial();</span><br><span class="line">#foreach($column in $tableInfo.pkColumn)</span><br><span class="line">    #<span class="keyword">if</span>($&#123;column.comment&#125;)<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * $&#123;column.comment&#125;</span></span><br><span class="line"><span class="comment">     */</span>#end</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableId(value = &quot;$!&#123;column.obj.name&#125;&quot; , type = IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> $!&#123;tool.getClsNameByFullName($column.type)&#125; $!&#123;column.name&#125;;</span><br><span class="line">#end</span><br><span class="line">#foreach($column in $tableInfo.otherColumn)</span><br><span class="line"></span><br><span class="line">    #<span class="keyword">if</span>($&#123;column.comment&#125;)<span class="comment">/**$&#123;column.comment&#125;*/</span>#end</span><br><span class="line">    #<span class="keyword">if</span>(!($column.name.equals(<span class="string">&#x27;deleted&#x27;</span>)||$column.name.equals(<span class="string">&#x27;updateTime&#x27;</span>)||$column.name.equals(<span class="string">&#x27;createTime&#x27;</span>)))<span class="meta">@TableField(value = &quot;$!&#123;column.obj.name&#125;&quot;)</span>#end</span><br><span class="line">    #<span class="keyword">if</span>($column.name.equals(<span class="string">&#x27;createTime&#x27;</span>))</span><br><span class="line">    <span class="comment">/** 创建时间 */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;$!&#123;column.obj.name&#125;&quot; , fill = FieldFill.INSERT)</span>#end</span><br><span class="line">    #<span class="keyword">if</span>($column.name.equals(<span class="string">&#x27;updateTime&#x27;</span>))</span><br><span class="line">    <span class="comment">/** 修改时间 */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;$!&#123;column.obj.name&#125;&quot; , fill = FieldFill.INSERT_UPDATE)</span>#end</span><br><span class="line">    #<span class="keyword">if</span>($column.name.equals(<span class="string">&#x27;deleted&#x27;</span>))<span class="meta">@TableLogic</span></span><br><span class="line">    #end</span><br><span class="line"><span class="keyword">private</span> $!&#123;tool.getClsNameByFullName($column.type)&#125; $!&#123;column.name&#125;;</span><br><span class="line">#end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="serviceImpl-java-vm"><a href="#serviceImpl-java-vm" class="headerlink" title="serviceImpl.java.vm"></a>serviceImpl.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">##定义初始变量</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line">#set($tableName = $tool.append($tableInfo.name, <span class="string">&quot;ServiceImpl&quot;</span>))</span><br><span class="line">##设置回调</span><br><span class="line">$!callback.setFileName($tool.append($tableName, <span class="string">&quot;.java&quot;</span>))</span><br><span class="line">$!callback.setSavePath($tool.append($tableInfo.savePath, <span class="string">&quot;/service/impl&quot;</span>))</span><br><span class="line"></span><br><span class="line">##拿到主键</span><br><span class="line">#<span class="keyword">if</span>(!$tableInfo.pkColumn.isEmpty())</span><br><span class="line">    #set($pk = $tableInfo.pkColumn.get(<span class="number">0</span>))</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>($tableInfo.savePackageName)<span class="keyword">package</span> $!&#123;tableInfo.savePackageName&#125;.#&#123;end&#125;service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.pojo.$!&#123;tableInfo.name&#125;;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.mapper.$!&#123;tableInfo.name&#125;Mapper;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.service.$!&#123;tableInfo.name&#125;Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $!&#123;tableInfo.comment&#125;($!&#123;tableInfo.name&#125;)表服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;$!tool.firstLowerCase($!&#123;tableInfo.name&#125;)Service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>!&#123;tableName&#125; <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;$!&#123;tableInfo.name&#125;Mapper, $!&#123;tableInfo.name&#125;&gt; <span class="keyword">implements</span> <span class="title class_">$</span>!&#123;tableInfo.name&#125;Service &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mapper-java-vm"><a href="#mapper-java-vm" class="headerlink" title="mapper.java.vm"></a>mapper.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#set($tableName = $tool.append($tableInfo.name, <span class="string">&quot;Mapper&quot;</span>))</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line"></span><br><span class="line">$!callback.setFileName($tool.append($tableName, <span class="string">&quot;.java&quot;</span>))</span><br><span class="line">$!callback.setSavePath($tool.append($tableInfo.savePath, <span class="string">&quot;/mapper&quot;</span>))</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>(!$tableInfo.pkColumn.isEmpty())</span><br><span class="line">    #set($pk = $tableInfo.pkColumn.get(<span class="number">0</span>))</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>($tableInfo.savePackageName)<span class="keyword">package</span> $!&#123;tableInfo.savePackageName&#125;.#&#123;end&#125;mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.pojo.$!tableInfo.name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $!&#123;tableInfo.comment&#125;($!&#123;tableInfo.name&#125;)表数据库访问层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$</span>!&#123;tableName&#125; <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;$!tableInfo.name&gt; &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="service-java-vm"><a href="#service-java-vm" class="headerlink" title="service.java.vm"></a>service.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line">#set($tableName = $tool.append($tableInfo.name, <span class="string">&quot;Service&quot;</span>))</span><br><span class="line"></span><br><span class="line">$!callback.setFileName($tool.append($tableName, <span class="string">&quot;.java&quot;</span>))</span><br><span class="line">$!callback.setSavePath($tool.append($tableInfo.savePath, <span class="string">&quot;/service&quot;</span>))</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>(!$tableInfo.pkColumn.isEmpty())</span><br><span class="line">    #set($pk = $tableInfo.pkColumn.get(<span class="number">0</span>))</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>($tableInfo.savePackageName)<span class="keyword">package</span> $!&#123;tableInfo.savePackageName&#125;.#&#123;end&#125;service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.pojo.$!&#123;tableInfo.name&#125;;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $!&#123;tableInfo.comment&#125;($!&#123;tableInfo.name&#125;)表服务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$</span>!&#123;tableName&#125; <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;$!tableInfo.name&gt; &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="controller-java-vm"><a href="#controller-java-vm" class="headerlink" title="controller.java.vm"></a>controller.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line">#set($tableName = $tool.append($tableInfo.name, <span class="string">&quot;Controller&quot;</span>))</span><br><span class="line"></span><br><span class="line">$!callback.setFileName($tool.append($tableName, <span class="string">&quot;.java&quot;</span>))</span><br><span class="line">$!callback.setSavePath($tool.append($tableInfo.savePath, <span class="string">&quot;/controller&quot;</span>))</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>(!$tableInfo.pkColumn.isEmpty())</span><br><span class="line">    #set($pk = $tableInfo.pkColumn.get(<span class="number">0</span>))</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>($tableInfo.savePackageName)<span class="keyword">package</span> $!&#123;tableInfo.savePackageName&#125;.#&#123;end&#125;controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.pojo.$!&#123;tableInfo.name&#125;;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.service.$!&#123;tableInfo.name&#125;Service;</span><br><span class="line"><span class="keyword">import</span> $!&#123;tableInfo.savePackageName&#125;.util.R;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $!&#123;tableInfo.comment&#125;($!&#123;tableInfo.name&#125;)表控制层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$!tool.firstLowerCase($tableInfo.name)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>!&#123;tableName&#125; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> $!&#123;tableInfo.name&#125;Service $!tool.firstLowerCase($tableInfo.name)Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam</span> <span class="type">int</span> current,<span class="meta">@RequestParam</span> <span class="type">int</span> size)</span>&#123;</span><br><span class="line">        Page&lt;$!&#123;tableInfo.name&#125;&gt; page=<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current,size);</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(<span class="built_in">this</span>.$!&#123;tool.firstLowerCase($tableInfo.name)&#125;Service.page(page));&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过主键查询单条数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">selectOne</span><span class="params">(<span class="meta">@PathVariable</span> Serializable id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(<span class="built_in">this</span>.$!&#123;tool.firstLowerCase($tableInfo.name)&#125;Service.getById(id));&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> $!&#123;tableInfo.name&#125; $!tool.firstLowerCase($tableInfo.name)</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(<span class="built_in">this</span>.$!&#123;tool.firstLowerCase($tableInfo.name)&#125;Service.save($!tool.firstLowerCase($tableInfo.name)));&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">updateById</span><span class="params">(<span class="meta">@RequestBody</span> $!&#123;tableInfo.name&#125; $!tool.firstLowerCase($tableInfo.name)</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(<span class="built_in">this</span>.$!&#123;tool.firstLowerCase($tableInfo.name)&#125;Service.updateById($!tool.firstLowerCase($tableInfo.name)));&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单条/批量删除数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(<span class="built_in">this</span>.$!&#123;tool.firstLowerCase($tableInfo.name)&#125;Service.removeByIds(id));&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>r.java.vm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$!&#123;define.vm&#125;</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line"></span><br><span class="line">#save(<span class="string">&quot;/util&quot;</span>, <span class="string">&quot;R.java&quot;</span>)</span><br><span class="line"></span><br><span class="line">#setPackageSuffix(<span class="string">&quot;util&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一返回对象R</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.code = <span class="number">200</span>;</span><br><span class="line">        r.message = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.code = <span class="number">205</span>;</span><br><span class="line">        r.message = <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">exp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.code = <span class="number">500</span>;</span><br><span class="line">        r.message = <span class="string">&quot;exception&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="interceptor3-5-1-java-vm"><a href="#interceptor3-5-1-java-vm" class="headerlink" title="interceptor3.5.1.java.vm"></a>interceptor3.5.1.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$!&#123;define.vm&#125;</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line"></span><br><span class="line">#save(<span class="string">&quot;/interceptor&quot;</span>, <span class="string">&quot;MybatisPlusPageInterceptor.java&quot;</span>)</span><br><span class="line"></span><br><span class="line">#setPackageSuffix(<span class="string">&quot;interceptor&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis-Plus 3.5.1 拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusPageInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新版分页插件设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">getPaginationInnerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="handler3-5-1-java-vm"><a href="#handler3-5-1-java-vm" class="headerlink" title="handler3.5.1.java.vm"></a>handler3.5.1.java.vm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$!&#123;define.vm&#125;</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#save(<span class="string">&quot;/handler&quot;</span>,<span class="string">&quot;MyMetaObjectHandler.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#setPackageSuffix(<span class="string">&quot;handler&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis-Plus 3.5.1 处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入时的填充策略</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span> , <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span> , <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时的填充策略</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span> , <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.yaml.vm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">##设置保存名称与保存位置</span><br><span class="line">$!callback.setFileName(<span class="string">&quot;application.yaml&quot;</span>)</span><br><span class="line">$!callback.setSavePath($tool.append($modulePath, <span class="string">&quot;/src/main/resources&quot;</span>))</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/XXXX?allowPublicKeyRetrieval=true&amp;serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    druid:</span><br><span class="line">      # 下面为连接池的补充设置，应用到上面所有数据源中</span><br><span class="line">      # 初始化大小，最小，最大</span><br><span class="line">      initial-size: <span class="number">5</span></span><br><span class="line">      min-idle: <span class="number">5</span></span><br><span class="line">      max-active: <span class="number">20</span></span><br><span class="line">      # 配置获取连接等待超时的时间</span><br><span class="line">      max-wait: <span class="number">60000</span></span><br><span class="line">      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class="line">      time-between-eviction-runs-millis: <span class="number">60000</span></span><br><span class="line">      # 配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class="line">      min-evictable-idle-time-millis: <span class="number">300000</span></span><br><span class="line"></span><br><span class="line">#配置日志，我们所用的sql现在是不可见的，我们希望知道他是怎么执行的，所以我们必须要查看日志！</span><br><span class="line">mybatis-plus:</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      logic-delete-field: deleted # 全局逻辑删除的实体字段名(since <span class="number">3.3</span><span class="number">.0</span>,配置后可以忽略不配置步骤<span class="number">2</span>)</span><br><span class="line">      logic-delete-value: <span class="number">1</span> # 逻辑已删除值(默认为 <span class="number">1</span>)</span><br><span class="line">      logic-not-delete-value: <span class="number">0</span> # 逻辑未删除值(默认为 <span class="number">0</span>)</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><p>添加完后点击应用</p><h3 id="一键生成"><a href="#一键生成" class="headerlink" title="一键生成"></a>一键生成</h3><p>选择<code>数据库表</code>右击选择<code>EasyCode</code>选择第一个</p><p>注意看,目前可以看到我项目左右目录里面并没有什么代码~</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504093031339.png" alt=""></p><p>选择项目工程模块,选择模块对应的包,选择你创建好的组名</p><p>选择单表,选择单表,第一次使用模板不要多表!!!!!!!</p><p>单表构建全选所有配置,侧面按照我选的来选就行,下面我会讲解,因为这里有 Bug</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504093152583.png" alt=""></p><p>点击确定之后可以看到我左侧项目目录代码已经生成完毕了~</p><p>接下来如果你想多表创建就可以这样选择,不需要在选择<span class='p blue'>applicationYAML&interceptor类&R类&handler配置类</span>了</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504094428113.png" alt=""></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>因为本人技术有限,有些地方还是会有一点小 Bug</p><p>如下图所示:在生成的文件里面会发现有 handler 处理类 interceptor 拦截器 util 工具类都相应的爆红了~</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504094957874.png" alt=""></p><p>不要慌,这里的原因很简单,解决方案也就更很简单了</p><p>把文件名修改更 class 类名一直就欧克了</p><p>然后修改 applicationYml 文件,把你数据库名修改一下,账号密码修改一下,就可以跑了~</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504095443091.png" alt=""></p><h3 id="去-mian-访问一下"><a href="#去-mian-访问一下" class="headerlink" title="去 mian 访问一下~"></a>去 mian 访问一下~</h3><p>分页查询一下 200OK 没问题,</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.23/imgs/image-20220504095959606.png" alt=""></p><p>其余的自己测试,这里就不多做阐述了~</p><div class="tip warning"><p>注意:Bug!!!!</p><p>在项目第一次使用模板的时候建议先单表生成,因为<span class='p blue'>applicationYAML&amp;interceptor类&amp;R类&amp;handler配置类</span>都只需生成一次,如果你多表一次性全部全选,就会创建多个<span class='p blue'>applicationYAML&amp;interceptor类&amp;R类&amp;handler配置类</span>,到时候出事就别说我没提醒~</p><p>如有更好的建议,可以在下面留言反馈~</p></div><h3 id="23-12-04更新"><a href="#23-12-04更新" class="headerlink" title="23-12-04更新"></a>23-12-04更新</h3><p>dto.java.vm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">$!&#123;define.vm&#125;</span><br><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line">#save(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.java&quot;</span>)</span><br><span class="line"><span class="keyword">package</span> $!&#123;tableInfo.savePackageName&#125;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#tableComment(<span class="string">&quot;实体类&quot;</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;learning_lesson&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;$&#123;tableInfo.name&#125;对象&quot;, description = &quot;$&#123;tableInfo.comment&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;tableInfo.name&#125; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> $&#123;tool.serial()&#125;;</span><br><span class="line"></span><br><span class="line">    #foreach($column in $tableInfo.pkColumn)</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;$&#123;column.comment&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;$&#123;column.obj.name&#125;&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;tool.getClsNameByFullName($column.type)&#125; $&#123;column.name&#125;;</span><br><span class="line">    #end</span><br><span class="line"></span><br><span class="line">    #foreach($column in $tableInfo.otherColumn)</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;$&#123;column.comment&#125;&quot;)</span></span><br><span class="line">    #<span class="keyword">if</span>($column.name.equals(<span class="string">&quot;createTime&quot;</span>))</span><br><span class="line">    <span class="meta">@TableField(value = &quot;$&#123;column.obj.name&#125;&quot;, fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;tool.getClsNameByFullName($column.type)&#125; $&#123;column.name&#125;;</span><br><span class="line">    </span><br><span class="line">    #elseif($column.name.equals(<span class="string">&quot;updateTime&quot;</span>))</span><br><span class="line">    <span class="meta">@TableField(value = &quot;$&#123;column.obj.name&#125;&quot;, fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;tool.getClsNameByFullName($column.type)&#125; $&#123;column.name&#125;;</span><br><span class="line">    </span><br><span class="line">    #elseif($column.name.equals(<span class="string">&quot;deleted&quot;</span>))</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;是否删除&quot;)</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;tool.getClsNameByFullName($column.type)&#125; $&#123;column.name&#125;;</span><br><span class="line">    </span><br><span class="line">    #<span class="keyword">else</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;$&#123;column.obj.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;tool.getClsNameByFullName($column.type)&#125; $&#123;column.name&#125;;</span><br><span class="line">    </span><br><span class="line">    #end</span><br><span class="line">    #end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#set($author = <span class="string">&quot;SerMs&quot;</span>)</span><br><span class="line">#set($tableName = $tool.append($tableInfo.name, <span class="string">&quot;Controller&quot;</span>))</span><br><span class="line"></span><br><span class="line">$!callback.setFileName($tool.append($tableName, <span class="string">&quot;.java&quot;</span>))</span><br><span class="line">$!callback.setSavePath($tool.append($tableInfo.savePath, <span class="string">&quot;/controller&quot;</span>))</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>(!$tableInfo.pkColumn.isEmpty())</span><br><span class="line">    #set($pk = $tableInfo.pkColumn.get(<span class="number">0</span>))</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>($tableInfo.savePackageName)<span class="keyword">package</span> $!&#123;tableInfo.savePackageName&#125;.#&#123;end&#125;controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $!&#123;tableInfo.comment&#125;($!&#123;tableInfo.name&#125;)表控制层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!time.currTime()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$!tool.firstLowerCase($tableInfo.name)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>!&#123;tableName&#125; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 工具与软件 </category>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EasyCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云部署项目</title>
      <link href="/posts/32277b7.html"/>
      <url>/posts/32277b7.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>前言:ces<br>        学校近期实训周做项目,我想着能不能把项目直接部署在云上,刚好阿里云有ECS服务器免费试用活动,不嫖白不嫖,因此记录本项目的所有部署流程,从申请服务器到部署项目,完整的流程<br>        本次采用的是两台阿里云ECS的服务器,因为我项目采用数据库是主从复制的架构,所以需要两台服务器,刚好我也想把前台部署到第二台服务器上去,第一台服务器部署主要后台代码</p></div><hr><div class="table-container"><table><thead><tr><th style="text-align:center">主库服务器</th><th style="text-align:center">从库服务器</th></tr></thead><tbody><tr><td style="text-align:center">后台代码</td><td style="text-align:center">前台代码</td></tr><tr><td style="text-align:center">mysql5.0主库部署</td><td style="text-align:center">mysql5.0从库部署</td></tr><tr><td style="text-align:center">redis部署</td><td style="text-align:center">Nginx配置</td></tr><tr><td style="text-align:center">JDK环境配置</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">tomcat配置</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Maven环境配置</td></tr></tbody></table></div><hr><h2 id="阿里云服务器申请"><a href="#阿里云服务器申请" class="headerlink" title="阿里云服务器申请"></a>阿里云服务器申请</h2><p>首先去阿里云申请两台服务器,可免费使用1个月<p class='p red'>如果不用了记得提前退订</p></p><div class="tabs" id="ecs申请"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="ecs申请-1">主库SerMsMaster</button><button type="button" class="tab " data-href="ecs申请-2">从库SerMsSlave</button></ul><div class="tab-contents"><div class="tab-item-content active" id="ecs申请-1"><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616160142652.png" alt=""></p></div><div class="tab-item-content" id="ecs申请-2"><p><img src="https://npm.elemecdn.com/serms-assets@1.1.0/imgs/image-20220616222532022.png" alt=""></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><hr><h2 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h2><blockquote><p>通过本地连接阿里云ECS主库</p></blockquote><h2 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h2><blockquote><p>这里不做介绍,自行百度Linux配置网卡</p></blockquote><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h3 id="vim文本工具"><a href="#vim文本工具" class="headerlink" title="vim文本工具"></a>vim文本工具</h3><blockquote><p>yum install vim</p></blockquote><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><blockquote><ol><li><p>去[oracle][<a href="https://www.oracle.com/java/technologies/downloads/archive/]官网下载对应操作系统的JDK">https://www.oracle.com/java/technologies/downloads/archive/]官网下载对应操作系统的JDK</a></p></li><li><p>把下载好的JDK传入Linux</p></li><li><p>执行解压命令: tar -zxvf 改成你自己上传的包名 -C /usr/local</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616164103639.png" alt=""></p></li><li><p>修改系统环境变量:</p><ol><li><p>vim /etc/profile</p></li><li><p>插入以下代码,注意路径修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_331  (注意路径)</span><br><span class="line">export JRE_HOME=/usr/local/jdk1.8.0_331/jre ((注意路径))</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li></ol></li></ol><p> <img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616164702404.png" alt=""></p><ol><li><p>修改完后:wq退出</p></li><li><p>执行 source /etc/profile 刷新环境变量</p></li><li><p>执行 java -version 或 javac 查看是否安装成功</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616165121907.png" alt=""></p><p>看到显示版本号即安装成功</p></li></ol></blockquote><h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><blockquote><ol><li><p><a href="https://tomcat.apache.org/download-90.cgi">官网下载</a>对应系统版本的tomcat安装包</p></li><li><p>并上传至Linux内</p></li><li><p>执行解压命令</p><ol><li>tar -zxvf apache-tomcat-9.0.62.tar.gz -C /usr/local</li></ol></li><li><p>进入到tomcat的bin目录下执行 sh startup.sh</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616170832755.png" alt=""></p></li><li><p>这个时候我还需要去阿里云ECS控制台设置一下安全组规则,把8080端口开打</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616171251694.png" alt=""></p></li><li><p>再去浏览器访问 服务器ip+端口号8080 比如我的是<code>http://47.99.194.162:8080/</code> (本人是把防火墙直接关闭了,所以能访问)</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616171342487.png" alt=""></p></li><li><p>如果还访问不到,那就得改一下防火墙的设置,设置防火墙开放8080端口</p><ol><li><p>设置防火墙开机启动:<code>chkconfig firewalld on</code></p></li><li><p>开启防火墙: <code>systemctl start firewalld</code>(执行完之后,再去访问就访问不到了,所以我们需要开发8080端口)</p></li><li><p>查询8080端口是否开启: <code>firewall-cmd --query-port=8080/tcp</code></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616172135805.png" alt=""></p></li><li><p>开启8080端口</p><ol><li><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code>（–permanent永久生效，没有此参数重启后失效）</li></ol></li><li><p>重启防火墙</p><ol><li>firewall-cmd —reload</li></ol></li><li><p>查看8080端口是否开启成功</p><ol><li>firewall-cmd —zone=public —query-port=8080/tcp</li></ol></li><li><p>当然还可以删除指定端口</p><ol><li>firewall-cmd —zone=public —remove-port=端口号/tcp —permanent</li></ol></li><li><p>再去刷新一下页面,就又可以访问了</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616172712137.png" alt=""></p></li><li><p>查看已开放的所有端口</p><ol><li>firewall-cmd —zone=public —list-ports</li></ol></li><li><p>索性在这里一并开放3306 / 6379 / 8888 端口 后期也会用到</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616174156782.png" alt=""></p></li><li><p>其余操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">停止Tomcat服务</span><br><span class="line">sh shutdown.sh</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>安全提醒:防火墙不建议关闭,已经阿里云服务器安全组也不建议设置全部端口打开,会有一些黑客或者不正当的人入侵服务器,拿你服务器干坏事,本人就是因为此件事搞得我服务器,需要重新配置,索性也就写了这篇文章,真的不要随意打开任何一个端口!!!</p></blockquote><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><blockquote><ol><li><p>一样的去官网下载对应系统版本的安装包,并上传到Linux</p></li><li><p>解压MySql安装包之后会得到以下几个文件</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616202538594.png" alt=""></p></li><li><p>接下来需要按照以下顺序一一安装,按照顺序必须跟我一样</p><ol><li>安装顺序如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">安装到这的时候需要安装一个依赖: net-tools,在执行最后一个安装包,直接执行则会报缺少net-tools依赖</span><br><span class="line">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ol><li>安装完后执行内核更新:<ol><li>yum update</li></ol></li></ol></li><li><p>启动mysql</p><ol><li>systemctl status mysqld       查看mysql服务状态</li><li>systemctl start mysqld        启动mysql服务</li></ol></li><li><p>设置为开机启动</p><ol><li>systemctl enable mysqld</li><li>netstat -tunlp     查看已启动的服务</li><li>ps - ef|grep mysql    查看mysql进程</li></ol></li><li><p>登录mysql</p><ol><li><p>查阅临时密码:      cat /var/log/mysqld.log  | grep password</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616204308979.png" alt=""></p></li><li><p>登录mysql,并修改密码,开放访问权限</p><ol><li><p>mysql -uroot -p   (输入查出来的临时密码)</p></li><li><p>修改密码以及访问权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_length=4;设置密码长度最低位数</span><br><span class="line">set global validate_password_policy=LOW;设置密码安全等级低,便于密码可以修改成root</span><br><span class="line">set password = password(&#x27;root&#x27;);设置密码为root</span><br><span class="line">grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;开启访问权限</span><br><span class="line">flush privileges;刷新权限</span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616204910291.png" alt=""></p></li></ol></li><li><p>到此就可以用Navicat进行外部连接了</p></li></ol></li></ol></blockquote><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><blockquote><ol><li><p>官网下载对应系统版本的安装包,并上传至Linux系统和解压安装,在此不做阐述</p></li><li><p>安装Redis的依赖环境gcc, 执行:   yum install gcc-c++</p></li><li><p>进入安装redis软件目录,进行编译,执行:  make</p></li><li><p>在进入redis软件目录下的src执行: make install</p></li><li><p>redis启动与停止</p><ol><li>在redis/src下执行: ./redis-server</li></ol><p><img src="C:\Users\18399\Desktop\image-20220616210708814.png" alt="image-20220616210708814"></p></li><li><p>进入redis根目录,修改配置文件</p><ol><li><p>vim redis.conf</p></li><li><p>找到daemonize,修改为 yes  允许后台启动</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616211256462.png" alt=""></p></li><li><p>修改配置文件,将 bind 注释 即可实现外部访问</p></li></ol><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616211638029.png" alt=""></p><ol><li>将protected-mode 改为 no</li></ol></li><li><p>启动Redis</p><ol><li><p>src/redis-server ./redis.conf</p></li><li><p>外部进行连接</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616212406655.png" alt=""></p></li></ol></li><li><p>设置为开机启动</p><ol><li><p>网上有很多教程这里就不多阐述了 <a href="https://blog.csdn.net/qq_28041113/article/details/122291622">点我查看教程</a></p></li><li><p>快捷操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">打开redis命令:service redis start</span><br><span class="line">                              </span><br><span class="line">关闭redis命令:service redis stop</span><br><span class="line">                              </span><br><span class="line">设为开机启动:chkconfig redis on</span><br><span class="line">                              </span><br><span class="line">设为开机关闭:chkconfig redis off</span><br></pre></td></tr></table></figure></li></ol></li></ol></blockquote><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><blockquote><p>执行: yum install git</p><p>查看git版本: git —version</p></blockquote><p>安装Mavne</p><blockquote><p>自行百度</p></blockquote><h2 id="后端部署"><a href="#后端部署" class="headerlink" title="后端部署"></a>后端部署</h2><blockquote><ol><li><p>拉取git项目到本地 git clone xxxxx</p></li><li><p>在项目根目录编写启动脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"><span class="built_in">echo</span>  自动化部《湘约楼》署脚本启动 </span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 停止原来运行中的工程</span><br><span class="line">APP_NAME=xyl_take_out</span><br><span class="line"></span><br><span class="line">tpid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;tpid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Stop Process...&#x27;</span></span><br><span class="line">    <span class="built_in">kill</span> -15 <span class="variable">$tpid</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line">tpid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;tpid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Kill Process!&#x27;</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$tpid</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Stop Success!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 准备从Git仓库拉取最新代码</span><br><span class="line"><span class="built_in">cd</span> /usr/local/javaapp/xyl_ms_km</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 开始从Git仓库拉取最新代码</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">echo</span> 代码拉取完成</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 开始打包</span><br><span class="line">output=`mvn clean package -Dmaven.test.skip=<span class="literal">true</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 启动项目</span><br><span class="line"><span class="built_in">nohup</span> java -jar xyl_take_out-1.0-SNAPSHOT.jar &amp;&gt; xyl_take_out.log &amp;</span><br><span class="line"><span class="built_in">echo</span> 项目启动完成</span><br></pre></td></tr></table></figure></li><li><p>赋予脚本最高权限,然后执行, sh xyl.sh</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616221445525.png" alt=""></p><p>稍等片刻,将会打包完成</p><p>这里呢启动之后肯定是访问不到的,因为从库的sql还没配置,所以先配置从库的数据库和前端页面在来启动</p></li></ol></blockquote><h2 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h2><h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h3><blockquote><p>上面有教程,这边不做阐述</p></blockquote><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><ol><li>前期准备</li></ol><blockquote><p>安装依赖包<br>yum -y install gcc pcre-devel zlib-devel openssl openssl-devel<br>下载Nginx安装包<br>wget  <a href="http://nginx.org/download/nginx-1.22.0.tar.gz">http://nginx.org/download/nginx-1.22.0.tar.gz</a><br>解压 tar -zxvf nginx-1.22.0.tar.gz<br>创建文件夹 mkdir -p /usr/local/nginx<br>执行安装命令: ./configure —prefix=/usr/local/nginx<br>执行编译: make &amp;&amp; make install<br>导入静态页面到html目录</p><p>配置反向代理<br>修改nginx.conf文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   html/dist;</span><br><span class="line">    index  index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#反向代理配置</span><br><span class="line">location ^~ /api/ &#123;</span><br><span class="line">    rewrite ^/api/(.*)$ /$1 break;</span><br><span class="line">    proxy_pass http://47.99.194.162:8888/</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><ol><li><p>配置Nginx环境</p><ol><li>编辑 vim /etc/profile</li><li>export PATH=/usr/local/nginx/sbin:$PATH</li><li>执行 source /etc/profile 刷新环境变量</li></ol></li><li><p>配置开机启动</p><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"> &gt;#!/bin/sh</span><br><span class="line"> &gt;#</span><br><span class="line"> &gt;# nginx - this script starts and stops the nginx daemon</span><br><span class="line"> &gt;#</span><br><span class="line"> &gt;# chkconfig:   - 85 15</span><br><span class="line"> &gt;# description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span><br><span class="line"> &gt;#               proxy and IMAP/POP3 proxy server</span><br><span class="line"> &gt;# processname: nginx</span><br><span class="line"> &gt;# config:      /etc/nginx/nginx.conf</span><br><span class="line"> &gt;# config:      /etc/sysconfig/nginx</span><br><span class="line"> &gt;# pidfile:     /var/run/nginx.pid</span><br><span class="line"></span><br><span class="line"> &gt;# Source <span class="keyword">function</span> library.</span><br><span class="line"> &gt;. /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line"> &gt;# Source networking configuration.</span><br><span class="line"> &gt;. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"> &gt;# Check that networking is up.</span><br><span class="line"> &gt;[ <span class="string">&quot;<span class="variable">$NETWORKING</span>&quot;</span> = <span class="string">&quot;no&quot;</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line"> &gt;nginx=<span class="string">&quot;/usr/local/nginx/sbin/nginx&quot;</span></span><br><span class="line"> &gt;prog=$(<span class="built_in">basename</span> <span class="variable">$nginx</span>)</span><br><span class="line"></span><br><span class="line"> &gt;NGINX_CONF_FILE=<span class="string">&quot;/usr/local/nginx/conf/nginx.conf&quot;</span></span><br><span class="line"></span><br><span class="line"> &gt;[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line"> &gt;lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">make_dirs</span></span>() &#123;</span><br><span class="line"> <span class="comment"># make required directories</span></span><br><span class="line"> user=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">&quot;configure arguments:.*--user=&quot;</span> | sed <span class="string">&#x27;s/[^*]*--user=\([^ ]*\).*/\1/g&#x27;</span> -`</span><br><span class="line"> <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$user</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;`grep <span class="variable">$user</span> /etc/passwd`&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">       useradd -M -s /bin/nologin <span class="variable">$user</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    options=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">&#x27;configure arguments:&#x27;</span>`</span><br><span class="line">    <span class="keyword">for</span> opt <span class="keyword">in</span> <span class="variable">$options</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ `<span class="built_in">echo</span> <span class="variable">$opt</span> | grep <span class="string">&#x27;.*-temp-path&#x27;</span>` ]; <span class="keyword">then</span></span><br><span class="line">            value=`<span class="built_in">echo</span> <span class="variable">$opt</span> | <span class="built_in">cut</span> -d <span class="string">&quot;=&quot;</span> -f 2`</span><br><span class="line">            <span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$value</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="comment"># echo &quot;creating&quot; $value</span></span><br><span class="line">                <span class="built_in">mkdir</span> -p <span class="variable">$value</span> &amp;&amp; <span class="built_in">chown</span> -R <span class="variable">$user</span> <span class="variable">$value</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">  [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</span><br><span class="line">  [ -f <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</span><br><span class="line">  make_dirs</span><br><span class="line">  <span class="built_in">echo</span> -n $<span class="string">&quot;Starting <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">  daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">  retval=$?</span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line">  [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; <span class="built_in">touch</span> <span class="variable">$lockfile</span></span><br><span class="line">  <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> -n $<span class="string">&quot;Stopping <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">  killproc <span class="variable">$prog</span> -QUIT</span><br><span class="line">  retval=$?</span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line">  [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; <span class="built_in">rm</span> -f <span class="variable">$lockfile</span></span><br><span class="line">  <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">  configtest || <span class="built_in">return</span> $?</span><br><span class="line">  stop</span><br><span class="line">  <span class="built_in">sleep</span> 1</span><br><span class="line">  start</span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">  configtest || <span class="built_in">return</span> $?</span><br><span class="line">  <span class="built_in">echo</span> -n $<span class="string">&quot;Reloading <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">  killproc <span class="variable">$prog</span> -HUP</span><br><span class="line">  retval=$?</span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">  restart</span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line"><span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">  status <span class="variable">$prog</span></span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">  rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line"> &gt;<span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">      rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">      <span class="variable">$1</span></span><br><span class="line">      ;;</span><br><span class="line">  stop)</span><br><span class="line">      rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">      <span class="variable">$1</span></span><br><span class="line">      ;;</span><br><span class="line">  restart|configtest)</span><br><span class="line">      <span class="variable">$1</span></span><br><span class="line">      ;;</span><br><span class="line">  reload)</span><br><span class="line">      rh_status_q || <span class="built_in">exit</span> 7</span><br><span class="line">      <span class="variable">$1</span></span><br><span class="line">      ;;</span><br><span class="line">  force-reload)</span><br><span class="line">      force_reload</span><br><span class="line">      ;;</span><br><span class="line">  status)</span><br><span class="line">      rh_status</span><br><span class="line">      ;;</span><br><span class="line">  condrestart|try-restart)</span><br><span class="line">      rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">          ;;</span><br><span class="line">  *)</span><br><span class="line">      <span class="built_in">echo</span> $<span class="string">&quot;Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</span></span><br><span class="line">      <span class="built_in">exit</span> 2</span><br><span class="line"> &gt;<span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>这段代码是官方提供的,并不是我自己写的,里面有两行Nginx的路径需要改成你自己的安装路径</p></blockquote></li><li><p>编写完毕之后在/etc/init.d下创建nginx文件,把上面的代码复制进去,并给予最高执行权限</p></li><li><p>使用chkconfig管理</p><ol><li><p><strong>将nginx服务加入chkconfig管理列表</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig --add /etc/init.d/nginx</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用service管理服务</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service nginx start    启动服务   </span></span><br><span class="line"><span class="comment"># service nginx stop     停止服务</span></span><br><span class="line"><span class="comment"># service nginx restart  重启服务</span></span><br><span class="line"><span class="comment"># service nginx status   查询服务的状态</span></span><br><span class="line"><span class="comment"># service nginx relaod   刷新配置文</span></span><br></pre></td></tr></table></figure></li><li><p><strong>设置终端模式开机启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig nginx on</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="安装MySql"><a href="#安装MySql" class="headerlink" title="安装MySql"></a>安装MySql</h3><blockquote><p>上述已经讲到,这里不做阐述</p></blockquote><h2 id="配置主从复制"><a href="#配置主从复制" class="headerlink" title="配置主从复制"></a>配置主从复制</h2><h3 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h3><blockquote><p>修改 vim /etc/my.nf<br>[mysql]<br>log-bin = mysql-bin            #[必须]启用二进制日志<br>server-id=100            服务器唯一ID</p><p>重启mysql服务<br>systemctl restart mysqld</p><p>登录到主库中执行代码<br>GRANT REPLICATION SLAVE ON <em>.</em> to ‘serms’@’%’ identified by ‘Root@123456’;<br>上面SQL的作用是创建一个用户serms,密码为Root@123456,并且给serms用户授予 REPLICATION SLAVE权限,常用于建立复制时所需要用到的用户权限,也就是说slave必须被master授权具有权限的用户,才能提供该用户复制</p><p>执行SQL,查看FIle和Position的值<br>show master status;</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.29/imgs/image-20220616235947262.png" alt=""></p><p>至此不需要在动主库的mysql了</p></blockquote><h3 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h3><blockquote><p>修改mysql数据库配置文件<br>server-id=100<br>刷新数据库</p><p>执行SQL</p><p>change master to master_host=’47.99.194.162’,master_user=’serms’,master_password=’Root@123456’,master_log_file=’mysql-bin.000001’,master_log_pos=438;</p><p>start slave;</p><p>查看数据库状态</p><p>show slave status;</p></blockquote><p>到此呢主库和从库的配置就已经结束啦~</p><p>有些地方写的不是很好, 有不明白的地方请在下方留言</p><h2 id="❤️Sponsor"><a href="#❤️Sponsor" class="headerlink" title="❤️Sponsor"></a>❤️Sponsor</h2><p>您的支持是我不断前进的动力，如果您恰巧财力雄厚，又感觉本文对您有所帮助的话，可以考虑打赏一下本文，用以维持本博客的运营费用，拒绝白嫖，从你我做起！🥰🥰🥰</p><div class="table-container"><table><thead><tr><th style="text-align:center">支付宝</th><th>微信</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/alipay.png" alt=""></td><td><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/wechat.png" alt=""></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 运维部署 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NavigationDuplicated异常警告!!!</title>
      <link href="/posts/86aff880.html"/>
      <url>/posts/86aff880.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Vue路由当你重复传相同参数时,控制台就会报:<span class='p red'>NavigationDuplicated</span></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.25/imgs/image-20220522204757177.png" alt=""></p><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><p>最新的vue-router引入了promise</p><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>通过给push方法传递相应的成功,失败的回调,可以捕获当前错误,可以解决问题</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">name: &#x27;search&#x27;,</span><br><span class="line">query: &#123;</span><br><span class="line">k: this.keyword.toUpperCase(),</span><br><span class="line">&#125;,</span><br><span class="line">params: &#123;</span><br><span class="line">keyword: this.keyword,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">() =&gt; &#123; &#125;,//函数传入成功</span><br><span class="line">() =&gt; &#123; &#125;//函数传入失败</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="tip success"><p><span class='p red'>但是这种方法治标不治本!!!!</span></p></div><hr><blockquote><p>重写Router原型对象上的push方法和replace方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置路由的主文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"><span class="comment">//打印路由原型</span></span><br><span class="line"><span class="comment">// console.log(Router.prototype);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//备份Router原型对象的push方法</span></span><br><span class="line"><span class="keyword">let</span> originPush = <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>;</span><br><span class="line"><span class="comment">// console.log(originPush);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//备份Router原型对象的replace方法</span></span><br><span class="line"><span class="keyword">let</span> originReplace = <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">replace</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写push和replace方法</span></span><br><span class="line"><span class="comment">//第一个参数:路由路径以及传递的参数</span></span><br><span class="line"><span class="comment">//第二个参数:成功的回调</span></span><br><span class="line"><span class="comment">//第三个参数:失败的回调</span></span><br><span class="line"><span class="comment">//this:当前的路由对象(当前组件实例对象)</span></span><br><span class="line"><span class="comment">//call和apply的区别:都是改变this指向,但是call和apply的区别是:call是把参数传递给函数,apply是把参数传递给函数的数组</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">location, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (resolve &amp;&amp; reject) &#123;</span><br><span class="line">        <span class="keyword">return</span> originPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> originPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, <span class="function">() =&gt;</span> &#123; &#125;, <span class="function">() =&gt;</span> &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">replace</span> = <span class="keyword">function</span> (<span class="params">location, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (resolve &amp;&amp; reject) &#123;</span><br><span class="line">        <span class="keyword">return</span> originReplace.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> originReplace.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, <span class="function">() =&gt;</span> &#123; &#125;, <span class="function">() =&gt;</span> &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="comment">//配置路由</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>至此push和replace重复提交问题以全部解决</p><hr><h2 id="❤️Sponsor"><a href="#❤️Sponsor" class="headerlink" title="❤️Sponsor"></a>❤️Sponsor</h2><p>您的支持是我不断前进的动力，如果您恰巧财力雄厚，又感觉本文对您有所帮助的话，可以考虑打赏一下本文，用以维持本博客的运营费用，拒绝白嫖，从你我做起！🥰🥰🥰</p><div class="table-container"><table><thead><tr><th style="text-align:center">支付宝</th><th>微信</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/alipay.png" alt=""></td><td><img src="https://npm.elemecdn.com/serms-assets@1.0.25/serms/img/wechat.png" alt=""></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Bug记录 </category>
          
          <category> 前端开发 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue路由传参的三种方式</title>
      <link href="/posts/da904ab5.html"/>
      <url>/posts/da904ab5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="tip home"><p><strong>vue</strong> 路由传参的使用场景一般都是应用在父路由跳转到子路由时，携带参数跳转。传参方式可划分为 <code>params</code> 传参和 <code>query</code> 传参，而 <code>params</code> 传参又可分为在 <strong>url</strong> 中显示参数和不显示参数两种方式，这就是vue路由传参的三种方式。</p></div><h2 id="方式一：params-传参（显示参数）"><a href="#方式一：params-传参（显示参数）" class="headerlink" title="方式一：params 传参（显示参数）"></a>方式一：<code>params</code> 传参（显示参数）</h2><span class='p red'>params</span> 传参（显示参数）又可分为 声明式 和 编程式 两种方式> 1、声明式 `router-link`该方式是通过 `router-link` 组件的 `to` 属性实现，该方法的参数可以是一个字符串路径，或者一个描述地址的对象。使用该方式传值的时候，需要子路由提前配置好参数，例如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//子路由配置</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/child/:id&#x27;,</span><br><span class="line">component: Child</span><br><span class="line">&#125;</span><br><span class="line">//父路由组件</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/child/123&quot;</span>&gt;</span>进入Child路由<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2、编程式 <code>this.$router.push</code></p></blockquote><p>使用该方式传值的时候，同样需要子路由提前配置好参数，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//子路由配置</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/child/:id&#x27;,</span><br><span class="line">component: Child</span><br><span class="line">&#125;</span><br><span class="line">//父路由编程式传参(一般通过事件触发)</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">path:&#x27;/child/$&#123;id&#125;&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在子路由中可以通过下面代码来获取传递的参数值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure><h2 id="方式二：params-传参（不显示参数）"><a href="#方式二：params-传参（不显示参数）" class="headerlink" title="方式二：params 传参（不显示参数）"></a>方式二：<code>params</code> 传参（不显示参数）</h2><p><code>params</code> 传参（不显示参数）也可分为 声明式 和 编程式 两种方式，与方式一不同的是，这里是通过路由的别名 <code>name</code> 进行传值的</p><p>1、声明式 <code>router-link</code></p><p>该方式也是通过 <code>router-link</code> 组件的 <code>to</code> 属性实现，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;Child&#x27;,params:&#123;id:123&#125;&#125;&quot;&gt;进入Child路由&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>2、编程式 <code>this.$router.push</code></p><p>使用该方式传值的时候，同样需要子路由提前配置好参数，不过不能再使用 <code>:/id</code> 来传递参数了，因为父路由中，已经使用 <code>params</code> 来携带参数了，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//子路由配置</span><br><span class="line">&#123;</span><br><span class="line">  path: &#x27;/child,</span><br><span class="line">  name: &#x27;Child&#x27;,</span><br><span class="line">  component: Child</span><br><span class="line">&#125;</span><br><span class="line">//父路由编程式传参(一般通过事件触发)</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">    name:&#x27;Child&#x27;,</span><br><span class="line">    params:&#123;</span><br><span class="line">    id:123</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在子路由中可以通过下面代码来获取传递的参数值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure><p><strong>注意：上述这种利用 <code>params</code> 不显示 <code>url</code> 传参的方式会导致在刷新页面的时候，传递的值会丢失</strong></p><h2 id="方式三：query-传参（显示参数）"><a href="#方式三：query-传参（显示参数）" class="headerlink" title="方式三：query 传参（显示参数）"></a>方式三：<code>query</code> 传参（显示参数）</h2><p><code>query</code> 传参（显示参数）也可分为 声明式 和 编程式 两种方式</p><blockquote><p>1、声明式 <code>router-link</code></p></blockquote><p>该方式也是通过 <code>router-link</code> 组件的 <code>to</code> 属性实现，不过使用该方式传值的时候，需要子路由提前配置好路由别名（<code>name</code> 属性），例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//子路由配置</span><br><span class="line">&#123;</span><br><span class="line">  path: &#x27;/child,</span><br><span class="line">  name: &#x27;Child&#x27;,</span><br><span class="line">  component: Child</span><br><span class="line">&#125;</span><br><span class="line">//父路由组件</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;Child&#x27;,query:&#123;id:123&#125;&#125;&quot;&gt;进入Child路由&lt;/router-link&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2、编程式 <code>this.$router.push</code></p></blockquote><p>使用该方式传值的时候，同样需要子路由提前配置好路由别名（<code>name</code> 属性），例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//子路由配置</span><br><span class="line">&#123;</span><br><span class="line">  path: &#x27;/child,</span><br><span class="line">  name: &#x27;Child&#x27;,</span><br><span class="line">  component: Child</span><br><span class="line">&#125;</span><br><span class="line">//父路由编程式传参(一般通过事件触发)</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">    name:&#x27;Child&#x27;,</span><br><span class="line">    query:&#123;</span><br><span class="line">    id:123</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在子路由中可以通过下面代码来获取传递的参数值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.query.id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring常见面试题</title>
      <link href="/posts/5dd00982.html"/>
      <url>/posts/5dd00982.html</url>
      
        <content type="html"><![CDATA[<h2 id="一般问题"><a href="#一般问题" class="headerlink" title="一般问题"></a>一般问题</h2><h3 id="不同版本的-Spring-Framework-有哪些主要功能？"><a href="#不同版本的-Spring-Framework-有哪些主要功能？" class="headerlink" title="不同版本的 Spring Framework 有哪些主要功能？"></a>不同版本的 Spring Framework 有哪些主要功能？</h3><div class="table-container"><table><thead><tr><th>Version</th><th>Feature</th></tr></thead><tbody><tr><td>Spring 2.5</td><td>发布于 2007 年。这是第一个支持注解的版本。</td></tr><tr><td>Spring 3.0</td><td>发布于 2009 年。它完全利用了 Java5 中的改进，并为 JEE6 提供了支持。</td></tr><tr><td>Spring 4.0</td><td>发布于 2013 年。这是第一个完全支持 JAVA8 的版本。</td></tr></tbody></table></div><h3 id="什么是-Spring-Framework？"><a href="#什么是-Spring-Framework？" class="headerlink" title="什么是 Spring Framework？"></a>什么是 Spring Framework？</h3><ul><li>Spring 是一个开源应用框架，旨在降低应用程序开发的复杂度。</li><li>它是轻量级、松散耦合的。</li><li>它具有分层体系结构，允许用户选择组件，同时还为 J2EE 应用程序开发提供了一个有凝聚力的框架。</li><li>它可以集成其他框架，如 Structs、Hibernate、EJB 等，所以又称为框架的框架。</li></ul><h3 id="列举-Spring-Framework-的优点。"><a href="#列举-Spring-Framework-的优点。" class="headerlink" title="列举 Spring Framework 的优点。"></a>列举 Spring Framework 的优点。</h3><ul><li>由于 Spring Frameworks 的分层架构，用户可以自由选择自己需要的组件。</li><li>Spring Framework 支持 POJO(Plain Old Java Object) 编程，从而具备持续集成和可测试性。</li><li>由于依赖注入和控制反转，JDBC 得以简化。</li><li>它是开源免费的。</li></ul><h3 id="Spring-Framework-有哪些不同的功能？"><a href="#Spring-Framework-有哪些不同的功能？" class="headerlink" title="Spring Framework 有哪些不同的功能？"></a>Spring Framework 有哪些不同的功能？</h3><ul><li><strong>轻量级</strong> - Spring 在代码量和透明度方面都很轻便。</li><li><strong>IOC</strong> - 控制反转</li><li><strong>AOP</strong> - 面向切面编程可以将应用业务逻辑和系统服务分离，以实现高内聚。</li><li><strong>容器</strong> - Spring 负责创建和管理对象（Bean）的生命周期和配置。</li><li><strong>MVC</strong> - 对 web 应用提供了高度可配置性，其他框架的集成也十分方便。</li><li><strong>事务管理</strong> - 提供了用于事务管理的通用抽象层。Spring 的事务支持也可用于容器较少的环境。</li><li><strong>JDBC 异常</strong> - Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。</li></ul><h3 id="Spring-Framework-中有多少个模块，它们分别是什么？"><a href="#Spring-Framework-中有多少个模块，它们分别是什么？" class="headerlink" title="Spring Framework 中有多少个模块，它们分别是什么？"></a>Spring Framework 中有多少个模块，它们分别是什么？</h3><ul><li><p>Spring 核心容器</p><p>– 该层基本上是 Spring Framework 的核心。它包含以下模块：</p><ul><li>Spring Core</li><li>Spring Bean</li><li>SpEL (Spring Expression Language)</li><li>Spring Context</li></ul></li><li><p>数据访问/集成</p><p>– 该层提供与数据库交互的支持。它包含以下模块：</p><ul><li>JDBC (Java DataBase Connectivity)</li><li>ORM (Object Relational Mapping)</li><li>OXM (Object XML Mappers)</li><li>JMS (Java Messaging Service)</li><li>Transaction</li></ul></li><li><p>Web</p><p>– 该层提供了创建 Web 应用程序的支持。它包含以下模块：</p><ul><li>Web</li><li>Web – Servlet</li><li>Web – Socket</li><li>Web – Portlet</li></ul></li><li><p><strong>AOP</strong> – 该层支持面向切面编程</p></li><li><p><strong>Instrumentation</strong> – 该层为类检测和类加载器实现提供支持。</p></li><li><p><strong>Test</strong> – 该层为使用 JUnit 和 TestNG 进行测试提供支持。</p></li><li><p>几个杂项模块:</p><ul><li>Messaging – 该模块为 STOMP 提供支持。它还支持注解编程模型，该模型用于从 WebSocket 客户端路由和处理 STOMP 消息。</li><li>Aspects – 该模块为与 AspectJ 的集成提供支持。</li></ul></li></ul><h3 id="什么是-Spring-配置文件？"><a href="#什么是-Spring-配置文件？" class="headerlink" title="什么是 Spring 配置文件？"></a>什么是 Spring 配置文件？</h3><p>Spring 配置文件是 XML 文件。该文件主要包含类信息。它描述了这些类是如何配置以及相互引入的。但是，XML 配置文件冗长且更加干净。如果没有正确规划和编写，那么在大项目中管理变得非常困难。</p><h3 id="Spring-应用程序有哪些不同组件？"><a href="#Spring-应用程序有哪些不同组件？" class="headerlink" title="Spring 应用程序有哪些不同组件？"></a>Spring 应用程序有哪些不同组件？</h3><p>Spring 应用一般有以下组件：</p><ul><li><strong>接口</strong> - 定义功能。</li><li><strong>Bean 类</strong> - 它包含属性，setter 和 getter 方法，函数等。</li><li><strong>Spring 面向切面编程（AOP）</strong> - 提供面向切面编程的功能。</li><li><strong>Bean 配置文件</strong> - 包含类的信息以及如何配置它们。</li><li><strong>用户程序</strong> - 它使用接口。</li></ul><h3 id="使用-Spring-有哪些方式？"><a href="#使用-Spring-有哪些方式？" class="headerlink" title="使用 Spring 有哪些方式？"></a>使用 Spring 有哪些方式？</h3><p>使用 Spring 有以下方式：</p><ul><li>作为一个成熟的 Spring Web 应用程序。</li><li>作为第三方 Web 框架，使用 Spring Frameworks 中间层。</li><li>用于远程使用。</li><li>作为企业级 Java Bean，它可以包装现有的 POJO（Plain Old Java Objects）。</li></ul><h2 id="依赖注入（Ioc）"><a href="#依赖注入（Ioc）" class="headerlink" title="依赖注入（Ioc）"></a>依赖注入（Ioc）</h2><h3 id="什么是-Spring-IOC-容器？"><a href="#什么是-Spring-IOC-容器？" class="headerlink" title="什么是 Spring IOC 容器？"></a>什么是 Spring IOC 容器？</h3><p>Spring 框架的核心是 Spring 容器。容器创建对象，将它们装配在一起，配置它们并管理它们的完整生命周期。Spring 容器使用依赖注入来管理组成应用程序的组件。容器通过读取提供的配置元数据来接收对象进行实例化，配置和组装的指令。该元数据可以通过 XML，Java 注解或 Java 代码提供。</p><p><img src="https://upload-images.jianshu.io/upload_images/3101171-33099411d16ca051.png" alt="img"></p><h3 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h3><p>在依赖注入中，您不必创建对象，但必须描述如何创建它们。您不是直接在代码中将组件和服务连接在一起，而是描述配置文件中哪些组件需要哪些服务。由 IoC 容器将它们装配在一起。</p><h3 id="可以通过多少种方式完成依赖注入？"><a href="#可以通过多少种方式完成依赖注入？" class="headerlink" title="可以通过多少种方式完成依赖注入？"></a>可以通过多少种方式完成依赖注入？</h3><p>通常，依赖注入可以通过三种方式完成，即：</p><ul><li>构造函数注入</li><li>setter 注入</li><li>接口注入</li></ul><p>在 Spring Framework 中，仅使用构造函数和 setter 注入。</p><h3 id="区分构造函数注入和-setter-注入。"><a href="#区分构造函数注入和-setter-注入。" class="headerlink" title="区分构造函数注入和 setter 注入。"></a>区分构造函数注入和 setter 注入。</h3><div class="table-container"><table><thead><tr><th>构造函数注入</th><th>setter 注入</th></tr></thead><tbody><tr><td>没有部分注入</td><td>有部分注入</td></tr><tr><td>不会覆盖 setter 属性</td><td>会覆盖 setter 属性</td></tr><tr><td>任意修改都会创建一个新实例</td><td>任意修改不会创建一个新实例</td></tr><tr><td>适用于设置很多属性</td><td>适用于设置少量属性</td></tr></tbody></table></div><h3 id="spring-中有多少种-IOC-容器？"><a href="#spring-中有多少种-IOC-容器？" class="headerlink" title="spring 中有多少种 IOC 容器？"></a>spring 中有多少种 IOC 容器？</h3><ul><li>BeanFactory - BeanFactory 就像一个包含 bean 集合的工厂类。它会在客户端要求时实例化 bean。</li><li>ApplicationContext - ApplicationContext 接口扩展了 BeanFactory 接口。它在 BeanFactory 基础上提供了一些额外的功能。</li></ul><h3 id="区分-BeanFactory-和-ApplicationContext。"><a href="#区分-BeanFactory-和-ApplicationContext。" class="headerlink" title="区分 BeanFactory 和 ApplicationContext。"></a>区分 BeanFactory 和 ApplicationContext。</h3><div class="table-container"><table><thead><tr><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>它使用懒加载</td><td>它使用即时加载</td></tr><tr><td>它使用语法显式提供资源对象</td><td>它自己创建和管理资源对象</td></tr><tr><td>不支持国际化</td><td>支持国际化</td></tr><tr><td>不支持基于依赖的注解</td><td>支持基于依赖的注解</td></tr></tbody></table></div><h3 id="列举-IoC-的一些好处。"><a href="#列举-IoC-的一些好处。" class="headerlink" title="列举 IoC 的一些好处。"></a>列举 IoC 的一些好处。</h3><p>IoC 的一些好处是：</p><ul><li>它将最小化应用程序中的代码量。</li><li>它将使您的应用程序易于测试，因为它不需要单元测试用例中的任何单例或 JNDI 查找机制。</li><li>它以最小的影响和最少的侵入机制促进松耦合。</li><li>它支持即时的实例化和延迟加载服务。</li></ul><h3 id="Spring-IoC-的实现机制。"><a href="#Spring-IoC-的实现机制。" class="headerlink" title="Spring IoC 的实现机制。"></a>Spring IoC 的实现机制。</h3><p>Spring 中的 IoC 的实现原理就是工厂模式加反射机制。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orange</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title function_">getInstance</span><span class="params">(String ClassName)</span> &#123;</span><br><span class="line">        Fruit f=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f=(Fruit)Class.forName(ClassName).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span> &#123;</span><br><span class="line">        Fruit f=Factory.getInstance(<span class="string">&quot;io.github.dunwu.spring.Apple&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(f!=<span class="literal">null</span>)&#123;</span><br><span class="line">            f.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Beans"><a href="#Beans" class="headerlink" title="Beans"></a>Beans</h2><h3 id="什么是-spring-bean？"><a href="#什么是-spring-bean？" class="headerlink" title="什么是 spring bean？"></a>什么是 spring bean？</h3><ul><li>它们是构成用户应用程序主干的对象。</li><li>Bean 由 Spring IoC 容器管理。</li><li>它们由 Spring IoC 容器实例化，配置，装配和管理。</li><li>Bean 是基于用户提供给容器的配置元数据创建。</li></ul><h3 id="spring-提供了哪些配置方式？"><a href="#spring-提供了哪些配置方式？" class="headerlink" title="spring 提供了哪些配置方式？"></a>spring 提供了哪些配置方式？</h3><ul><li>基于 xml 配置</li></ul><p>bean 所需的依赖项和服务在 XML 格式的配置文件中指定。这些配置文件通常包含许多 bean 定义和特定于应用程序的配置选项。它们通常以 bean 标签开头。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentbean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.edureka.firstSpring.StudentBean&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Edureka&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于注解配置</li></ul><p>您可以通过在相关的类，方法或字段声明上使用注解，将 bean 配置为组件类本身，而不是使用 XML 来描述 bean 装配。默认情况下，Spring 容器中未打开注解装配。因此，您需要在使用它之前在 Spring 配置文件中启用它。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bean definitions go here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于 Java API 配置</li></ul><p>Spring 的 Java 配置是通过使用 @Bean 和 @Configuration 来实现。</p><ol><li>@Bean 注解扮演与 <code>&lt;bean /&gt;</code> 元素相同的角色。</li><li>@Configuration 类允许通过简单地调用同一个类中的其他 @Bean 方法来定义 bean 间依赖关系。</li></ol><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> StudentBean <span class="title function_">myStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-支持集中-bean-scope？"><a href="#spring-支持集中-bean-scope？" class="headerlink" title="spring 支持集中 bean scope？"></a>spring 支持集中 bean scope？</h3><p>Spring bean 支持 5 种 scope：</p><ul><li><strong>Singleton</strong> - 每个 Spring IoC 容器仅有一个单实例。</li><li><strong>Prototype</strong> - 每次请求都会产生一个新的实例。</li><li><strong>Request</strong> - 每一次 HTTP 请求都会产生一个新的实例，并且该 bean 仅在当前 HTTP 请求内有效。</li><li><strong>Session</strong> - 每一次 HTTP 请求都会产生一个新的 bean，同时该 bean 仅在当前 HTTP session 内有效。</li><li><strong>Global-session</strong> - 类似于标准的 HTTP Session 作用域，不过它仅仅在基于 portlet 的 web 应用中才有意义。Portlet 规范定义了全局 Session 的概念，它被所有构成某个 portlet web 应用的各种不同的 portlet 所共享。在 global session 作用域中定义的 bean 被限定于全局 portlet Session 的生命周期范围内。如果你在 web 中使用 global session 作用域来标识 bean，那么 web 会自动当成 session 类型来使用。</li></ul><p>仅当用户使用支持 Web 的 ApplicationContext 时，最后三个才可用。</p><h3 id="spring-bean-容器的生命周期是什么样的？"><a href="#spring-bean-容器的生命周期是什么样的？" class="headerlink" title="spring bean 容器的生命周期是什么样的？"></a>spring bean 容器的生命周期是什么样的？</h3><p>spring bean 容器的生命周期流程如下：</p><ol><li>Spring 容器根据配置中的 bean 定义中实例化 bean。</li><li>Spring 使用依赖注入填充所有属性，如 bean 中所定义的配置。</li><li>如果 bean 实现 BeanNameAware 接口，则工厂通过传递 bean 的 ID 来调用 setBeanName()。</li><li>如果 bean 实现 BeanFactoryAware 接口，工厂通过传递自身的实例来调用 setBeanFactory()。</li><li>如果存在与 bean 关联的任何 BeanPostProcessors，则调用 preProcessBeforeInitialization() 方法。</li><li>如果为 bean 指定了 init 方法（<code>&lt;bean&gt;</code> 的 init-method 属性），那么将调用它。</li><li>最后，如果存在与 bean 关联的任何 BeanPostProcessors，则将调用 postProcessAfterInitialization() 方法。</li><li>如果 bean 实现 DisposableBean 接口，当 spring 容器关闭时，会调用 destory()。</li><li>如果为 bean 指定了 destroy 方法（<code>&lt;bean&gt;</code> 的 destroy-method 属性），那么将调用它。</li></ol><h3 id="什么是-spring-的内部-bean？"><a href="#什么是-spring-的内部-bean？" class="headerlink" title="什么是 spring 的内部 bean？"></a>什么是 spring 的内部 bean？</h3><p>只有将 bean 用作另一个 bean 的属性时，才能将 bean 声明为内部 bean。为了定义 bean，Spring 的基于 XML 的配置元数据在 <code>&lt;property&gt;</code> 或 <code>&lt;constructor-arg&gt;</code> 中提供了 <code>&lt;bean&gt;</code> 元素的使用。内部 bean 总是匿名的，它们总是作为原型。</p><p>例如，假设我们有一个 Student 类，其中引用了 Person 类。这里我们将只创建一个 Person 类实例并在 Student 中使用它。</p><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="comment">//Setters and Getters</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//Setters and Getters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bean.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">“StudentBean</span>&quot; <span class="attr">class</span>=<span class="string">&quot;com.edureka.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--This is inner bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.edureka.Person&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">“Scott</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">“Bangalore</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="什么是-spring-装配"><a href="#什么是-spring-装配" class="headerlink" title="什么是 spring 装配"></a>什么是 spring 装配</h3><p>当 bean 在 Spring 容器中组合在一起时，它被称为装配或 bean 装配。 Spring 容器需要知道需要什么 bean 以及容器应该如何使用依赖注入来将 bean 绑定在一起，同时装配 bean。</p><h3 id="自动装配有哪些方式？"><a href="#自动装配有哪些方式？" class="headerlink" title="自动装配有哪些方式？"></a>自动装配有哪些方式？</h3><p>Spring 容器能够自动装配 bean。也就是说，可以通过检查 BeanFactory 的内容让 Spring 自动解析 bean 的协作者。</p><p>自动装配的不同模式：</p><ul><li><strong>no</strong> - 这是默认设置，表示没有自动装配。应使用显式 bean 引用进行装配。</li><li><strong>byName</strong> - 它根据 bean 的名称注入对象依赖项。它匹配并装配其属性与 XML 文件中由相同名称定义的 bean。</li><li><strong>byType</strong> - 它根据类型注入对象依赖项。如果属性的类型与 XML 文件中的一个 bean 名称匹配，则匹配并装配属性。</li><li><strong>构造函数</strong> - 它通过调用类的构造函数来注入依赖项。它有大量的参数。</li><li><strong>autodetect</strong> - 首先容器尝试通过构造函数使用 autowire 装配，如果不能，则尝试通过 byType 自动装配。</li></ul><h3 id="自动装配有什么局限？"><a href="#自动装配有什么局限？" class="headerlink" title="自动装配有什么局限？"></a>自动装配有什么局限？</h3><ul><li>覆盖的可能性 - 您始终可以使用 <code>&lt;constructor-arg&gt;</code> 和 <code>&lt;property&gt;</code> 设置指定依赖项，这将覆盖自动装配。</li><li>基本元数据类型 - 简单属性（如原数据类型，字符串和类）无法自动装配。</li><li>令人困惑的性质 - 总是喜欢使用明确的装配，因为自动装配不太精确。</li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="你用过哪些重要的-Spring-注解？"><a href="#你用过哪些重要的-Spring-注解？" class="headerlink" title="你用过哪些重要的 Spring 注解？"></a>你用过哪些重要的 Spring 注解？</h3><ul><li><strong>@Controller</strong> - 用于 Spring MVC 项目中的控制器类。</li><li><strong>@Service</strong> - 用于服务类。</li><li><strong>@RequestMapping</strong> - 用于在控制器处理程序方法中配置 URI 映射。</li><li><strong>@ResponseBody</strong> - 用于发送 Object 作为响应，通常用于发送 XML 或 JSON 数据作为响应。</li><li><strong>@PathVariable</strong> - 用于将动态值从 URI 映射到处理程序方法参数。</li><li><strong>@Autowired</strong> - 用于在 spring bean 中自动装配依赖项。</li><li><strong>@Qualifier</strong> - 使用 @Autowired 注解，以避免在存在多个 bean 类型实例时出现混淆。</li><li><strong>@Scope</strong> - 用于配置 spring bean 的范围。</li><li><strong>@Configuration</strong>，<strong>@ComponentScan</strong> 和 <strong>@Bean</strong> - 用于基于 java 的配置。</li><li><strong>@Aspect</strong>，<strong>@Before</strong>，<strong>@After</strong>，<strong>@Around</strong>，<strong>@Pointcut</strong> - 用于切面编程（AOP）。</li></ul><h3 id="如何在-spring-中启动注解装配？"><a href="#如何在-spring-中启动注解装配？" class="headerlink" title="如何在 spring 中启动注解装配？"></a>如何在 spring 中启动注解装配？</h3><p>默认情况下，Spring 容器中未打开注解装配。因此，要使用基于注解装配，我们必须通过配置<code>&lt;context：annotation-config /&gt;</code> 元素在 Spring 配置文件中启用它。</p><h3 id="Component-Controller-Repository-Service-有何区别？"><a href="#Component-Controller-Repository-Service-有何区别？" class="headerlink" title="@Component, @Controller, @Repository, @Service 有何区别？"></a>@Component, @Controller, @Repository, @Service 有何区别？</h3><ul><li>@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。</li><li>@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。</li><li>@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。</li><li>@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。</li></ul><h3 id="Required-注解有什么用？"><a href="#Required-注解有什么用？" class="headerlink" title="@Required 注解有什么用？"></a>@Required 注解有什么用？</h3><p>@Required 应用于 bean 属性 setter 方法。此注解仅指示必须在配置时使用 bean 定义中的显式属性值或使用自动装配填充受影响的 bean 属性。如果尚未填充受影响的 bean 属性，则容器将抛出 BeanInitializationException。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Required</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> string <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Autowired-注解有什么用？"><a href="#Autowired-注解有什么用？" class="headerlink" title="@Autowired 注解有什么用？"></a>@Autowired 注解有什么用？</h3><p>@Autowired 可以更准确地控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造函数，具有任意名称或多个参数的属性或方法上自动装配 bean。默认情况下，它是类型驱动的注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> string <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Qualifier-注解有什么用？"><a href="#Qualifier-注解有什么用？" class="headerlink" title="@Qualifier 注解有什么用？"></a>@Qualifier 注解有什么用？</h3><p>当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。</p><p>例如，这里我们分别有两个类，Employee 和 EmpAccount。在 EmpAccount 中，使用@Qualifier 指定了必须装配 id 为 emp1 的 bean。</p><p>Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> string <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpAccount.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpAccount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Employee emp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(emp1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(“Employee name : ”+emp.getName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestMapping-注解有什么用？"><a href="#RequestMapping-注解有什么用？" class="headerlink" title="@RequestMapping 注解有什么用？"></a>@RequestMapping 注解有什么用？</h3><p>@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注解可应用于两个级别：</p><ul><li>类级别：映射请求的 URL</li><li>方法级别：映射 URL 以及 HTTP 请求方法</li></ul><h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><h3 id="spring-DAO-有什么用？"><a href="#spring-DAO-有什么用？" class="headerlink" title="spring DAO 有什么用？"></a>spring DAO 有什么用？</h3><p>Spring DAO 使得 JDBC，Hibernate 或 JDO 这样的数据访问技术更容易以一种统一的方式工作。这使得用户容易在持久性技术之间切换。它还允许您在编写代码时，无需考虑捕获每种技术不同的异常。</p><h3 id="列举-Spring-DAO-抛出的异常。"><a href="#列举-Spring-DAO-抛出的异常。" class="headerlink" title="列举 Spring DAO 抛出的异常。"></a>列举 Spring DAO 抛出的异常。</h3><h3 id="spring-JDBC-API-中存在哪些类？"><a href="#spring-JDBC-API-中存在哪些类？" class="headerlink" title="spring JDBC API 中存在哪些类？"></a>spring JDBC API 中存在哪些类？</h3><ul><li>JdbcTemplate</li><li>SimpleJdbcTemplate</li><li>NamedParameterJdbcTemplate</li><li>SimpleJdbcInsert</li><li>SimpleJdbcCall</li></ul><h3 id="使用-Spring-访问-Hibernate-的方法有哪些？"><a href="#使用-Spring-访问-Hibernate-的方法有哪些？" class="headerlink" title="使用 Spring 访问 Hibernate 的方法有哪些？"></a>使用 Spring 访问 Hibernate 的方法有哪些？</h3><p>我们可以通过两种方式使用 Spring 访问 Hibernate：</p><ol><li>使用 Hibernate 模板和回调进行控制反转</li><li>扩展 HibernateDAOSupport 并应用 AOP 拦截器节点</li></ol><h3 id="列举-spring-支持的事务管理类型"><a href="#列举-spring-支持的事务管理类型" class="headerlink" title="列举 spring 支持的事务管理类型"></a>列举 spring 支持的事务管理类型</h3><p>Spring 支持两种类型的事务管理：</p><ol><li>程序化事务管理：在此过程中，在编程的帮助下管理事务。它为您提供极大的灵活性，但维护起来非常困难。</li><li>声明式事务管理：在此，事务管理与业务代码分离。仅使用注解或基于 XML 的配置来管理事务。</li></ol><h3 id="spring-支持哪些-ORM-框架"><a href="#spring-支持哪些-ORM-框架" class="headerlink" title="spring 支持哪些 ORM 框架"></a>spring 支持哪些 ORM 框架</h3><ul><li>Hibernate</li><li>iBatis</li><li>JPA</li><li>JDO</li><li>OJB</li></ul><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="什么是-AOP？"><a href="#什么是-AOP？" class="headerlink" title="什么是 AOP？"></a>什么是 AOP？</h3><p>AOP(Aspect-Oriented Programming), 即 <strong>面向切面编程</strong>, 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角. 在 OOP 中, 我们以类(class)作为我们的基本单元, 而 AOP 中的基本单元是 <strong>Aspect(切面)</strong></p><h3 id="AOP-中的-Aspect、Advice、Pointcut、JointPoint-和-Advice-参数分别是什么？"><a href="#AOP-中的-Aspect、Advice、Pointcut、JointPoint-和-Advice-参数分别是什么？" class="headerlink" title="AOP 中的 Aspect、Advice、Pointcut、JointPoint 和 Advice 参数分别是什么？"></a>AOP 中的 Aspect、Advice、Pointcut、JointPoint 和 Advice 参数分别是什么？</h3><ul><li><strong>Aspect</strong> - Aspect 是一个实现交叉问题的类，例如事务管理。方面可以是配置的普通类，然后在 Spring Bean 配置文件中配置，或者我们可以使用 Spring AspectJ 支持使用 @Aspect 注解将类声明为 Aspect。</li><li><strong>Advice</strong> - Advice 是针对特定 JoinPoint 采取的操作。在编程方面，它们是在应用程序中达到具有匹配切入点的特定 JoinPoint 时执行的方法。您可以将 Advice 视为 Spring 拦截器（Interceptor）或 Servlet 过滤器（filter）。</li><li><strong>Advice Arguments</strong> - 我们可以在 advice 方法中传递参数。我们可以在切入点中使用 args() 表达式来应用于与参数模式匹配的任何方法。如果我们使用它，那么我们需要在确定参数类型的 advice 方法中使用相同的名称。</li><li><strong>Pointcut</strong> - Pointcut 是与 JoinPoint 匹配的正则表达式，用于确定是否需要执行 Advice。 Pointcut 使用与 JoinPoint 匹配的不同类型的表达式。Spring 框架使用 AspectJ Pointcut 表达式语言来确定将应用通知方法的 JoinPoint。</li><li><strong>JoinPoint</strong> - JoinPoint 是应用程序中的特定点，例如方法执行，异常处理，更改对象变量值等。在 Spring AOP 中，JoinPoint 始终是方法的执行器。</li></ul><h3 id="什么是通知（Advice）？"><a href="#什么是通知（Advice）？" class="headerlink" title="什么是通知（Advice）？"></a>什么是通知（Advice）？</h3><p>特定 JoinPoint 处的 Aspect 所采取的动作称为 Advice。Spring AOP 使用一个 Advice 作为拦截器，在 JoinPoint “周围”维护一系列的拦截器。</p><h3 id="有哪些类型的通知（Advice）？"><a href="#有哪些类型的通知（Advice）？" class="headerlink" title="有哪些类型的通知（Advice）？"></a>有哪些类型的通知（Advice）？</h3><ul><li><strong>Before</strong> - 这些类型的 Advice 在 joinpoint 方法之前执行，并使用 @Before 注解标记进行配置。</li><li><strong>After Returning</strong> - 这些类型的 Advice 在连接点方法正常执行后执行，并使用@AfterReturning 注解标记进行配置。</li><li><strong>After Throwing</strong> - 这些类型的 Advice 仅在 joinpoint 方法通过抛出异常退出并使用 @AfterThrowing 注解标记配置时执行。</li><li><strong>After (finally)</strong> - 这些类型的 Advice 在连接点方法之后执行，无论方法退出是正常还是异常返回，并使用 @After 注解标记进行配置。</li><li><strong>Around</strong> - 这些类型的 Advice 在连接点之前和之后执行，并使用 @Around 注解标记进行配置。</li></ul><h3 id="指出在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处。"><a href="#指出在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处。" class="headerlink" title="指出在 spring aop 中 concern 和 cross-cutting concern 的不同之处。"></a>指出在 spring aop 中 concern 和 cross-cutting concern 的不同之处。</h3><p>concern 是我们想要在应用程序的特定模块中定义的行为。它可以定义为我们想要实现的功能。</p><p>cross-cutting concern 是一个适用于整个应用的行为，这会影响整个应用程序。例如，日志记录，安全性和数据传输是应用程序几乎每个模块都需要关注的问题，因此它们是跨领域的问题。</p><h3 id="AOP-有哪些实现方式？"><a href="#AOP-有哪些实现方式？" class="headerlink" title="AOP 有哪些实现方式？"></a>AOP 有哪些实现方式？</h3><p>实现 AOP 的技术，主要分为两大类：</p><ul><li>静态代理 - 指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；<ul><li>编译时编织（特殊编译器实现）</li><li>类加载时编织（特殊的类加载器实现）。</li></ul></li><li>动态代理 - 在运行时在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。<ul><li>JDK 动态代理</li><li>CGLIB</li></ul></li></ul><h3 id="Spring-AOP-and-AspectJ-AOP-有什么区别？"><a href="#Spring-AOP-and-AspectJ-AOP-有什么区别？" class="headerlink" title="Spring AOP and AspectJ AOP 有什么区别？"></a>Spring AOP and AspectJ AOP 有什么区别？</h3><p>Spring AOP 基于动态代理方式实现；AspectJ 基于静态代理方式实现。 Spring AOP 仅支持方法级别的 PointCut；提供了完全的 AOP 支持，它还支持属性级别的 PointCut。</p><h3 id="如何理解-Spring-中的代理？"><a href="#如何理解-Spring-中的代理？" class="headerlink" title="如何理解 Spring 中的代理？"></a>如何理解 Spring 中的代理？</h3><p>将 Advice 应用于目标对象后创建的对象称为代理。在客户端对象的情况下，目标对象和代理对象是相同的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Advice + Target Object = Proxy</span><br></pre></td></tr></table></figure><h3 id="什么是编织（Weaving）？"><a href="#什么是编织（Weaving）？" class="headerlink" title="什么是编织（Weaving）？"></a>什么是编织（Weaving）？</h3><p>为了创建一个 advice 对象而链接一个 aspect 和其它应用类型或对象，称为编织（Weaving）。在 Spring AOP 中，编织在运行时执行。请参考下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/3101171-cfaa92f0e4115b4a.png" alt="img"></p><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="Spring-MVC-框架有什么用？"><a href="#Spring-MVC-框架有什么用？" class="headerlink" title="Spring MVC 框架有什么用？"></a>Spring MVC 框架有什么用？</h3><p>Spring Web MVC 框架提供 <strong>模型-视图-控制器</strong> 架构和随时可用的组件，用于开发灵活且松散耦合的 Web 应用程序。 MVC 模式有助于分离应用程序的不同方面，如输入逻辑，业务逻辑和 UI 逻辑，同时在所有这些元素之间提供松散耦合。</p><h3 id="描述一下-DispatcherServlet-的工作流程"><a href="#描述一下-DispatcherServlet-的工作流程" class="headerlink" title="描述一下 DispatcherServlet 的工作流程"></a>描述一下 DispatcherServlet 的工作流程</h3><p>DispatcherServlet 的工作流程可以用一幅图来说明：</p><ol><li><p>向服务器发送 HTTP 请求，请求被前端控制器 <code>DispatcherServlet</code> 捕获。</p></li><li><p><code>DispatcherServlet</code> 根据 <strong>-servlet.xml</strong> 中的配置对请求的 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 <code>HandlerMapping</code> 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以<code>HandlerExecutionChain</code> 对象的形式返回。</p></li><li><p><code>DispatcherServlet</code> 根据获得的<code>Handler</code>，选择一个合适的 <code>HandlerAdapter</code>。（附注：如果成功获得<code>HandlerAdapter</code>后，此时将开始执行拦截器的 preHandler(…)方法）。</p></li><li><p>提取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Request</span><br></pre></td></tr></table></figure><p>中的模型数据，填充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handler</span><br></pre></td></tr></table></figure><p>入参，开始执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handler</span><br></pre></td></tr></table></figure><p>（</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controller</span><br></pre></td></tr></table></figure><p>)。 在填充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handler</span><br></pre></td></tr></table></figure><p>的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：</p><ul><li>HttpMessageConveter： 将请求消息（如 Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息。</li><li>数据转换：对请求消息进行数据转换。如<code>String</code>转换成<code>Integer</code>、<code>Double</code>等。</li><li>数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等。</li><li>数据验证： 验证数据的有效性（长度、格式等），验证结果存储到<code>BindingResult</code>或<code>Error</code>中。</li></ul></li><li><p>Handler(Controller)执行完成后，向 <code>DispatcherServlet</code> 返回一个 <code>ModelAndView</code> 对象；</p></li><li><p>根据返回的<code>ModelAndView</code>，选择一个适合的 <code>ViewResolver</code>（必须是已经注册到 Spring 容器中的<code>ViewResolver</code>)返回给<code>DispatcherServlet</code>。</p></li><li><p><code>ViewResolver</code> 结合<code>Model</code>和<code>View</code>，来渲染视图。</p></li><li><p>视图负责将渲染结果返回给客户端。</p></li></ol><h3 id="介绍一下-WebApplicationContext"><a href="#介绍一下-WebApplicationContext" class="headerlink" title="介绍一下 WebApplicationContext"></a>介绍一下 WebApplicationContext</h3><p>WebApplicationContext 是 ApplicationContext 的扩展。它具有 Web 应用程序所需的一些额外功能。它与普通的 ApplicationContext 在解析主题和决定与哪个 servlet 关联的能力方面有所不同。</p><p>本文大部分从网络收集,希望此文能给您带来帮助!</p><p>如果您有更好的建议可以在下方留言!</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBean生命周期</title>
      <link href="/posts/93f3f3c2.html"/>
      <url>/posts/93f3f3c2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Bean-简介"><a href="#Spring-Bean-简介" class="headerlink" title="Spring Bean 简介"></a>Spring Bean 简介</h2><p>如何注册一个 Spring Bean？</p><p>通过 BeanDefinition 和外部单体对象来注册</p><h3 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h3><h4 id="什么是-BeanDefinition"><a href="#什么是-BeanDefinition" class="headerlink" title="什么是 BeanDefinition"></a>什么是 BeanDefinition</h4><p><code>BeanDefinition</code> 是 Spring Framework 中定义 Bean 的配置元信息接口，包含：</p><ul><li>Bean 类名</li><li>Bean 行为配置元素，如：作用域、自动绑定的模式、生命周期回调等</li><li>其他 Bean 引用</li><li>配置设置，如 Bean 属性（Properties）</li></ul><h4 id="l-beandefinition-元信息-BeanDefinition-元信息"><a href="#l-beandefinition-元信息-BeanDefinition-元信息" class="headerlink" title="l#beandefinition-元信息)BeanDefinition 元信息"></a>l#beandefinition-元信息)BeanDefinition 元信息</h4><p><code>BeanDefinition</code> 元信息如下：</p><div class="table-container"><table><thead><tr><th>属性（Property）</th><th>说明</th></tr></thead><tbody><tr><td>Class Bean</td><td>全类名，必须是具体类，不能用抽象类或接口</td></tr><tr><td>Name Bean</td><td>的名称或者 ID</td></tr><tr><td>Scope Bean</td><td>的作用域（如：singleton、prototype 等）</td></tr><tr><td>Constructor arguments Bean</td><td>构造器参数（用于依赖注入）</td></tr><tr><td>Properties Bean</td><td>属性设置（用于依赖注入）</td></tr><tr><td>Autowiring mode Bean</td><td>自动绑定模式（如：通过名称 byName）</td></tr><tr><td>Lazy initialization mode Bean</td><td>延迟初始化模式（延迟和非延迟）</td></tr><tr><td>Initialization method Bean</td><td>初始化回调方法名称</td></tr><tr><td>Destruction method Bean</td><td>销毁回调方法名称</td></tr></tbody></table></div><h4 id="BeanDefinition-构建"><a href="#BeanDefinition-构建" class="headerlink" title="BeanDefinition 构建"></a>BeanDefinition 构建</h4><p>BeanDefinition 构建方式：</p><ul><li>通过 <code>BeanDefinitionBuilder</code></li><li>通过 <code>AbstractBeanDefinition</code> 以及派生类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.通过 BeanDefinitionBuilder 构建</span></span><br><span class="line"><span class="type">BeanDefinitionBuilder</span> <span class="variable">beanDefinitionBuilder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(User.class);</span><br><span class="line"><span class="comment">// 通过属性设置</span></span><br><span class="line">beanDefinitionBuilder</span><br><span class="line">  .addPropertyValue(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">  .addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小马哥&quot;</span>);</span><br><span class="line"><span class="comment">// 获取 BeanDefinition 实例</span></span><br><span class="line"><span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> beanDefinitionBuilder.getBeanDefinition();</span><br><span class="line"><span class="comment">// BeanDefinition 并非 Bean 终态，可以自定义修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过 AbstractBeanDefinition 以及派生类</span></span><br><span class="line"><span class="type">GenericBeanDefinition</span> <span class="variable">genericBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericBeanDefinition</span>();</span><br><span class="line"><span class="comment">// 设置 Bean 类型</span></span><br><span class="line">genericBeanDefinition.setBeanClass(User.class);</span><br><span class="line"><span class="comment">// 通过 MutablePropertyValues 批量操作属性</span></span><br><span class="line"><span class="type">MutablePropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line"><span class="comment">//        propertyValues.addPropertyValue(&quot;id&quot;, 1);</span></span><br><span class="line"><span class="comment">//        propertyValues.addPropertyValue(&quot;name&quot;, &quot;小马哥&quot;);</span></span><br><span class="line">propertyValues</span><br><span class="line">  .add(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">  .add(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小马哥&quot;</span>);</span><br><span class="line"><span class="comment">// 通过 set MutablePropertyValues 批量操作属性</span></span><br><span class="line">genericBeanDefinition.setPropertyValues(propertyValues);</span><br></pre></td></tr></table></figure><h3 id="命名-Spring-Bean"><a href="#命名-Spring-Bean" class="headerlink" title="命名 Spring Bean"></a>命名 Spring Bean</h3><h4 id="Spring-Bean-命名规则"><a href="#Spring-Bean-命名规则" class="headerlink" title="Spring Bean 命名规则"></a>Spring Bean 命名规则</h4><p>每个 Bean 拥有一个或多个标识符（identifiers），这些标识符在 Bean 所在的容器必须是唯一的。通常，一个 Bean 仅有一个标识符，如果需要额外的，可考虑使用别名（Alias）来扩充。</p><p>在基于 XML 的配置元信息中，开发人员可用 id 或者 name 属性来规定 Bean 的标识符。通常 Bean 的标识符由字母组成，允许出现特殊字符。如果要想引入 Bean 的别名的话，可在 name 属性使用半角逗号（“,”）或分号（“;”) 来间隔。</p><p>Bean 的 id 或 name 属性并非必须制定，如果留空的话，容器会为 Bean 自动生成一个唯一的名称。Bean 的命名尽管没有限制，不过官方建议采用驼峰的方式，更符合 Java 的命名约定。</p><h4 id="Spring-Bean-命名生成器"><a href="#Spring-Bean-命名生成器" class="headerlink" title="Spring Bean 命名生成器"></a>Spring Bean 命名生成器</h4><p>Spring 提供了两种 Spring Bean 命名生成器：</p><ul><li>DefaultBeanNameGenerator：默认通用 BeanNameGenerator 实现。</li><li>AnnotationBeanNameGenerator：基于注解扫描的 BeanNameGenerator 实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanNameGenerator</span> &#123;</span><br><span class="line">   String <span class="title function_">generateBeanName</span><span class="params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Bean-别名"><a href="#Spring-Bean-别名" class="headerlink" title="Spring Bean 别名"></a>Spring Bean 别名</h4><p>可能存在这样的场景，不同系统中对于同一 bean 的命名方式不一样。 为了适配，Spring 支持 <code>&lt;alias&gt;</code> 为 bean 添加别名的功能。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.dunwu.spring.core.domain.User&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;sysUser&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;superUser&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Bean 别名（Alias）的作用：</p><ul><li>复用现有的 BeanDefinition</li><li>更具有场景化的命名方法，比如：<ul><li><code>&lt;alias name=&quot;myApp-dataSource&quot; alias=&quot;subsystemA-dataSource&quot;/&gt;</code></li><li><code>&lt;alias name=&quot;myApp-dataSource&quot; alias=&quot;subsystemB-dataSource&quot;/&gt;</code></li></ul></li></ul><h2 id="Bean-生命周期流程"><a href="#Bean-生命周期流程" class="headerlink" title="Bean 生命周期流程"></a>Bean 生命周期流程</h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F14623831-a87d9a6ee1be94a3.png%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F2%2Fw%2F1240&amp;refer=http%3A%2F%2Fupload-images.jianshu.io&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1654251154&amp;t=39886bb51305eca4d749695ecca02657" alt="img"></p><ol><li>Spring 对 Bean 进行实例化（相当于 new XXX()）</li><li>Spring 将值和引用注入进 Bean 对应的属性中</li><li>如果 Bean 实现了 <code>BeanNameAware</code> 接口，Spring 将 Bean 的 ID 传递给 <code>setBeanName</code> 方法<ul><li>作用是通过 Bean 的引用来获得 Bean ID，一般业务中是很少有用到 Bean 的 ID 的</li></ul></li><li>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，Spring 将调用 <code>setBeanDactory</code> 方法，并把 <code>BeanFactory</code> 容器实例作为参数传入。<ul><li>作用是获取 Spring 容器，如 Bean 通过 Spring 容器发布事件等</li></ul></li><li>如果 Bean 实现了 <code>ApplicationContextAware</code> 接口，Spring 容器将调用 <code>setApplicationContext</code> 方法，把应用上下文作为参数传入<ul><li>作用与 <code>BeanFactory</code> 类似都是为了获取 Spring 容器，不同的是 Spring 容器在调用 <code>setApplicationContext</code> 方法时会把它自己作为 <code>setApplicationContext</code> 的参数传入，而 Spring 容器在调用 <code>setBeanFactory</code> 前需要使用者自己指定（注入）<code>setBeanFactory</code> 里的参数 <code>BeanFactory</code></li></ul></li><li>如果 Bean 实现了 <code>BeanPostProcess</code> 接口，Spring 将调用 <code>postProcessBeforeInitialization</code> 方法<ul><li>作用是在 Bean 实例创建成功后对其进行增强处理，如对 Bean 进行修改，增加某个功能</li></ul></li><li>如果 Bean 实现了 <code>InitializingBean</code> 接口，Spring 将调用 <code>afterPropertiesSet</code> 方法，作用与在配置文件中对 Bean 使用 <code>init-method</code> 声明初始化的作用一样，都是在 Bean 的全部属性设置成功后执行的初始化方法。</li><li>如果 Bean 实现了 <code>BeanPostProcess</code> 接口，Spring 将调用 <code>postProcessAfterInitialization</code> 方法<ul><li><code>postProcessBeforeInitialization</code> 是在 Bean 初始化前执行的，而 <code>postProcessAfterInitialization</code> 是在 Bean 初始化后执行的</li></ul></li><li>经过以上的工作后，Bean 将一直驻留在应用上下文中给应用使用，直到应用上下文被销毁</li><li>如果 Bean 实现了 <code>DispostbleBean</code> 接口，Spring 将调用它的 <code>destory</code> 方法，作用与在配置文件中对 Bean 使用 <code>destory-method</code> 属性的作用一样，都是在 Bean 实例销毁前执行的方法。</li></ol><h2 id="Spring-Bean-注册"><a href="#Spring-Bean-注册" class="headerlink" title="Spring Bean 注册"></a>Spring Bean 注册</h2><p>注册 Spring Bean 实际上是将 <code>BeanDefinition</code> 注册到 IoC 容器中。</p><h3 id="XML-配置元信息"><a href="#XML-配置元信息" class="headerlink" title="XML 配置元信息"></a>XML 配置元信息</h3><p>Spring 的传统配置方式。在 <code>&lt;bean&gt;</code> 标签中配置元数据内容。</p><p>缺点是当 JavaBean 过多时，产生的配置文件足以让你眼花缭乱。</p><h3 id="注解配置元信息"><a href="#注解配置元信息" class="headerlink" title="注解配置元信息"></a>注解配置元信息</h3><p>使用 <code>@Bean</code>、<code>@Component</code>、<code>@Import</code> 注解注册 Spring Bean。</p><h3 id="Java-API-配置元信息"><a href="#Java-API-配置元信息" class="headerlink" title="Java API 配置元信息"></a>Java API 配置元信息</h3><ul><li>命名方式：<code>BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)</code></li><li>非命名方式：<code>BeanDefinitionReaderUtils#registerWithGeneratedName(AbstractBeanDefinition,Be</code> <code>anDefinitionRegistry)</code></li><li>配置类方式：<code>AnnotatedBeanDefinitionReader#register(Class...)</code></li></ul><p>[示例]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(AnnotationComponentScan.MyConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationComponentScan</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建 BeanFactory 容器</span></span><br><span class="line">      <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 1.注册配置类</span></span><br><span class="line">      ctx.register(AnnotationComponentScan.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.通过 Java API 注册</span></span><br><span class="line">      registerBeanDefinition(ctx, <span class="string">&quot;zhaoliu&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 启动应用上下文</span></span><br><span class="line">      ctx.refresh();</span><br><span class="line"></span><br><span class="line">      <span class="type">User</span> <span class="variable">wangwu</span> <span class="operator">=</span> (User) ctx.getBean(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;wangwu info: &quot;</span> + wangwu);</span><br><span class="line">      System.out.println(<span class="string">&quot;All beans of User: &quot;</span> + ctx.getBeansOfType(User.class));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//显示关闭 ApplicationContext</span></span><br><span class="line">      ctx.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(BeanDefinitionRegistry registry, String beanName, Class&lt;?&gt; beanClass)</span> &#123;</span><br><span class="line">      <span class="type">BeanDefinitionBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(beanClass);</span><br><span class="line">      builder.addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">      builder.addPropertyValue(<span class="string">&quot;age&quot;</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 注册 BeanDefinition</span></span><br><span class="line">      registry.registerBeanDefinition(beanName, builder.getBeanDefinition());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Configuration</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 注解方式配置元信息</span></span><br><span class="line">      <span class="meta">@Bean(name = &#123; &quot;user&quot;, &quot;wangwu&quot; &#125;)</span></span><br><span class="line">      <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">21</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-实例化"><a href="#Spring-Bean-实例化" class="headerlink" title="Spring Bean 实例化"></a>Spring Bean 实例化</h2><p>Spring Bean 实例化方式：</p><ul><li>常规方式<ul><li>通过构造器（配置元信息：XML、Java 注解和 Java API）</li><li>通过静态工厂方法（配置元信息：XML、Java 注解和 Java API）</li><li>通过 Bean 工厂方法（配置元信息：XML、Java 注解和 Java API）</li><li>通过 <code>FactoryBean</code>（配置元信息：XML、Java 注解和 Java API）</li></ul></li><li>特殊方式<ul><li>通过 <code>ServiceLoaderFactoryBean</code>（配置元信息：XML、Java 注解和 Java API ）</li><li>通过 <code>AutowireCapableBeanFactory#createBean(java.lang.Class, int, boolean)</code></li><li>通过 <code>BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)</code></li></ul></li></ul><h2 id="Spring-Bean-初始化和销毁"><a href="#Spring-Bean-初始化和销毁" class="headerlink" title="Spring Bean 初始化和销毁"></a>Spring Bean 初始化和销毁</h2><p>Spring Bean 初始化和销毁的方式有以下几种：</p><ol><li>使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解分别指定相应的初始化方法和销毁方法。</li><li>实现 <code>InitializingBean</code> 接口的 <code>afterPropertiesSet()</code> 方法来编写初始化方法；实现 <code>DisposableBean</code> 接口的 <code>destroy()</code> 方法来编写销毁方法。</li><li>自定义初始化方法<ul><li>XML 配置：<code>&lt;bean init-method=&quot;init&quot; destroy=&quot;destroy&quot; ... /&gt;</code></li><li>Java 注解：<code>@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</code></li><li>Java API：<code>AbstractBeanDefinition#setInitMethodName(String)</code> 和 <code>AbstractBeanDefinition#setDestroyMethodName(String)</code> 分别定义初始化和销毁方法</li></ul></li></ol><p>注意：如果同时存在，执行顺序会按照序列执行。</p><h3 id="Bean-的-initMethod-和-destroyMethod"><a href="#Bean-的-initMethod-和-destroyMethod" class="headerlink" title="@Bean 的 initMethod 和 destroyMethod"></a><code>@Bean</code> 的 initMethod 和 destroyMethod</h3><p>（1）定义 Bean 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pojo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pojo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo 构造方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo 初始化方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo 销毁方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）使用 <code>@Bean</code> 在配置类中注册 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationBeanDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Pojo <span class="title function_">pojo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pojo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：<code>@Bean</code> 注解的 <code>initMethod</code> 和 <code>destroyMethod</code> 属性分别用于指定 Bean 对应的初始化方法和销毁方法。</p></blockquote><p>（3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AnnotationBeanDemo.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;AnnotationBeanDemo 示例结束&quot;</span>);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Pojo 构造方法]</span><br><span class="line">[Pojo 初始化方法]</span><br><span class="line">AnnotationBeanDemo 示例结束</span><br><span class="line">[Pojo 销毁方法]</span><br></pre></td></tr></table></figure><h3 id="InitializingBean-和-DisposableBean"><a href="#InitializingBean-和-DisposableBean" class="headerlink" title="InitializingBean 和 DisposableBean"></a><code>InitializingBean</code> 和 <code>DisposableBean</code></h3><ul><li><code>InitializingBean</code> 接口包含一个 <code>afterPropertiesSet</code> 方法，可以通过实现该接口，然后在这个方法中编写初始化逻辑。</li><li><code>DisposableBean</code>接口包含一个 <code>destory</code> 方法，可以通过实现该接口，然后在这个方法中编写销毁逻辑。</li></ul><p>（1）定义 Bean 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pojo2</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pojo2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo2 构造方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo2 初始化方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Pojo2 销毁方法]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）使用 <code>@Bean</code> 在配置类中注册 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationBeanDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pojo2 <span class="title function_">pojo2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pojo2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AnnotationBeanDemo.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;AnnotationBeanDemo 示例结束&quot;</span>);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Pojo2 构造方法]</span><br><span class="line">[Pojo2 初始化方法]</span><br><span class="line">AnnotationBeanDemo 示例结束</span><br><span class="line">[Pojo2 销毁方法]</span><br></pre></td></tr></table></figure><h3 id="PostConstruct-和-PreDestroy"><a href="#PostConstruct-和-PreDestroy" class="headerlink" title="@PostConstruct 和 @PreDestroy"></a><code>@PostConstruct</code> 和 <code>@PreDestroy</code></h3><p>可以使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解修饰方法来指定相应的初始化和销毁方法。</p><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a><code>BeanPostProcessor</code></h3><p>Spring 提供了一个 <code>BeanPostProcessor</code> 接口，提供了两个方法 <code>postProcessBeforeInitialization</code> 和 <code>postProcessAfterInitialization</code>。其中<code>postProcessBeforeInitialization</code> 在组件的初始化方法调用之前执行，<code>postProcessAfterInitialization</code> 在组件的初始化方法调用之后执行。它们都包含两个入参：</p><ol><li>bean：当前组件对象；</li><li>beanName：当前组件在容器中的名称。</li></ol><p>（1）定义 Pojo，如上面的例子</p><p>（2）定义 <code>BeanPostProcessor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[BeanPostProcessor] construct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[BeanPostProcessor] postProcessBeforeInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[BeanPostProcessor] postProcessAfterInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）使用 <code>@Bean</code> 在配置类中注册 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Pojo <span class="title function_">pojo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pojo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MyBeanPostProcessor <span class="title function_">myBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBeanPostProcessor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyBeanPostProcessorDemo.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;BeanPostProcessorDemo 示例结束&quot;</span>);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[BeanPostProcessor] construct</span><br><span class="line">[Pojo 构造方法]</span><br><span class="line">[BeanPostProcessor] postProcessBeforeInitialization</span><br><span class="line">[Pojo 初始化方法]</span><br><span class="line">[BeanPostProcessor] postProcessAfterInitialization</span><br><span class="line">BeanPostProcessorDemo 示例结束</span><br><span class="line">[Pojo 销毁方法]</span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-垃圾回收"><a href="#Spring-Bean-垃圾回收" class="headerlink" title="Spring Bean 垃圾回收"></a>Spring Bean 垃圾回收</h2><p>Spring Bean 垃圾回收步骤：</p><ol><li>关闭 Spring 容器（应用上下文）</li><li>执行 GC</li><li>Spring Bean 覆盖的 finalize() 方法被回调</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans">Spring 官方文档之 Core Technologies</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-依赖注入IOC</title>
      <link href="/posts/841c624e.html"/>
      <url>/posts/841c624e.html</url>
      
        <content type="html"><![CDATA[<h2 id="IoC-概念简介"><a href="#IoC-概念简介" class="headerlink" title="IoC 概念简介"></a>IoC 概念简介</h2><h3 id="IoC-是什么"><a href="#IoC-是什么" class="headerlink" title="IoC 是什么"></a>IoC 是什么</h3><blockquote><p><strong>IoC，是 Inversion of Control 的缩写，即控制反转。</strong></p><ul><li>上层模块不应该依赖于下层模块，它们共同依赖于一个抽象</li><li>抽象不能依赖于具体实现，具体实现依赖于抽象</li></ul><p><em>注：又称为依赖倒置原则。这是设计模式六大原则之一。</em></p></blockquote><p>IoC 不是什么技术，而是一种设计思想。在 Java 开发中，IoC 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解 Ioc 呢？理解 Ioc 的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><ul><li><strong>谁控制谁，控制什么：</strong>传统 JavaSE 程序设计，我们直接在对象内部通过 new 进行创建对象，是程序主动去创建依赖对象；而 IoC 是有专门一个容器来创建这些对象，即由 IoC 容器来控制对象的创建；谁控制谁？当然是 IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</li><li><strong>为何是反转，哪些方面反转了：</strong>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</li></ul><h3 id="IoC-能做什么"><a href="#IoC-能做什么" class="headerlink" title="IoC 能做什么"></a>IoC 能做什么</h3><p>IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了 IoC 容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>其实 IoC 对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在 IoC/DI 思想中，应用程序就变成被动的了，被动的等待 IoC 容器来创建并注入它所需要的资源了。</p><p>IoC 很好的体现了面向对象设计法则之一—— <strong>好莱坞法则：“别找我们，我们找你”</strong>；即由 IoC 容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><h3 id="IoC-和-DI"><a href="#IoC-和-DI" class="headerlink" title="IoC 和 DI"></a>IoC 和 DI</h3><p>其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以 2004 年大师级人物 Martin Fowler 又给出了一个新的名字：“依赖注入”，相对 IoC 而言，“依赖注入”明确描述了“被注入对象依赖 IoC 容器配置依赖对象”。</p><blockquote><p>注：如果想要更加深入的了解 IoC 和 DI，请参考大师级人物 Martin Fowler 的一篇经典文章 <a href="http://www.martinfowler.com/articles/injection.html">Inversion of Control Containers and the Dependency Injection pattern (opens new window)</a>。</p></blockquote><h3 id="IoC-容器"><a href="#IoC-容器" class="headerlink" title="IoC 容器"></a>IoC 容器</h3><p>IoC 容器就是具有依赖注入功能的容器。IoC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。应用程序无需直接在代码中 new 相关的对象，应用程序由 IoC 容器进行组装。在 Spring 中 BeanFactory 是 IoC 容器的实际代表者。</p><p>Spring IoC 容器如何知道哪些是它管理的对象呢？这就需要配置文件，Spring IoC 容器通过读取配置文件中的配置元数据，通过元数据对应用中的各个对象进行实例化及装配。一般使用基于 xml 配置文件进行配置元数据，而且 Spring 与配置文件完全解耦的，可以使用其他任何可能的方式进行配置元数据，比如注解、基于 java 文件的、基于属性文件的配置都可以。</p><p>那 Spring IoC 容器管理的对象叫什么呢？</p><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><blockquote><p><strong>JavaBean</strong> 是一种 JAVA 语言写成的可重用组件。为写成 JavaBean，类必须是具体的和公共的，并且具有无参数的构造器。JavaBean 对外部通过提供 getter / setter 方法来访问其成员。</p></blockquote><p>由 IoC 容器管理的那些组成你应用程序的对象我们就叫它 Bean。Bean 就是由 Spring 容器初始化、装配及管理的对象，除此之外，bean 就与应用程序中的其他对象没有什么区别了。那 IoC 怎样确定如何实例化 Bean、管理 Bean 之间的依赖关系以及管理 Bean 呢？这就需要配置元数据，在 Spring 中由 BeanDefinition 代表，后边会详细介绍，配置元数据指定如何实例化 Bean、如何组装 Bean 等。</p><h2 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h2><h3 id="核心接口"><a href="#核心接口" class="headerlink" title="核心接口"></a>核心接口</h3><p><code>org.springframework.beans</code> 和 <code>org.springframework.context</code> 是 IoC 容器的基础。</p><p>在 Spring 中，有两种 IoC 容器：<code>BeanFactory</code> 和 <code>ApplicationContext</code>。</p><ul><li><code>BeanFactory</code>：BeanFactory 提供了 Spring 容器的配置框架和基本功能。</li><li><code>ApplicationContext</code>：BeanFactory 的子接口。它还扩展了其他一些接口，以支持更丰富的功能，如：国际化、访问资源、事件机制、更方便的支持 AOP、在 web 应用中指定应用层上下文等。</li></ul><p>实际开发中，更推荐使用 <code>ApplicationContext</code> 作为 IoC 容器，因为它的功能远多于 <code>FactoryBean</code>。</p><p>常见 <code>ApplicationContext</code> 实现：</p><ul><li><strong>ClassPathXmlApplicationContext</strong>：<code>ApplicationContext</code> 的实现，从 classpath 获取配置文件；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath.xml&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>FileSystemXmlApplicationContext</strong>：<code>ApplicationContext</code> 的实现，从文件系统获取配置文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;fileSystemConfig.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="IoC-容器工作步骤"><a href="#IoC-容器工作步骤" class="headerlink" title="IoC 容器工作步骤"></a>IoC 容器工作步骤</h3><p>使用 IoC 容器可分为三步骤：</p><ol><li><strong>配置元数据</strong>：需要配置一些元数据来告诉 Spring，你希望容器如何工作，具体来说，就是如何去初始化、配置、管理 JavaBean 对象。</li><li><strong>实例化容器</strong>：由 IoC 容器解析配置的元数据。IoC 容器的 Bean Reader 读取并解析配置文件，根据定义生成 BeanDefinition 配置元数据对象，IoC 容器根据 <code>BeanDefinition</code> 进行实例化、配置及组装 Bean。</li><li><strong>使用容器</strong>：由客户端实例化容器，获取需要的 Bean</li></ol><h3 id="配置元数据"><a href="#配置元数据" class="headerlink" title="配置元数据"></a>配置元数据</h3><p><strong>元数据（Metadata）</strong>又称中介数据、中继数据，为描述数据的数据（data about data），主要是描述数据属性（property）的信息。</p><p>配置元数据的方式：</p><ul><li><p><strong>基于 xml 配置</strong>：Spring 的传统配置方式。在 <code>&lt;beans&gt;</code> 标签中配置元数据内容。</p><p>缺点是当 JavaBean 过多时，产生的配置文件足以让你眼花缭乱。</p></li><li><p><strong>基于注解配置</strong>：Spring2.5 引入。可以大大简化你的配置。</p></li><li><p><strong>基于 Java 配置</strong>：可以使用 Java 类来定义 JavaBean 。</p><p>为了使用这个新特性，需要用到 <code>@Configuration</code> 、<code>@Bean</code> 、<code>@Import</code> 和 <code>@DependsOn</code> 注解</p></li></ul><h3 id="Spring-Bean-概述"><a href="#Spring-Bean-概述" class="headerlink" title="Spring Bean 概述"></a>Spring Bean 概述</h3><p>一个 Spring 容器管理一个或多个 bean。这些 bean 根据你配置的元数据（比如 xml 形式）来创建。</p><p>Spring IoC 容器本身，并不能识别你配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——<code>BeanDefinition</code> 对象。</p><ul><li><p><strong>命名 Bean</strong></p><ul><li>指定 id 和 name 属性不是必须的。Spring 中，并非一定要指定 id 和 name 属性。实际上，Spring 会自动为其分配一个特殊名。如果你需要引用声明的 bean，这时你才需要一个标识。官方推荐驼峰命名法来命名。</li></ul></li><li><p><strong>支持别名</strong></p><ul><li><p>可能存在这样的场景，不同系统中对于同一 bean 的命名方式不一样。 为了适配，Spring 支持 <code>&lt;alias&gt;</code> 为 bean 添加别名的功能。</p></li><li><p>```xml<br><alias name="subsystemA-dataSource" alias="subsystemB-dataSource"/><br><alias name="subsystemA-dataSource" alias="myApp-dataSource" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **实例化 Bean**</span><br><span class="line"></span><br><span class="line">  - 构造器方式</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;bean id=&quot;exampleBean&quot; class=&quot;examples.ExampleBean&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="依赖注入模式"><a href="#依赖注入模式" class="headerlink" title="依赖注入模式"></a>依赖注入模式</h3><p>依赖注入模式可以分为手动模式和自动模式。</p><h4 id="手动注入"><a href="#手动注入" class="headerlink" title="手动注入"></a>手动注入</h4><p>配置或者编程的方式，提前安排注入规则</p><ul><li>XML 资源配置元信息</li><li>Java 注解配置元信息</li><li>API 配置元信息</li></ul><h4 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h4><p>实现方提供依赖自动关联的方式，按照內建的注入规则（官方不推荐）</p><ul><li>Autowiring（自动绑定）</li></ul><div class="table-container"><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>no</td><td>默认值，未激活 Autowiring，需要手动指定依赖注入对象。</td></tr><tr><td>byName</td><td>根据被注入属性的名称作为 Bean 名称进行依赖查找，并将对象设置到该属性。</td></tr><tr><td>byType</td><td>根据被注入属性的类型作为依赖类型进行查找，并将对象设置到该属性。</td></tr><tr><td>constructor</td><td>特殊 byType 类型，用于构造器参数。</td></tr></tbody></table></div><blockquote><p>限制和不足参考：<a href="https://docs.spring.io/spring/docs/5.2.2.RELEASE/spring-frameworkreference/core.html#beans-autowired-exceptions">Limitations and Disadvantages of Autowiring 小节(opens new window)</a></p></blockquote><h4 id="依赖注入类型"><a href="#依赖注入类型" class="headerlink" title="依赖注入类型"></a>依赖注入类型</h4><div class="table-container"><table><thead><tr><th>依赖注入类型</th><th>配置元数据举例</th></tr></thead><tbody><tr><td>Setter 方法</td><td><code>&lt;proeprty name=&quot;user&quot; ref=&quot;userBean&quot;/&gt;</code></td></tr><tr><td>构造器</td><td><code>&lt;constructor-arg name=&quot;user&quot; ref=&quot;userBean&quot; /&gt;</code></td></tr><tr><td>字段</td><td><code>@Autowired User user;</code></td></tr><tr><td>方法</td><td><code>@Autowired public void user(User user) &#123; ... &#125;</code></td></tr><tr><td>接口回调</td><td><code>class MyBean implements BeanFactoryAware &#123; ... &#125;</code></td></tr></tbody></table></div><h4 id="Setter-方法注入"><a href="#Setter-方法注入" class="headerlink" title="Setter 方法注入"></a>Setter 方法注入</h4><p>手动模式</p><ul><li>XML 资源配置元信息</li><li>Java 注解配置元信息</li><li>API 配置元信息</li></ul><p>自动模式</p><ul><li>byName</li><li>byType</li></ul><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><p>手动模式</p><ul><li>XML 资源配置元信息</li><li>Java 注解配置元信息</li><li>API 配置元信息</li></ul><p>自动模式</p><ul><li>constructor</li></ul><h4 id="字段注入"><a href="#字段注入" class="headerlink" title="字段注入"></a>字段注入</h4><p>手动模式（Java 注解配置元信息）</p><ul><li><code>@Autowired</code></li><li><code>@Resource</code></li><li><code>@Inject</code>（可选）</li></ul><h4 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h4><p>手动模式（Java 注解配置元信息）</p><ul><li><code>@Autowired</code></li><li><code>@Resource</code></li><li><code>@Inject</code>（可选）</li><li><code>@Bean</code></li></ul><h4 id="接口回调注入"><a href="#接口回调注入" class="headerlink" title="接口回调注入"></a>接口回调注入</h4><p>Aware 系列接口回调</p><div class="table-container"><table><thead><tr><th>內建接口</th><th>说明</th></tr></thead><tbody><tr><td><code>BeanFactoryAware</code></td><td>获取 IoC 容器- <code>BeanFactory</code></td></tr><tr><td><code>ApplicationContextAware</code></td><td>获取 Spring 应用上下文- <code>ApplicationContext</code> 对象</td></tr><tr><td><code>EnvironmentAware</code></td><td>获取 <code>Environment</code> 对象</td></tr><tr><td><code>ResourceLoaderAware</code></td><td>获取资源加载器对象- <code>ResourceLoader</code></td></tr><tr><td><code>BeanClassLoaderAware</code></td><td>获取加载当前 Bean Class 的 <code>ClassLoader</code></td></tr><tr><td><code>BeanNameAware</code></td><td>获取当前 Bean 的名称</td></tr><tr><td><code>MessageSourceAware</code></td><td>获取 <code>MessageSource</code> 对象，用于 Spring 国际化</td></tr><tr><td><code>ApplicationEventPublisherAware</code></td><td>获取 <code>ApplicationEventPublishAware</code> 对象，用于 Spring 事件</td></tr><tr><td><code>EmbeddedValueResolverAware</code></td><td>获取 <code>StringValueResolver</code> 对象，用于占位符处理</td></tr></tbody></table></div><h4 id="依赖注入类型选择"><a href="#依赖注入类型选择" class="headerlink" title="依赖注入类型选择"></a>依赖注入类型选择</h4><ul><li>低依赖：构造器注入</li><li>多依赖：Setter 方法注入</li><li>便利性：字段注入</li><li>声明类：方法注入</li></ul><h3 id="被注入的数据类型"><a href="#被注入的数据类型" class="headerlink" title="被注入的数据类型"></a>被注入的数据类型</h3><p>基础类型</p><ul><li>原生类型（Primitive）：boolean、byte、char、short、int、float、long、double</li><li>标量类型（Scalar）：Number、Character、Boolean、Enum、Locale、Charset、Currency、Properties、UUID</li><li>常规类型（General）：Object、String、TimeZone、Calendar、Optional 等</li><li>Spring 类型：Resource、InputSource、Formatter 等</li></ul><p>集合类型</p><ul><li>数组类型（Array）：原生类型、标量类型、常规类型、Spring 类型</li><li>集合类型（Collection）<ul><li>Collection：List、Set（SortedSet、NavigableSet、EnumSet）</li><li>Map：Properties</li></ul></li></ul><h2 id="IoC-依赖查找"><a href="#IoC-依赖查找" class="headerlink" title="IoC 依赖查找"></a>IoC 依赖查找</h2><p><strong>依赖查找是主动或手动的依赖查找方式，通常需要依赖容器或标准 API 实现</strong>。</p><ul><li>根据 Bean 名称查找<ul><li>实时查找</li><li>延迟查找</li></ul></li><li>根据 Bean 类型查找</li><li>根据 Bean 名称 + 类型查找</li><li>根据 Java 注解查找</li></ul><p>【示例】Spring IoC 依赖查找</p><p>xml 元信息配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;objectFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;targetBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;user&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.dunwu.spring.core.domain.User&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;superUser&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.dunwu.spring.core.domain.SysUser&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;南京&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖查找示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactoryDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring/spring-dependency-lookup.xml&quot;</span>);</span><br><span class="line">lookupByType(beanFactory);</span><br><span class="line">lookupByNameInRealTime(beanFactory);</span><br><span class="line">lookupByNameInLazy(beanFactory);</span><br><span class="line">lookupByAnnotation(beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lookupByType</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line"><span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> beanFactory.getBean(SysUser.class);</span><br><span class="line">System.out.println(<span class="string">&quot;SysUser = &quot;</span> + user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lookupByNameInRealTime</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) beanFactory.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lookupByNameInLazy</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line">ObjectFactory&lt;User&gt; objectFactory = (ObjectFactory&lt;User&gt;) beanFactory.getBean(<span class="string">&quot;objectFactory&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> objectFactory.getObject();</span><br><span class="line">System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lookupByAnnotation</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> ListableBeanFactory) &#123;</span><br><span class="line"><span class="type">ListableBeanFactory</span> <span class="variable">listableBeanFactory</span> <span class="operator">=</span> (ListableBeanFactory) beanFactory;</span><br><span class="line">Map&lt;String, Object&gt; users = listableBeanFactory.getBeansWithAnnotation(Super.class);</span><br><span class="line">System.out.println(<span class="string">&quot;users = &quot;</span> + users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IoC-依赖注入"><a href="#IoC-依赖注入" class="headerlink" title="IoC 依赖注入"></a>IoC 依赖注入</h2><p>DI，是 Dependency Injection 的缩写，即依赖注入。依赖注入是 IoC 的最常见形式。依赖注入是手动或自动绑定的方式，无需依赖特定的容器或 API。</p><p><strong>容器全权负责组件的装配，它会把符合依赖关系的对象通过 JavaBean 属性或者构造函数传递给需要的对象</strong>。</p><p>DI 是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>理解 DI 的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><ul><li><strong>谁依赖于谁：</strong>当然是应用程序依赖于 IoC 容器；</li><li><strong>为什么需要依赖：</strong>应用程序需要 IoC 容器来提供对象需要的外部资源；</li><li><strong>谁注入谁：</strong>很明显是 IoC 容器注入应用程序某个对象，应用程序依赖的对象；</li><li><strong>注入了什么</strong>：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</li></ul><p>IoC 依赖注入 API</p><ul><li>根据 Bean 名称注入</li><li>根据 Bean 类型注入</li><li>注入容器内建 Bean 对象</li><li>注入非 Bean 对象</li><li>注入类型<ul><li>实时注入</li><li>延迟注入</li></ul></li></ul><h2 id="IoC-容器配置"><a href="#IoC-容器配置" class="headerlink" title="IoC 容器配置"></a>IoC 容器配置</h2><p>IoC 容器的配置有三种方式：</p><ul><li>基于 xml 配置</li><li>基于注解配置</li><li>基于 Java 配置</li></ul><p>作为 Spring 传统的配置方式，xml 配置方式一般为大家所熟知。</p><p>如果厌倦了 xml 配置，Spring 也提供了注解配置方式或 Java 配置方式来简化配置。</p><p><strong>本文，将对 Java 配置 IoC 容器做详细的介绍。</strong></p><h3 id="5-1-Xml-配置"><a href="#5-1-Xml-配置" class="headerlink" title="#5.1. Xml 配置"></a><a href="https://dunwu.github.io/spring-tutorial/core/Spring依赖注入.html#_5-1-xml-配置">#</a>5.1. Xml 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;resource1.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;bean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span> <span class="attr">alias</span>=<span class="string">&quot;bean3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bean2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;resource2.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签说明：</p><ul><li><code>&lt;beans&gt;</code> 是 Spring 配置文件的根节点。</li><li><code>&lt;bean&gt;</code> 用来定义一个 JavaBean。<code>id</code> 属性是它的标识，在文件中必须唯一；<code>class</code> 属性是它关联的类。</li><li><code>&lt;alias&gt;</code> 用来定义 Bean 的别名。</li><li><code>&lt;import&gt;</code> 用来导入其他配置文件的 Bean 定义。这是为了加载多个配置文件，当然也可以把这些配置文件构造为一个数组（new String[] {“config1.xml”, config2.xml}）传给 <code>ApplicationContext</code> 实现类进行加载多个配置文件，那一个更适合由用户决定；这两种方式都是通过调用 Bean Definition Reader 读取 Bean 定义，内部实现没有任何区别。<code>&lt;import&gt;</code> 标签可以放在 <code>&lt;beans&gt;</code> 下的任何位置，没有顺序关系。</li></ul><h4 id="实例化容器"><a href="#实例化容器" class="headerlink" title="#实例化容器"></a><a href="https://dunwu.github.io/spring-tutorial/core/Spring依赖注入.html#实例化容器">#</a>实例化容器</h4><p>实例化容器的过程： 定位资源（XML 配置文件） 读取配置信息(Resource) 转化为 Spring 可识别的数据形式（BeanDefinition）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>组合 xml 配置文件 配置的 Bean 功能各不相同，都放在一个 xml 文件中，不便管理。 Java 设计模式讲究职责单一原则。配置其实也是如此，功能不同的 JavaBean 应该被组织在不同的 xml 文件中。然后使用 import 标签把它们统一导入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring/applicationContext.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;/WEB-INF/spring/service.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用容器"><a href="#使用容器" class="headerlink" title="#使用容器"></a><a href="https://dunwu.github.io/spring-tutorial/core/Spring依赖注入.html#使用容器">#</a>使用容器</h4><p>使用容器的方式就是通过<code>getBean</code>获取 IoC 容器中的 JavaBean。 Spring 也有其他方法去获得 JavaBean，但是 Spring 并不推荐其他方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create and configure beans</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>&#125;);</span><br><span class="line"><span class="comment">// retrieve configured instance</span></span><br><span class="line"><span class="type">PetStoreService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;petStore&quot;</span>, PetStoreService.class);</span><br><span class="line"><span class="comment">// use configured instance</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure><h3 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h3><p>Spring2.5 引入了注解。 于是，一个问题产生了：<strong>使用注解方式注入 JavaBean 是不是一定完爆 xml 方式？</strong> 未必。正所谓，仁者见仁智者见智。任何事物都有其优缺点，看你如何取舍。来看看注解的优缺点： <strong>优点</strong>：大大减少了配置，并且可以使配置更加精细——类，方法，字段都可以用注解去标记。 <strong>缺点</strong>：使用注解，不可避免产生了侵入式编程，也产生了一些问题。</p><ul><li>你需要将注解加入你的源码并编译它；</li><li>注解往往比较分散，不易管控。</li></ul><blockquote><p>注：spring 中，先进行注解注入，然后才是 xml 注入，因此如果注入的目标相同，后者会覆盖前者。</p></blockquote><h4 id="启动注解"><a href="#启动注解" class="headerlink" title="启动注解"></a>启动注解</h4><p>Spring 默认是不启用注解的。如果想使用注解，需要先在 xml 中启动注解。 启动方式：在 xml 中加入一个标签，很简单吧。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：<code>&lt;context:annotation-config/&gt;</code> 只会检索定义它的上下文。什么意思呢？就是说，如果你 为 DispatcherServlet 指定了一个<code>WebApplicationContext</code>，那么它只在 controller 中查找<code>@Autowired</code>注解，而不会检查其它的路径。</p></blockquote><h4 id="Required"><a href="#Required" class="headerlink" title="@Required"></a><code>@Required</code></h4><p><code>@Required</code> 注解只能用于修饰 bean 属性的 setter 方法。受影响的 bean 属性必须在配置时被填充在 xml 配置文件中，否则容器将抛出<code>BeanInitializationException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationRequired</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Required</span> 注解用于bean属性的setter方法并且它指示，受影响的bean属性必须在配置时被填充在xml配置文件中，</span></span><br><span class="line"><span class="comment">     *           否则容器将抛出BeanInitializationException。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Required</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a><code>@Autowired</code></h4><p><code>@Autowired</code>注解可用于修饰属性、setter 方法、构造方法。</p><p>@Autowired 注入过程</p><ul><li>元信息解析</li><li>依赖查找</li><li>依赖注入（字段、方法）</li></ul><blockquote><p>注：<code>@Autowired</code>注解也可用于修饰构造方法，但如果类中只有默认构造方法，则没有必要。如果有多个构造器，至少应该修饰一个，来告诉容器哪一个必须使用。</p></blockquote><p>可以使用 JSR330 的注解<code>@Inject</code>来替代<code>@Autowired</code>。</p><p><strong>*范例*</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationAutowired</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AnnotationRequired.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Apple fieldA;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Banana fieldB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Orange fieldC;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Apple <span class="title function_">getFieldA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFieldA</span><span class="params">(Apple fieldA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldA = fieldA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Banana <span class="title function_">getFieldB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFieldB</span><span class="params">(Banana fieldB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldB = fieldB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Orange <span class="title function_">getFieldC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFieldC</span><span class="params">(Orange fieldC)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldC = fieldC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationAutowired</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationAutowired</span><span class="params">(Orange fieldC)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldC = fieldC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AbstractApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring/spring-annotation.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationAutowired</span> <span class="variable">annotationAutowired</span> <span class="operator">=</span></span><br><span class="line">                        (AnnotationAutowired) ctx.getBean(<span class="string">&quot;annotationAutowired&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;fieldA: &#123;&#125;, fieldB:&#123;&#125;, fieldC:&#123;&#125;&quot;</span>, annotationAutowired.getFieldA().getName(),</span><br><span class="line">                        annotationAutowired.getFieldB().getName(),</span><br><span class="line">                        annotationAutowired.getFieldC().getName());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml 中的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试@Autowired --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;apple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Apple&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;potato&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Banana&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tomato&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Orange&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationAutowired&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.AnnotationAutowired&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a><code>@Qualifier</code></h4><p>在<code>@Autowired</code>注解中，提到了如果发现有多个候选的 bean 都符合修饰类型，Spring 就会抓瞎了。</p><p>那么，如何解决这个问题。</p><p>可以通过<code>@Qualifier</code>指定 bean 名称来锁定真正需要的那个 bean。</p><p><strong>*范例*</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationQualifier</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AnnotationQualifier.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;dog&quot;)</span> <span class="comment">/** 去除这行，会报异常 */</span></span><br><span class="line">    Animal dog;</span><br><span class="line"></span><br><span class="line">    Animal cat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Animal <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Animal dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Animal <span class="title function_">getCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCat</span><span class="params">(<span class="meta">@Qualifier(&quot;cat&quot;)</span> Animal cat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AbstractApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring/spring-annotation.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationQualifier</span> <span class="variable">annotationQualifier</span> <span class="operator">=</span></span><br><span class="line">                (AnnotationQualifier) ctx.getBean(<span class="string">&quot;annotationQualifier&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;Dog name: &#123;&#125;&quot;</span>, annotationQualifier.getDog().getName());</span><br><span class="line">        log.debug(<span class="string">&quot;Cat name: &#123;&#125;&quot;</span>, annotationQualifier.getCat().getName());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;狗&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;猫&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml 中的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试@Qualifier --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationQualifier&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.AnnotationQualifier&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a><code>@Resource</code></h4><p>Spring 支持 JSP250 规定的注解<code>@Resource</code>。这个注解根据指定的名称来注入 bean。</p><p>如果没有为<code>@Resource</code>指定名称，它会像<code>@Autowired</code>一样按照类型去寻找匹配。</p><p>在 Spring 中，由<code>CommonAnnotationBeanPostProcessor</code>来处理<code>@Resource</code>注解。</p><p><strong>*范例*</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationResource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AnnotationResource.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;flower&quot;)</span></span><br><span class="line">    Plant flower;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;tree&quot;)</span></span><br><span class="line">    Plant tree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Plant <span class="title function_">getFlower</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flower;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlower</span><span class="params">(Plant flower)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flower = flower;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Plant <span class="title function_">getTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTree</span><span class="params">(Plant tree)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tree = tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AbstractApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring/spring-annotation.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationResource</span> <span class="variable">annotationResource</span> <span class="operator">=</span></span><br><span class="line">                        (AnnotationResource) ctx.getBean(<span class="string">&quot;annotationResource&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;type: &#123;&#125;, name: &#123;&#125;&quot;</span>, annotationResource.getFlower().getClass(), annotationResource.getFlower().getName());</span><br><span class="line">        log.debug(<span class="string">&quot;type: &#123;&#125;, name: &#123;&#125;&quot;</span>, annotationResource.getTree().getClass(), annotationResource.getTree().getName());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml 的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试@Resource --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;flower&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Flower&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.Tree&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationResource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.beans.annotation.sample.AnnotationResource&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="PostConstruct-和-PreDestroy"><a href="#PostConstruct-和-PreDestroy" class="headerlink" title="@PostConstruct 和 @PreDestroy"></a><code>@PostConstruct</code> 和 <code>@PreDestroy</code></h4><p><code>@PostConstruct</code> 和 <code>@PreDestroy</code> 是 JSR 250 规定的用于生命周期的注解。</p><p>从其名号就可以看出，一个是在构造之后调用的方法，一个是销毁之前调用的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPostConstructAndPreDestroy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AnnotationPostConstructAndPreDestroy.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;call @PostConstruct method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;call @PreDestroy method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a><code>@Inject</code></h4><p>从 Spring3.0 开始，Spring 支持 JSR 330 标准注解（依赖注入）。</p><p>注：如果要使用 JSR 330 注解，需要使用外部 jar 包。</p><p>若你使用 maven 管理 jar 包，只需要添加依赖到 pom.xml 即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>@Inject</code> 和 <code>@Autowired</code> 一样，可以修饰属性、setter 方法、构造方法。</p><p><strong>*范例*</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationInject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AnnotationInject.class);</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Apple fieldA;</span><br><span class="line"></span><br><span class="line">    Banana fieldB;</span><br><span class="line"></span><br><span class="line">    Orange fieldC;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Apple <span class="title function_">getFieldA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFieldA</span><span class="params">(Apple fieldA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldA = fieldA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Banana <span class="title function_">getFieldB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFieldB</span><span class="params">(Banana fieldB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldB = fieldB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Orange <span class="title function_">getFieldC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationInject</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationInject</span><span class="params">(Orange fieldC)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fieldC = fieldC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AbstractApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring/spring-annotation.xml&quot;</span>);</span><br><span class="line">        <span class="type">AnnotationInject</span> <span class="variable">annotationInject</span> <span class="operator">=</span> (AnnotationInject) ctx.getBean(<span class="string">&quot;annotationInject&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;type: &#123;&#125;, name: &#123;&#125;&quot;</span>, annotationInject.getFieldA().getClass(),</span><br><span class="line">                        annotationInject.getFieldA().getName());</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;type: &#123;&#125;, name: &#123;&#125;&quot;</span>, annotationInject.getFieldB().getClass(),</span><br><span class="line">                        annotationInject.getFieldB().getName());</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;type: &#123;&#125;, name: &#123;&#125;&quot;</span>, annotationInject.getFieldC().getClass(),</span><br><span class="line">                        annotationInject.getFieldC().getName());</span><br><span class="line"></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-配置"><a href="#Java-配置" class="headerlink" title="Java 配置"></a>Java 配置</h3><p>基于 Java 配置 Spring IoC 容器，实际上是<strong>Spring 允许用户定义一个类，在这个类中去管理 IoC 容器的配置</strong>。</p><p>为了让 Spring 识别这个定义类为一个 Spring 配置类，需要用到两个注解：<code>@Configuration</code>和<code>@Bean</code>。</p><p>如果你熟悉 Spring 的 xml 配置方式，你可以将<code>@Configuration</code>等价于<code>&lt;beans&gt;</code>标签；将<code>@Bean</code>等价于<code>&lt;bean&gt;</code>标签。</p><h4 id="Bean-1"><a href="#Bean-1" class="headerlink" title="@Bean"></a><code>@Bean</code></h4><p>@Bean 的修饰目标只能是方法或注解。</p><p>@Bean 只能定义在 <code>@Configuration</code> 或 <code>@Component</code> 注解修饰的类中。</p><h4 id="声明一个-bean"><a href="#声明一个-bean" class="headerlink" title="声明一个 bean"></a>声明一个 bean</h4><p>此外，@Configuration 类允许在同一个类中通过@Bean 定义内部 bean 依赖。</p><p>声明一个 bean，只需要在 bean 属性的 set 方法上标注@Bean 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(JavaComponentScan.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Job <span class="title function_">getPolice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Police</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AnnotationConfiguration.class);</span><br><span class="line">        ctx.scan(<span class="string">&quot;org.zp.notes.spring.beans&quot;</span>);</span><br><span class="line">        ctx.refresh();</span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> (Job) ctx.getBean(<span class="string">&quot;police&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;job: &#123;&#125;, work: &#123;&#125;&quot;</span>, job.getClass(), job.work());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    String <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;police&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Police</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;抓罪犯&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这等价于配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;police&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zp.notes.spring.ioc.sample.job.Police&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Bean 注解用来表明一个方法实例化、配置合初始化一个被 Spring IoC 容器管理的新对象。</p><p>如果你熟悉 Spring 的 xml 配置，你可以将@Bean 视为等价于<code>&lt;beans&gt;</code>标签。</p><p>@Bean 注解可以用于任何的 Spring <code>@Component</code> bean，然而，通常被用于<code>@Configuration</code> bean。</p><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a><code>@Configuration</code></h4><p><code>@Configuration</code> 是一个类级别的注解，用来标记被修饰类的对象是一个<code>BeanDefinition</code>。</p><p><code>@Configuration</code> 声明 bean 是通过被 <code>@Bean</code> 修饰的公共方法。此外，<code>@Configuration</code> 允许在同一个类中通过 <code>@Bean</code> 定义内部 bean 依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyService <span class="title function_">myService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这等价于配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.acme.services.MyServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用 <code>AnnotationConfigApplicationContext</code> 实例化 IoC 容器。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="singleton-的-Bean-如何注入-prototype-的-Bean"><a href="#singleton-的-Bean-如何注入-prototype-的-Bean" class="headerlink" title="singleton 的 Bean 如何注入 prototype 的 Bean"></a>singleton 的 Bean 如何注入 prototype 的 Bean</h3><p>Spring 创建的 Bean 默认是单例的，但当 Bean 遇到继承的时候，可能会忽略这一点。</p><p>假设有一个 SayService 抽象类，其中维护了一个类型是 ArrayList 的字段 data，用于保存方法处理的中间数据。每次调用 say 方法都会往 data 加入新数据，可以认为 SayService 是有状态，如果 SayService 是单例的话必然会 OOM。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SayService 是有状态，如果 SayService 是单例的话必然会 OOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SayService</span> &#123;</span><br><span class="line"></span><br><span class="line">   List&lt;String&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">      data.add(IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">         .mapToObj(__ -&gt; <span class="string">&quot;a&quot;</span>)</span><br><span class="line">         .collect(Collectors.joining(<span class="string">&quot;&quot;</span>)) + UUID.randomUUID().toString());</span><br><span class="line">      log.info(<span class="string">&quot;I&#x27;m &#123;&#125; size:&#123;&#125;&quot;</span>, <span class="built_in">this</span>, data.size());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际开发的时候，开发同学没有过多思考就把 SayHello 和 SayBye 类加上了 @Service 注解，让它们成为了 Bean，也没有考虑到父类是有状态的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayBye</span> <span class="keyword">extends</span> <span class="title class_">SayService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.say();</span><br><span class="line">      log.info(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayHello</span> <span class="keyword">extends</span> <span class="title class_">SayService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.say();</span><br><span class="line">log.info(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在为类标记上 @Service 注解把类型交由容器管理前，首先评估一下类是否有状态，然后为 Bean 设置合适的 Scope。</p><p>调用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;beansingletonandorder&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanSingletonAndOrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   List&lt;SayService&gt; sayServiceList;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">      log.info(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">      sayServiceList.forEach(SayService::say);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能有人认为，为 SayHello 和 SayBye 两个类都标记了 @Scope 注解，设置了 PROTOTYPE 的生命周期就可以解决上面的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br></pre></td></tr></table></figure><p>但实际上还是有问题。因为@RestController 注解 =@Controller 注解 +@ResponseBody 注解，又因为 @Controller 标记了 @Component 元注解，所以 @RestController 注解其实也是一个 Spring Bean。</p><p>Bean 默认是单例的，所以单例的 Controller 注入的 Service 也是一次性创建的，即使 Service 本身标识了 prototype 的范围也没用。</p><p>修复方式是，让 Service 以代理方式注入。这样虽然 Controller 本身是单例的，但每次都能从代理获取 Service。这样一来，prototype 范围的配置才能真正生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProx)</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans">Spring 官方文档之 Core Technologies</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯经典问题</title>
      <link href="/posts/bcbdb63a.html"/>
      <url>/posts/bcbdb63a.html</url>
      
        <content type="html"><![CDATA[<h2 id="递归的概念"><a href="#递归的概念" class="headerlink" title="递归的概念"></a>递归的概念</h2><p>简单的说：递归就是方法<span class='p red'>调用自己</span>,每次调用<span class='p red'>传入不同的变量</span>。递归有助于编程者解决复杂的问题，同时可以让代码变得简洁</p><hr><h2 id="两个案列说明递归的调用机制"><a href="#两个案列说明递归的调用机制" class="headerlink" title="两个案列说明递归的调用机制"></a>两个案列说明递归的调用机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            test(n-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="comment">//else&#123;加上else输出结果又是怎么样呢！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n=&quot;</span>+n);</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议先自己分析一下这个运行结果是啥！</p><p>然后在idea里面编译运行看一下结果，是不是和你想的一样。</p><p>递归调用的规则：</p><p>1.当程序执行到一个方法时，就会开辟一个独立的空间(栈 )</p><p>2.就像上面的案例，当执行test(4)时，因为n&gt;2,所以开始执行test(3)，注意此时test(4)是未执行完的，直到test(2),test(3)完毕出栈之后，最后才是test(4)</p><p>3.每个空间的数据（局部变量，是独立的）</p><p>再来一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阶乘问题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo2</span>&#123;</span><br><span class="line">    puclic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(fun(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n*fun(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="递归需要遵守的重要规则"><a href="#递归需要遵守的重要规则" class="headerlink" title="递归需要遵守的重要规则"></a>递归需要遵守的重要规则</h2><p>1）执行一个方法时，就创建一个新的受保护的独立空间（栈空间）</p><p>2）方法的局部变量时独立的，不会相互影响</p><p>3）如果方法中应用的是引用类型的变量（比如数组），就会共享该引用类型的数据</p><p>3）递归必须向退出递归的条件逼近，否则就是无限递归，死龟！</p><p>4）当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</p><h2 id="经典迷宫问题"><a href="#经典迷宫问题" class="headerlink" title="经典迷宫问题"></a>经典迷宫问题</h2><span class='p center small'>问题：小球从坐标位置为（1，1）的空白位置移动到（6，5）的最短路径怎么用回溯的思想求出来（注：左上角的坐标是(0，0))</span><p><img src="https://img-blog.csdnimg.cn/20210513162036833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjMyNDE0,size_16,color_FFFFFF,t_70" alt=""></p><p>提示：</p><ul><li>小球得到的路径，和程序员设置的找路策略有关即:找路的上下左右的顺序相关</li><li>在得到小球路径时，可以先使用(下右上左)，再改成(上右下左)，看看路径是不是有变化</li><li>测试回潮现象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/27 19:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiGong</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//先创建一个二维数组,模拟迷宫</span></span><br><span class="line">        <span class="comment">//地图</span></span><br><span class="line">        <span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line">        <span class="comment">//使用1表示墙</span></span><br><span class="line">        <span class="comment">//上下全部置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右全部置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置挡板,1表示</span></span><br><span class="line">        map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出地图</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用递归回溯给小球找路</span></span><br><span class="line">        setWay(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//输出新的地图,小球走过,并标识过的递归</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出新的地图,小球走过,并标识过的递归&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用递归回溯来给小球找路</span></span><br><span class="line">    <span class="comment">//1. map表示地图</span></span><br><span class="line">    <span class="comment">//2. i,j表示从地图的哪个位置开始出发(1,1)</span></span><br><span class="line">    <span class="comment">//3. 如果小球能到map[6][5]位置,则说明通路找到</span></span><br><span class="line">    <span class="comment">//4. 约定,当map[i][j] 为0表示该点没有走过,当为1表示墙,2表示通路可以走,3表示该点走过但是不通</span></span><br><span class="line">    <span class="comment">//5. 在走迷宫时,需要确定一个策略(方法) 下-&gt;右-&gt;上-&gt;左,如果该点走不通,在回溯</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 说明</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 表示地图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i   从哪个位置开始找路</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果找到通路, 就返回treu, 否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">setWay</span><span class="params">(<span class="type">int</span>[][] map, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123;    <span class="comment">//通路已找到欧克</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123;    <span class="comment">//如果当前这个点还没有走过</span></span><br><span class="line">                <span class="comment">//按照策略  下-&gt;右-&gt;上-&gt;左,如果该点走不通,在回溯</span></span><br><span class="line">                map[i][j] = <span class="number">2</span>;  <span class="comment">//假定该点时可以走通</span></span><br><span class="line">                <span class="keyword">if</span> (setWay(map, i + <span class="number">1</span>, j)) &#123;  <span class="comment">//向下走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i, j + <span class="number">1</span>)) &#123;    <span class="comment">//向右走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i - <span class="number">1</span>, j)) &#123;   <span class="comment">//向上走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i, j - <span class="number">1</span>)) &#123;  <span class="comment">//向左走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//说明该点是走不通,是死路</span></span><br><span class="line">                    map[i][j] = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果map[i][j] !=0,可能是1,2,3</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哔哔图片问题</title>
      <link href="/posts/f605ecd9.html"/>
      <url>/posts/f605ecd9.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>本文根据洪哥哔哔教程二改~解决哔哔发送图片问题</p></div><div class="table-container"><table><thead><tr><th style="text-align:center">相关教程</th><th style="text-align:center">教程地址</th></tr></thead><tbody><tr><td style="text-align:center">洪哥哔哔教程</td><td style="text-align:center"><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.zhheo.com/p/a6947667.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://npm.elemecdn.com/akilar-friends@latest/avatar/blog.zhheo.com.jpg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">ZHHOE </div>            <div class="tag-link-sitename"> 洪哥哔哔教程</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div></td></tr><tr><td style="text-align:center">「哔哔点啥」微信公众号</td><td style="text-align:center"><a href="https://immmmm.com/bb-by-wechat-pro/">「哔哔点啥」微信公众号 2.0</a></td></tr></tbody></table></div><details class="folding-tag" yellow><summary> 问题说明 </summary>              <div class='content'>              <p><img src="https://npm.elemecdn.com/serms-assets@1.0.21/bufferfly/image-20220419142846050.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.21/bufferfly/image-20220419142902156.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.21/bufferfly/image-20220419142911862.png" alt=""></p><div class="tip "><p>可以看到问题很明显</p><ol><li>图片大小</li><li>图片上下有多余得代码(洪哥 js 得问题)</li><li>无法预览</li></ol></div>              </div>            </details><h2 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h2><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">源码修改方式</button><button type="button" class="tab " data-href="test1-2">cdn链接替换(推荐)</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><img src="https://npm.elemecdn.com/serms-assets@1.0.21/bufferfly/image-20220419145803095.png" alt=""></p><p>将洪哥 heobbe.js 文件拉取到博客存放 js 得目录下</p><p>修改其中得<code>urlToLink</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">urlToLink</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;判断是否是图片&quot;</span>, str.<span class="title function_">indexOf</span>(<span class="string">&quot;http&quot;</span>));</span><br><span class="line">  <span class="keyword">if</span> (str.<span class="title function_">indexOf</span>(<span class="string">&quot;http&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> re_forpic =</span><br><span class="line">      <span class="regexp">/\bhttps?:[^:&lt;&gt;&quot;]*\/([^:&lt;&gt;&quot;]*)(\.(jpeg)|(png)|(jpg)|(webp))(!blogimg)?/g</span>;</span><br><span class="line">    <span class="keyword">var</span> a1;</span><br><span class="line">    <span class="keyword">var</span> a2;</span><br><span class="line">    str.<span class="title function_">replace</span>(re_forpic, <span class="keyword">function</span> (<span class="params">imgurl</span>) &#123;</span><br><span class="line">      a1 =</span><br><span class="line">        <span class="string">&quot;&lt;a href=&quot;</span> +</span><br><span class="line">        imgurl +</span><br><span class="line">        <span class="string">&quot; data-fancybox=&#x27;gallery&#x27; data-caption=&#x27;&#x27; data-thumb=&quot;</span> +</span><br><span class="line">        imgurl +</span><br><span class="line">        <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">      a2 = <span class="string">&quot;&lt;img src=&quot;</span> + imgurl + <span class="string">&quot;&gt;&lt;/img&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    str = a1 + a2;</span><br><span class="line">    <span class="keyword">return</span> a1 + a2;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/\bhttps?:\/\/(?!\S+(?:jpe?g|png|bmp|gif|webp|gif))\S+/g</span>;</span><br><span class="line"></span><br><span class="line">    str = str.<span class="title function_">replace</span>(re, <span class="keyword">function</span> (<span class="params">website</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="string">&quot; &lt;a href=&#x27;&quot;</span> + website + <span class="string">&quot;&#x27;rel=&#x27;noopener&#x27; target=&#x27;_blank&#x27;&gt;↘链接↙&lt;/a&gt;&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完后全文(可直接复制这个粘贴替换 heobber.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if (document.querySelector(&#x27;#bber-loading&#x27;)) &#123;</span></span><br><span class="line"><span class="comment">//   var loading_pic = document.getElementById(&#x27;bber-loading&#x27;);</span></span><br><span class="line"><span class="comment">//   loading_pic.innerHTML = &#x27;&lt;span id=&quot;moments_loading&quot;&gt;&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&lt;/span&gt;&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getbbdata</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> bbsurl = bbapiurl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> httpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">//第一步：建立所需的对象</span></span><br><span class="line">  httpRequest.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, bbsurl, <span class="literal">true</span>); <span class="comment">//第二步：打开连接  将请求参数写在url中  ps:&quot;./Ptest.php?name=test&amp;nameone=testone&quot;</span></span><br><span class="line">  httpRequest.<span class="title function_">send</span>(); <span class="comment">//第三步：发送请求  将请求参数写在URL中</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取数据后的处理程序</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  httpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (httpRequest.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; httpRequest.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> json = httpRequest.<span class="property">responseText</span>; <span class="comment">//获取到json字符串，还需解析</span></span><br><span class="line">      <span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + json + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">      <span class="comment">// console.log(obj.data)</span></span><br><span class="line">      <span class="keyword">const</span> bbArray = obj.<span class="property">data</span>.<span class="title function_">map</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">date</span>: e.<span class="property">date</span>,</span><br><span class="line">          <span class="attr">content</span>: e.<span class="property">content</span>,</span><br><span class="line">          <span class="attr">from</span>: e.<span class="property">from</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// console.log(fundsArray)</span></span><br><span class="line">      saveToLocal.<span class="title function_">set</span>(<span class="string">&quot;zhheo-bb&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(bbArray), <span class="number">5</span> / (<span class="number">60</span> * <span class="number">24</span>));</span><br><span class="line">      <span class="keyword">const</span> data = saveToLocal.<span class="title function_">get</span>(<span class="string">&quot;zhheo-bb&quot;</span>);</span><br><span class="line">      <span class="title function_">generateBBHtml</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">generateBBHtml</span> = array =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> $dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#bber&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">&#x27;&lt;section class=&quot;timeline page-1&quot;&gt;&lt;ul&gt;&lt;div class=&quot;list&quot;&gt;&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> from_icon = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (array[i].<span class="property">from</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;iPhone&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-mobile-alt&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i].<span class="property">from</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;iPad&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-tablet-alt&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i].<span class="property">from</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;Mac&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-laptop&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i].<span class="property">from</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;微信&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        from_icon = <span class="string">&#x27;&lt;i class=&quot;fab fa-weixin&quot; style=&quot;font-size: 0.6rem&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-tools&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(array[i].<span class="property">date</span>);</span><br><span class="line">      <span class="keyword">var</span> dtime = array[i].<span class="property">date</span>,</span><br><span class="line">        data =</span><br><span class="line">          d.<span class="title function_">getFullYear</span>() +</span><br><span class="line">          <span class="string">&quot;/&quot;</span> +</span><br><span class="line">          (d.<span class="title function_">getMonth</span>() + <span class="number">1</span>) +</span><br><span class="line">          <span class="string">&quot;/&quot;</span> +</span><br><span class="line">          d.<span class="title function_">getDate</span>() +</span><br><span class="line">          <span class="string">&quot; &quot;</span> +</span><br><span class="line">          d.<span class="title function_">getHours</span>() +</span><br><span class="line">          <span class="string">&quot;:&quot;</span> +</span><br><span class="line">          d.<span class="title function_">getMinutes</span>() +</span><br><span class="line">          <span class="string">&quot;:&quot;</span> +</span><br><span class="line">          d.<span class="title function_">getSeconds</span>();</span><br><span class="line">      <span class="keyword">var</span> dataCont =</span><br><span class="line">        <span class="string">&#x27;&lt;p class=&quot;datacont&quot;&gt;&#x27;</span> + <span class="title function_">urlToLink</span>(array[i].<span class="property">content</span>) + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">      <span class="keyword">var</span> dataTime = <span class="string">&#x27;&lt;p class=&quot;datatime&quot;&gt;&#x27;</span> + data + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">      result +=</span><br><span class="line">        <span class="string">`&lt;li class=&quot;item&quot;&gt;&lt;div&gt;`</span> +</span><br><span class="line">        dataTime +</span><br><span class="line">        dataCont +</span><br><span class="line">        <span class="string">`&lt;/p&gt;&lt;p class=&quot;datafrom&quot;&gt;&lt;small&gt;`</span> +</span><br><span class="line">        from_icon +</span><br><span class="line">        array[i].<span class="property">from</span> +</span><br><span class="line">        <span class="string">`&lt;/small&gt;&lt;/p&gt;&lt;/div&gt;&lt;/li&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result += <span class="string">&#x27;!&#123;_p(&quot;aside.card_funds.zero&quot;)&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result += <span class="string">&quot;&lt;/div&gt;&lt;/ul&gt;&lt;/section&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> $dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#bber&quot;</span>);</span><br><span class="line"></span><br><span class="line">  $dom.<span class="property">innerHTML</span> = result;</span><br><span class="line">  <span class="title class_">Lately</span>(&#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&quot;#bber .datatime&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">lazyLoadInstance</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">lazyLoadInstance</span>.<span class="title function_">update</span>();</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">pjax</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">pjax</span>.<span class="title function_">refresh</span>($dom);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#bber&quot;</span>)) &#123;</span><br><span class="line">  <span class="title function_">getbbdata</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">urlToLink</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;判断是否是图片&quot;</span>, str.<span class="title function_">indexOf</span>(<span class="string">&quot;http&quot;</span>));</span><br><span class="line">  <span class="keyword">if</span> (str.<span class="title function_">indexOf</span>(<span class="string">&quot;http&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> re_forpic =</span><br><span class="line">      <span class="regexp">/\bhttps?:[^:&lt;&gt;&quot;]*\/([^:&lt;&gt;&quot;]*)(\.(jpeg)|(png)|(jpg)|(webp))(!blogimg)?/g</span>;</span><br><span class="line">    <span class="keyword">var</span> a1;</span><br><span class="line">    <span class="keyword">var</span> a2;</span><br><span class="line">    str.<span class="title function_">replace</span>(re_forpic, <span class="keyword">function</span> (<span class="params">imgurl</span>) &#123;</span><br><span class="line">      a1 =</span><br><span class="line">        <span class="string">&quot;&lt;a href=&quot;</span> +</span><br><span class="line">        imgurl +</span><br><span class="line">        <span class="string">&quot; data-fancybox=&#x27;gallery&#x27; data-caption=&#x27;&#x27; data-thumb=&quot;</span> +</span><br><span class="line">        imgurl +</span><br><span class="line">        <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">      a2 = <span class="string">&quot;&lt;img src=&quot;</span> + imgurl + <span class="string">&quot;&gt;&lt;/img&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    str = a1 + a2;</span><br><span class="line">    <span class="keyword">return</span> a1 + a2;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/\bhttps?:\/\/(?!\S+(?:jpe?g|png|bmp|gif|webp|gif))\S+/g</span>;</span><br><span class="line"></span><br><span class="line">    str = str.<span class="title function_">replace</span>(re, <span class="keyword">function</span> (<span class="params">website</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="string">&quot; &lt;a href=&#x27;&quot;</span> + website + <span class="string">&quot;&#x27;rel=&#x27;noopener&#x27; target=&#x27;_blank&#x27;&gt;↘链接↙&lt;/a&gt;&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">MIT License - http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment">For usage and examples, visit:</span></span><br><span class="line"><span class="comment">https://tokinx.github.io/lately/</span></span><br><span class="line"><span class="comment">Copyright (c) 2017, Biji.IO</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> $jscomp = $jscomp || &#123;&#125;;</span><br><span class="line">$jscomp.<span class="property">scope</span> = &#123;&#125;;</span><br><span class="line">$jscomp.<span class="property">arrayIteratorImpl</span> = <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> g &lt; b.<span class="property">length</span></span><br><span class="line">      ? &#123;</span><br><span class="line">          <span class="attr">done</span>: !<span class="number">1</span>,</span><br><span class="line">          <span class="attr">value</span>: b[g++],</span><br><span class="line">        &#125;</span><br><span class="line">      : &#123;</span><br><span class="line">          <span class="attr">done</span>: !<span class="number">0</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">$jscomp.<span class="property">arrayIterator</span> = <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: $jscomp.<span class="title function_">arrayIteratorImpl</span>(b),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">$jscomp.<span class="property">makeIterator</span> = <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="title class_">Symbol</span> &amp;&amp; <span class="title class_">Symbol</span>.<span class="property">iterator</span> &amp;&amp; b[<span class="title class_">Symbol</span>.<span class="property">iterator</span>];</span><br><span class="line">  <span class="keyword">return</span> g ? g.<span class="title function_">call</span>(b) : $jscomp.<span class="title function_">arrayIterator</span>(b);</span><br><span class="line">&#125;;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">b, g</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">function</span> (<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> d = h.<span class="property">lang</span> || &#123;</span><br><span class="line">      <span class="attr">second</span>: <span class="string">&quot;\u79d2&quot;</span>,</span><br><span class="line">      <span class="attr">minute</span>: <span class="string">&quot;\u5206\u949f&quot;</span>,</span><br><span class="line">      <span class="attr">hour</span>: <span class="string">&quot;\u5c0f\u65f6&quot;</span>,</span><br><span class="line">      <span class="attr">day</span>: <span class="string">&quot;\u5929&quot;</span>,</span><br><span class="line">      <span class="attr">month</span>: <span class="string">&quot;\u4e2a\u6708&quot;</span>,</span><br><span class="line">      <span class="attr">year</span>: <span class="string">&quot;\u5e74&quot;</span>,</span><br><span class="line">      <span class="attr">ago</span>: <span class="string">&quot;\u524d&quot;</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="string">&quot;NaN&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    h = $jscomp.<span class="title function_">makeIterator</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(h.<span class="property">target</span> || <span class="string">&quot;.time&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c = h.<span class="title function_">next</span>(); !c.<span class="property">done</span>; c = h.<span class="title function_">next</span>()) &#123;</span><br><span class="line">      c = c.<span class="property">value</span>;</span><br><span class="line">      <span class="keyword">var</span> a = c.<span class="property">dateTime</span>;</span><br><span class="line">      <span class="keyword">var</span> e = c.<span class="property">title</span>,</span><br><span class="line">        f = c.<span class="property">innerHTML</span>;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        !a ||</span><br><span class="line">        <span class="built_in">isNaN</span>(</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">Date</span>(</span><br><span class="line">            (a = a.<span class="title function_">replace</span>(<span class="regexp">/(.*)[a-z](.*)\+(.*)/gi</span>, <span class="string">&quot;$1 $2&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">        <span class="keyword">if</span> (e &amp;&amp; !<span class="built_in">isNaN</span>(<span class="keyword">new</span> <span class="title class_">Date</span>((e = e.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))))) a = e;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f &amp;&amp; !<span class="built_in">isNaN</span>(<span class="keyword">new</span> <span class="title class_">Date</span>((f = f.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))))) a = f;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">      c.<span class="property">title</span> = a;</span><br><span class="line">      a = <span class="keyword">new</span> <span class="title class_">Date</span>(a);</span><br><span class="line">      a = (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - a.<span class="title function_">getTime</span>()) / <span class="number">1e3</span>;</span><br><span class="line">      e = a / <span class="number">60</span>;</span><br><span class="line">      f = e / <span class="number">60</span>;</span><br><span class="line">      <span class="keyword">var</span> k = f / <span class="number">24</span>,</span><br><span class="line">        l = k / <span class="number">30</span>,</span><br><span class="line">        m = l / <span class="number">12</span>;</span><br><span class="line">      c.<span class="property">innerHTML</span> =</span><br><span class="line">        (<span class="number">1</span> &lt;= m</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(m) + d.<span class="property">year</span></span><br><span class="line">          : <span class="number">1</span> &lt;= l</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(l) + d.<span class="property">month</span></span><br><span class="line">          : <span class="number">1</span> &lt;= k</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(k) + d.<span class="property">day</span></span><br><span class="line">          : <span class="number">1</span> &lt;= f</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(f) + d.<span class="property">hour</span></span><br><span class="line">          : <span class="number">1</span> &lt;= e</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(e) + d.<span class="property">minute</span></span><br><span class="line">          : <span class="number">1</span> &lt;= a</span><br><span class="line">          ? <span class="title class_">Math</span>.<span class="title function_">floor</span>(a) + d.<span class="property">second</span></span><br><span class="line">          : d.<span class="property">error</span>) + d.<span class="property">ago</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> n = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span> || (<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">&quot;this&quot;</span>);</span><br><span class="line">  &#125;)();</span><br><span class="line">  <span class="string">&quot;Lately&quot;</span> <span class="keyword">in</span> n || (n.<span class="property">Lately</span> = p);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>接着在 css 文件中添加:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.datacont</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test1-2"><p>直接把洪哥得 heobbe.js 替换成,作者编写好得 js 链接:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//npm.elemecdn.com/msstatic@1.0.1/js/heobber.js</span></span><br></pre></td></tr></table></figure><p>接着在 css 文件中添加:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.datacont</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
          <category> Hexo </category>
          
          <category> 功能扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哔哔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的自动装配</title>
      <link href="/posts/63755f3a.html"/>
      <url>/posts/63755f3a.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>好处：大幅度减少 Spring 配置</p><p>坏处：依赖不能明确管理，可能会有多个 bean 同时符合注入规则，没有清晰的依赖关系。</p><p>在装配的时候会有两种方式，<code>byName</code>和<code>byType</code>两种。</p><p>byName：根据属性名自动装配。此选项将检查容器并根据名字查找与属性完全一致的 bean，并将其与属性自动装配。</p><p>byType：如果容器中存在一个与指定属性类型相同的 bean，那么将与该属性自动装配；如果存在多个该类型 bean，那么抛出异常，并指出不能使用 byType 方式进行自动装配；如果没有找到相匹配的 bean，则什么事都不发生，也可以通过设置</p></div><h2 id="什么是自动装配"><a href="#什么是自动装配" class="headerlink" title="什么是自动装配"></a>什么是自动装配</h2><p>自动装配：<em>也就是 <code>Spring</code> 会在容器中自动的查找，并自动的给 <code>bean</code> 装配及其关联的属性</em></p><p>涉及到自动装配 <code>bean</code> 的<a href="https://so.csdn.net/so/search?q=依赖关系&amp;spm=1001.2101.3001.7020">依赖关系</a>时，<code>Spring</code> 有多种处理方式。<code>Spring</code> 提供了 <code>4</code> 种自动装配策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无需自动装配</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AUTOWIRE_NO</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按名称自动装配 bean 属性</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AUTOWIRE_BY_NAME</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按类型自动装配 bean 属性</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AUTOWIRE_BY_TYPE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按构造器自动装配</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AUTOWIRE_CONSTRUCTOR</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过时方法，Spring3.0 之后不再支持</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AUTOWIRE_AUTODETECT</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是依赖注入"><a href="#什么是依赖注入" class="headerlink" title="什么是依赖注入"></a>什么是依赖注入</h2><p>依赖注入：当一个类的实例需要另一个类的实例协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。然而采用依赖注入的方式，创建被调用者的工作不再由调用者来完成，创建被调用者的实例的工作由 IOC 容器来完成。然后注入调用者，称为依赖注入</p><p>控制反转：当一个类的实例需要另一个类的实例协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。然而采用控制反转的方式，创建被调用者的工作不再由调用者来完成，创建被调用者的实例的工作由 IOC 容器来完成。也就是把对象的创建，初始化，销毁的工作交给 spring ioc 容器来做。由 spring ioc 容器来管理对象的生命周期</p><p>依赖注入的方式有两种：构造器注入和 setter 方法注入</p><h3 id="依赖注入与自动装配的关系"><a href="#依赖注入与自动装配的关系" class="headerlink" title="依赖注入与自动装配的关系"></a>依赖注入与自动装配的关系</h3><p>依赖注入的本质就是装配，装配是依赖注入的具体行为</p><p>在传统的使用 xml 文件装配 bean 是一件很繁琐的事情，而且还需要找到对应类型的 bean 才能装配，一旦 bean 很多，就不好维护了。为了解决这种问题，spring 使用注解来进行自动装配。自动装配就是开发人员不必知道具体要装配哪个 bean 的引用，这个识别的工作会由 spring 来完成。与自动装配配合的还有“自动检测”，这个动作会自动识别哪些类需要被配置成 bean，进而来进行装配</p><p>因此也可以这样理解：自动装配是为了将依赖注入“自动化”的一个简化配置的操作</p><h2 id="Spring-中自动装配的策略"><a href="#Spring-中自动装配的策略" class="headerlink" title="Spring 中自动装配的策略"></a><code>Spring</code> 中自动装配的策略</h2><h3 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h3><p>它的意思是：把与 bean 的属性具有相同名字的其他 bean 自动装配到 bean 的对应属性中</p><p>例：在 User 的 bean 中有个属性 Role myRole，再创建一个 Role 的 bean，它的名字如果叫 myRole，那么在 User 中就可以使用 byName 来自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Role myRole;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是 <code>bean</code> 的定义，再看配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myRole&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.viewscenes.netsupervisor.entity.Role&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;管理员&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.viewscenes.netsupervisor.entity.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上所述，只要属性名称和 bean 的名称可以对应，那么在 user 的 bean 中就可以使用 byName 来自动装配。那么，如果属性名称对应不上呢？</p><h3 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h3><p>它的意思是：把与 bean 的属性具有相同类型的其他 bean 自动装配到 bean 的对应属性中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.viewscenes.netsupervisor.entity.Role&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;管理员&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.viewscenes.netsupervisor.entity.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还是上面的例子，如果使用 <code>byType，Role bean</code> 的 <code>id</code> 都可以省去</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>它是说：<em>把与 <code>bean</code> 的构造器入参具有相同类型的其他 <code>bean</code> 自动装配到 <code>bean</code> 构造器的对应入参中</em>。值的注意的是，具有相同类型的其他 <code>bean</code> 这句话说明它在查找入参的时候，还是通过 <code>bean</code> 的类型来确定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.viewscenes.netsupervisor.entity.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;constructor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="autodetect（不推荐使用了）"><a href="#autodetect（不推荐使用了）" class="headerlink" title="autodetect（不推荐使用了）"></a>autodetect（不推荐使用了）</h3><p>它首先会尝试使用 <code>constructor</code> 进行自动装配，如果失败再尝试使用 <code>byType</code> 。不过，它在 <code>Spring 3.0</code> 之后已经被标记为 <code>@Deprecated</code></p><h2 id="默认的自动装配策略"><a href="#默认的自动装配策略" class="headerlink" title="默认的自动装配策略"></a>默认的自动装配策略</h2><p>默认情况下，default-autowire 属性被设置为 none，标示所有的 bean 都不使用自动装配，除非 bean 上配置了 autowire 属性</p><p>如果你需要为所有的 bean 配置相同的 autowire 属性，有个办法可以简化这一操作，在根元素 beans 上增加属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">default-autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Autowired-注解"><a href="#Autowired-注解" class="headerlink" title="@Autowired 注解"></a>@Autowired 注解</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.serms.top/post/7047b0e7/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://blog.serms.top/img/favicon.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Autowired</div>            <div class="tag-link-sitename"> Autowired 注解使用</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p><strong>具体的大家可以看这篇文章,这里补充一些文章没写全的内容</strong></p><p>从 <code>Spring 2.5</code> 开始，开始支持使用注解来自动装配 <code>bean</code> 的属性。它允许更细粒度的自动装配，我们可以选择性的标注某一个属性来对其应用自动装配。<code>Spring</code> 支持几种不同的应用于自动装配的注解</p><ul><li><code>Spring</code> 自带的 <code>@Autowired</code> 注解</li><li><code>JSR-330</code> 的 <code>@Inject</code> 注解</li><li><code>JSR-250</code> 的 <code>@Resource</code> 注解</li></ul><p>使用 <code>@Autowired</code> 它有几个点需要注意</p><h3 id="强制性"><a href="#强制性" class="headerlink" title="强制性"></a>强制性</h3><p><em>默认情况下，它具有强制契约特性，其所标注的属性必须是可装配的。如果没有 <code>bean</code> 可以装配到 <code>@Autowired</code> 所标注的属性或参数中，那么你会看到 <code>NoSuchBeanDefinitionException</code> 的异常信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">doResolveDependency</span><span class="params">(DependencyDescriptor descriptor, String beanName,</span></span><br><span class="line"><span class="params">            Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找Bean</span></span><br><span class="line">    Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);</span><br><span class="line">    <span class="comment">// 如果拿到的 Bean 集合为空，且 isRequired 为 true，就抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (matchingBeans.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (descriptor.isRequired()) &#123;</span><br><span class="line">            raiseNoSuchBeanDefinitionException(type, <span class="string">&quot;&quot;</span>, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到上面的源码，我们可以得到这一信息，<code>bean</code> 集合为空不要紧，关键 <code>isRequired</code> 条件不能成立，如果成立就会抛异常。那么，如果我们不确定属性是否可以装配，可以这样来使用 <code>Autowired</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line">UserService userService;</span><br></pre></td></tr></table></figure><h3 id="装配策略"><a href="#装配策略" class="headerlink" title="装配策略"></a>装配策略</h3><p>前几天看到大佬群里有个面试题是这样问的：<code>Autowired</code> 是按照什么策略来自动装配的呢？关于这个问题，不能一概而论，你不能简单的说按照类型或者按照名称。但可以确定的一点的是，它默认是按照类型来自动装配的，即 <code>byType</code></p><h4 id="默认按照类型装配"><a href="#默认按照类型装配" class="headerlink" title="默认按照类型装配"></a>默认按照类型装配</h4><p>关键点 <code>findAutowireCandidates</code> 这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title function_">findAutowireCandidates</span><span class="params">(</span></span><br><span class="line"><span class="params">        String beanName, Class&lt;?&gt; requiredType, DependencyDescriptor descriptor)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取给定类型的所有 bean 名称，里面实际循环所有的 beanName，获取它的实例</span></span><br><span class="line">    <span class="comment">// 再通过 isTypeMatch 方法来确定</span></span><br><span class="line">    String[] candidateNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">            <span class="built_in">this</span>, requiredType, <span class="literal">true</span>, descriptor.isEager());</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt;(candidateNames.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据返回的 beanName，获取其实例返回</span></span><br><span class="line">    <span class="keyword">for</span> (String candidateName : candidateNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isSelfReference(beanName, candidateName) &amp;&amp; isAutowireCandidate(candidateName, descriptor)) &#123;</span><br><span class="line">            result.put(candidateName, getBean(candidateName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到它返回的是一个列表，那么就表明，按照类型匹配可能会查询到多个实例。到底应该装配哪个实例呢？我看有的文章里说，可以加注解以此规避。比如 <code>@qulifier、@Primary</code> 等，实际还有个简单的办法</p><p>比如，按照 <code>UserService</code> 接口类型来装配它的实现类。<code>UserService</code> 接口有多个实现类，分为 <code>UserServiceImpl、UserServiceImpl2</code>。那么我们在注入的时候，就可以把属性名称定义为 <code>bean</code> 实现类的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserService UserServiceImpl2;</span><br></pre></td></tr></table></figure><p>这样的话，<code>spring</code> 会按照 <code>byName</code> 来进行装配。首先，如果查到类型的多个实例，<code>spring</code> 已经做了判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">doResolveDependency</span><span class="params">(DependencyDescriptor descriptor, String beanName,</span></span><br><span class="line"><span class="params">            Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照类型查找 bean 实例</span></span><br><span class="line">    Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);</span><br><span class="line">    <span class="comment">// 如果 bean 集合为空，且 isRequired 成立,就抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (matchingBeans.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (descriptor.isRequired()) &#123;</span><br><span class="line">            raiseNoSuchBeanDefinitionException(type, <span class="string">&quot;&quot;</span>, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果查找的 bean 实例大于 1 个</span></span><br><span class="line">    <span class="keyword">if</span> (matchingBeans.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 找到最合适的那个，如果没有合适的，也抛出异常</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">primaryBeanName</span> <span class="operator">=</span> determineAutowireCandidate(matchingBeans, descriptor);</span><br><span class="line">        <span class="keyword">if</span> (primaryBeanName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoUniqueBeanDefinitionException</span>(type, matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (autowiredBeanNames != <span class="literal">null</span>) &#123;</span><br><span class="line">            autowiredBeanNames.add(primaryBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matchingBeans.get(primaryBeanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，如果查到多个实例，<code>determineAutowireCandidate</code> 方法就是关键。它来确定一个合适的 <code>bean</code> 返回。其中一部分就是按照 <code>bean</code> 的名称来匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">determineAutowireCandidate</span><span class="params">(Map&lt;String, Object&gt; candidateBeans,</span></span><br><span class="line"><span class="params">                DependencyDescriptor descriptor)</span> &#123;</span><br><span class="line">    <span class="comment">// 循环拿到的 bean 集合</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : candidateBeans.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">candidateBeanName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">beanInstance</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        <span class="comment">// 通过 matchesBeanName 方法来确定 bean 集合中的名称是否与属性的名称相同</span></span><br><span class="line">        <span class="keyword">if</span> (matchesBeanName(candidateBeanName, descriptor.getDependencyName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> candidateBeanName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们回到问题上，得到的答案就是：<em><code>@Autowired</code> 默认使用 <code>byType</code> 来装配属性，如果匹配到类型的多个实例，再通过 <code>byName</code> 来确定 <code>bean</code></em></p><h3 id="主和优先级"><a href="#主和优先级" class="headerlink" title="主和优先级"></a>主和优先级</h3><p>上面我们已经看到了，通过 <code>byType</code> 可能会找到多个实例的 <code>bean</code>。然后再通过 <code>byName</code> 来确定一个合适的 <code>bean</code>，如果通过名称也确定不了呢？</p><p>还是 <code>determineAutowireCandidate</code> 这个方法，它还有两种方式来确定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">determineAutowireCandidate</span><span class="params">(Map&lt;String, Object&gt; candidateBeans,</span></span><br><span class="line"><span class="params">                DependencyDescriptor descriptor)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; requiredType = descriptor.getDependencyType();</span><br><span class="line">    <span class="comment">// 通过 @Primary注解来标识 bean</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">primaryCandidate</span> <span class="operator">=</span> determinePrimaryCandidate(candidateBeans, requiredType);</span><br><span class="line">    <span class="keyword">if</span> (primaryCandidate != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> primaryCandidate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过 @Priority(value = 0) 注解来标识 bean, value 为优先级大小</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">priorityCandidate</span> <span class="operator">=</span> determineHighestPriorityCandidate(candidateBeans, requiredType);</span><br><span class="line">    <span class="keyword">if</span> (priorityCandidate != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> priorityCandidate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Primary-注解"><a href="#Primary-注解" class="headerlink" title="@Primary 注解"></a><code>@Primary</code> 注解</h4><p>它的作用是看 <code>bean</code> 上是否包含 <code>@Primary</code> 注解，如果包含就返回。当然了，你不能把多个 <code>bean</code> 都设置为 <code>@Primary</code>，不然你会得到 <code>NoUniqueBeanDefinitionException</code> 这个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">determinePrimaryCandidate</span><span class="params">(Map&lt;String, Object&gt; candidateBeans, Class&lt;?&gt; requiredType)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">primaryBeanName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : candidateBeans.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">candidateBeanName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">beanInstance</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        <span class="keyword">if</span> (isPrimary(candidateBeanName, beanInstance)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (primaryBeanName != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">candidateLocal</span> <span class="operator">=</span> containsBeanDefinition(candidateBeanName);</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">primaryLocal</span> <span class="operator">=</span> containsBeanDefinition(primaryBeanName);</span><br><span class="line">                <span class="keyword">if</span> (candidateLocal &amp;&amp; primaryLocal) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoUniqueBeanDefinitionException</span>(requiredType, candidateBeans.size(),</span><br><span class="line">                            <span class="string">&quot;more than one &#x27;primary&#x27; bean found among candidates: &quot;</span> + candidateBeans.keySet());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (candidateLocal) &#123;</span><br><span class="line">                    primaryBeanName = candidateBeanName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                primaryBeanName = candidateBeanName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primaryBeanName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Priority-注解"><a href="#Priority-注解" class="headerlink" title="@Priority 注解"></a><code>@Priority</code> 注解</h4><p>你也可以在 <code>bean</code>上配置<code>@Priority</code>注解，它有个 int 类型的属性 <code>value</code>，可以配置优先级大小。数字越小的，就被优先匹配。同样的，你也不能把多个 <code>bean</code>的优先级配置成相同大小的数值，否则 <code>NoUniqueBeanDefinitionException</code>异常照样出来找你</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">determineHighestPriorityCandidate</span><span class="params">(Map&lt;String, Object&gt; candidateBeans,</span></span><br><span class="line"><span class="params">                                    Class&lt;?&gt; requiredType)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">highestPriorityBeanName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">highestPriority</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : candidateBeans.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">candidateBeanName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">beanInstance</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">candidatePriority</span> <span class="operator">=</span> getPriority(beanInstance);</span><br><span class="line">        <span class="keyword">if</span> (candidatePriority != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (highestPriorityBeanName != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果优先级大小相同</span></span><br><span class="line">                <span class="keyword">if</span> (candidatePriority.equals(highestPriority)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoUniqueBeanDefinitionException</span>(requiredType, candidateBeans.size(),</span><br><span class="line">                        <span class="string">&quot;Multiple beans found with the same priority (&#x27;&quot;</span> + highestPriority + <span class="string">&quot;&#x27;) &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;among candidates: &quot;</span> + candidateBeans.keySet());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (candidatePriority &lt; highestPriority) &#123;</span><br><span class="line">                    highestPriorityBeanName = candidateBeanName;</span><br><span class="line">                    highestPriority = candidatePriority;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                highestPriorityBeanName = candidateBeanName;</span><br><span class="line">                highestPriority = candidatePriority;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> highestPriorityBeanName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Priority</code> 的包在 <code>javax.annotation.Priority</code>，如果想使用它还要引入一个坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节重点阐述了 Spring 中的自动装配的几种策略，又通过源码分析了 Autowired 注解的使用方式。<br>在 Spring3.0 之后，有效的自动装配策略分为<code>byType、byName、constructor</code>三种方式。注解<br>Autowired 默认使用 byType 来自动装配，如果存在类型的多个实例就尝试使用 byName 匹配，如果通过 byName 也确定不了，可以通过 Primary 和 Priority 注解来确定。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解-@Autowired注解使用</title>
      <link href="/posts/7047b0e7.html"/>
      <url>/posts/7047b0e7.html</url>
      
        <content type="html"><![CDATA[<details class="folding-tag" cyan><summary> 写在前面得话 </summary>              <div class='content'>              <div class="note info simple"><p>学习@Autowired 之前建议先学会使用 byType 和 byName</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.serms.top/post/63755f3a/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://npm.elemecdn.com/serms-assets/imgs/avatar.jpg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Spring </div>            <div class="tag-link-sitename"> Spring的自动装配</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>              </div>            </details><h2 id="Autowired-详解"><a href="#Autowired-详解" class="headerlink" title="@Autowired 详解"></a>@Autowired 详解</h2><p>首先要知道另一个东西，default-autowire，它是在 xml 文件中进行配置的，可以设置为 byName、byType、constructor 和 autodetect；比如 byName，不用显式的在 bean 中写出依赖的对象，它会自动的匹配其它 bean 中 id 名与本 bean 的 set**相同的，并自动装载。<br>@Autowired 是用在 JavaBean 中的注解，通过 byType 形式，用来给指定的字段或方法注入所需的外部资源。<br>两者的功能是一样的，就是能减少或者消除属性或构造器参数的设置，只是配置地方不一样而已。<br>autowire 四种模式的区别<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwODI0MTcyODAwMTYz?x-oss-process=image/format,png" alt=""></p><p>先看一下 bean 实例化和@Autowired 装配过程：<br>一切都是从 bean 工厂的 getBean 方法开始的，一旦该方法调用总会返回一个 bean 实例，无论当前是否存在，不存在就实例化一个并装配，否则直接返回。（Spring MVC 是在什么时候开始执行 bean 的实例化过程的呢？其实就在组件扫描完成之后）</p><p>实例化和装配过程中会多次递归调用 getBean 方法来解决类之间的依赖。</p><p>Spring 几乎考虑了所有可能性，所以方法特别复杂但完整有条理。</p><p>@Autowired 最终是根据类型来查找和装配元素的，但是我们设置了<beans default-autowire="byName"/>后会影响最终的类型匹配查找。因为在前面有根据 BeanDefinition 的 autowire 类型设置 PropertyValue 值得一步，其中会有新实例的创建和注册。就是那个 autowireByName 方法。</p><p>下面通过@Autowired 来说明一下用法</p><h2 id="Setter-方法中的-Autowired"><a href="#Setter-方法中的-Autowired" class="headerlink" title="Setter 方法中的 @Autowired"></a>Setter 方法中的 @Autowired</h2><p>你可以在 JavaBean 中的 setter 方法中使用 @Autowired 注解。当 Spring 遇到一个在 setter 方法中使用的 @Autowired 注解，它会在方法中执行 byType 自动装配。<br>这里是 TextEditor.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">( SpellChecker spellChecker )</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> spellChecker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">        spellChecker.checkSpelling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖的类文件 SpellChecker.java 的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 MainApp.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">        te.spellCheck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 Beans.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for textEditor bean without constructor-arg  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你已经完成的创建了源文件和 bean 配置文件，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><p>Inside SpellChecker constructor.<br>Inside checkSpelling.</p><h2 id="属性中的-Autowired"><a href="#属性中的-Autowired" class="headerlink" title="属性中的 @Autowired"></a>属性中的 @Autowired</h2><p>你可以在属性中使用 @Autowired 注解来除去 setter 方法。当时使用 为自动连接属性传递的时候，Spring 会将这些传递过来的值或者引用自动分配给那些属性。所以利用在属性中 @Autowired 的用法，你的 TextEditor.java 文件将变成如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside TextEditor constructor.&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">( )</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spellChecker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span>&#123;</span><br><span class="line">        spellChecker.checkSpelling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 Beans.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你在源文件和 bean 配置文件中完成了上面两处改变，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><p>Inside TextEditor constructor.<br>Inside SpellChecker constructor.<br>Inside checkSpelling.</p><h2 id="构造函数中的-Autowired"><a href="#构造函数中的-Autowired" class="headerlink" title="构造函数中的 @Autowired"></a>构造函数中的 @Autowired</h2><p>你也可以在构造函数中使用 @Autowired。一个构造函数 @Autowired 说明当创建 bean 时，即使在 XML 文件中没有使用 元素配置 bean ，构造函数也会被自动连接。让我们检查一下下面的示例。<br>这里是 TextEditor.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">(SpellChecker spellChecker)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside TextEditor constructor.&quot;</span> );</span><br><span class="line">        <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span>&#123;</span><br><span class="line">        spellChecker.checkSpelling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 Beans.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for textEditor bean without constructor-arg  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你在源文件和 bean 配置文件中完成了上面两处改变，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><p>Inside TextEditor constructor.<br>Inside SpellChecker constructor.<br>Inside checkSpelling.</p><h2 id="Autowired-的（required-false）选项"><a href="#Autowired-的（required-false）选项" class="headerlink" title="@Autowired 的（required=false）选项"></a>@Autowired 的（required=false）选项</h2><p>默认情况下，@Autowired 注解意味着依赖是必须的，它类似于 @Required 注解，然而，你可以使用 @Autowired 的 （required=false） 选项关闭默认行为。<br>即使你不为 age 属性传递任何参数，下面的示例也会成功运行，但是对于 name 属性则需要一个参数。你可以自己尝试一下这个示例，因为除了只有 Student.java 文件被修改以外，它和 @Required 注解示例是相似的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired(required=false)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>@Autowired 注释应用于具有任意名称和多个参数的方法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(MovieCatalog movieCatalog,</span></span><br><span class="line"><span class="params">                        CustomerPreferenceDao customerPreferenceDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalog = movieCatalog;</span><br><span class="line">        <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>您也可以将@Autowired 应用于字段，或者将其与构造函数混合，如以下示例所示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将@Autowired 注释添加到需要该类型数组的字段或方法，则 spring 会从 ApplicationContext 中搜寻符合指定类型的所有 bean，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog[] movieCatalogs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组可以，我们可以马上举一反三，那容器也可以吗，答案是肯定的，下面是 set 以及 map 的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;MovieCatalog&gt; movieCatalogs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieCatalogs</span><span class="params">(Set&lt;MovieCatalog&gt; movieCatalogs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalogs = movieCatalogs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, MovieCatalog&gt; movieCatalogs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieCatalogs</span><span class="params">(Map&lt;String, MovieCatalog&gt; movieCatalogs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalogs = movieCatalogs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是@Autowired 注解的主要使用方式，经常使用 spring 的话应该对其中常用的几种不会感到陌生。</p><h2 id="Autowired-装配不成功的几种情况？"><a href="#Autowired-装配不成功的几种情况？" class="headerlink" title="@Autowired 装配不成功的几种情况？"></a>@Autowired 装配不成功的几种情况？</h2><h3 id="没有加-Component-注解"><a href="#没有加-Component-注解" class="headerlink" title="没有加@Component 注解"></a>没有加@Component 注解</h3><p>在类上面忘了加@Controller、@Service、@Component、@Repository 等注解，spring 就无法完成自动装配的功能，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUser user;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        user.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况应该是最常见的错误了，不会因为你长得帅，就不会犯这种低级的错误。</p><h3 id="注入-Filter-或-Listener"><a href="#注入-Filter-或-Listener" class="headerlink" title="注入 Filter 或 Listener"></a>注入 Filter 或 Listener</h3><p>web 应用启动的顺序是：listener-&gt;filter-&gt;servlet。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/sasasas.png" alt="img"></p><p>接下来看看这个案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUser user;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        user.say();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">        bean = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> <span class="title class_">UserFilter</span>());</span><br><span class="line">        bean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序启动会报错,tomcat 也无法正常启动???什么原因??</p><p>众所周知，springmvc 的启动是在 DisptachServlet 里面做的，而它是在 listener 和 filter 之后执行。如果我们想在 listener 和 filter 里面@Autowired 某个 bean，肯定是不行的，因为 filter 初始化的时候，此时 bean 还没有初始化，无法自动装配。</p><p>如果工作当中真的需要这样做，我们该如何解决这个问题呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFilter</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IUser user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(</span><br><span class="line">            filterConfig.getServletContext());</span><br><span class="line">        <span class="built_in">this</span>.user = ((IUser)(applicationContext.getBean(<span class="string">&quot;user1&quot;</span>)));</span><br><span class="line">        user.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是使用 WebApplicationContextUtils.getWebApplicationContext 获取当前的 ApplicationContext，再通过它获取到 bean 实例。</p><h3 id="注解未被-ComponentScan-扫描"><a href="#注解未被-ComponentScan-扫描" class="headerlink" title="注解未被@ComponentScan 扫描"></a>注解未被@ComponentScan 扫描</h3><p>通常情况下，@Controller、@Service、@Component、@Repository、@Configuration 等注解，是需要通过@ComponentScan 注解扫描，收集元数据的。</p><p>但是，如果没有加@ComponentScan 注解，或者@ComponentScan 注解扫描的路径不对，或者路径范围太小，会导致有些注解无法收集，到后面无法使用@Autowired 完成自动装配的功能。</p><p>有个好消息是，在 springboot 项目中，如果使用了@SpringBootApplication 注解，它里面内置了@ComponentScan 注解的功能。</p><h3 id="循环依赖问题"><a href="#循环依赖问题" class="headerlink" title="循环依赖问题"></a>循环依赖问题</h3><p>如果 A 依赖于 B，B 依赖于 C，C 又依赖于 A，这样就形成了一个死循环。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/ssas.png" alt="img"></p><p>spring 的 bean 默认是单例的，如果单例 bean 使用@Autowired 自动装配，大多数情况，能解决循环依赖问题。</p><p>但是如果 bean 是多例的，会出现循环依赖问题，导致 bean 自动装配不了。</p><p>还有有些情况下，如果创建了代理对象，即使 bean 是单例的，依然会出现循环依赖问题。</p><h2 id="Autowired-和-Resouce-的区别"><a href="#Autowired-和-Resouce-的区别" class="headerlink" title="@Autowired 和@Resouce 的区别"></a>@Autowired 和@Resouce 的区别</h2><p>@Autowired 功能虽说非常强大，但是也有些不足之处。比如：比如它跟 spring 强耦合了，如果换成了 JFinal 等其他框架，功能就会失效。而@Resource 是 JSR-250 提供的，它是 Java 标准，绝大部分框架都支持。</p><p>除此之外，有些场景使用@Autowired 无法满足的要求，改成@Resource 却能解决问题。接下来，我们重点看看@Autowired 和@Resource 的区别。</p><ul><li>@Autowired 默认按 byType 自动装配，而@Resource 默认 byName 自动装配。</li><li>@Autowired 只包含一个参数：required，表示是否开启自动准入，默认是 true。而@Resource 包含七个参数，其中最重要的两个参数是：name 和 type。</li><li>@Autowired 如果要使用 byName，需要使用@Qualifier 一起配合。而@Resource 如果指定了 name，则用 byName 自动装配，如果指定了 type，则用 byType 自动装配。</li><li>@Autowired 能够用在：构造器、方法、参数、成员变量和注解上，而@Resource 能用在：类、成员变量和方法上。</li><li>@Autowired 是 spring 定义的注解，而@Resource 是 JSR-250 定义的注解。</li></ul><p>此外，它们的装配顺序不同。</p><h3 id="Autowired-的装配顺序如下："><a href="#Autowired-的装配顺序如下：" class="headerlink" title="@Autowired 的装配顺序如下："></a><strong>@Autowired 的装配顺序如下：</strong></h3><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/sdsd.png" alt="img"></p><p><strong>@Resource 的装配顺序如下：</strong></p><p><strong>1.如果同时指定了 name 和 type：</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/aasassa.png" alt="img"></p><p><strong>如果指定了 name:</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/8644ebf81a4c510f236bccbc57802424d62adc4dfb9aab2.png" alt="img"></p><p><strong>如果指定了 type：</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/342ac65c10385343ed8ea3ad912bd2dbd263fd54e1666998.png" alt="img"></p><p><strong>如果既没有指定 name，也没有指定 type：</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.13/Spring/7af40ad162d9f2d385020d6c9e358b8c65c069af359a71ef5.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么IDEA不推荐你使用@Autowired?</title>
      <link href="/posts/e97079a9.html"/>
      <url>/posts/e97079a9.html</url>
      
        <content type="html"><![CDATA[<p><code>@Autowired</code>注解相信每个 Spring 开发者都不陌生了！</p><p>但是当我们使用 IDEA 写代码的时候，经常会发现<code>@Autowired</code>注解下面是有小黄线的，我们把小鼠标悬停在上面，可以看到这个如下图所示的警告信息：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.12/Spring/242dd42a2834eb844.png" alt=""></p><p>那么为什么 IDEA 会给出<code>Field injection is not recommended</code>这样的警告呢？</p><p>下面带着这样的问题，一起来全面的了解下 Spring 中的三种注入方式以及他们之间在各方面的优劣。</p><h2 id="Spring-中的三种依赖注入方式"><a href="#Spring-中的三种依赖注入方式" class="headerlink" title="Spring 中的三种依赖注入方式"></a>Spring 中的三种依赖注入方式</h2><h3 id="Field-Injection"><a href="#Field-Injection" class="headerlink" title="Field Injection"></a><strong>Field Injection</strong></h3><p><code>@Autowired</code>注解的一大使用场景就是<code>Field Injection</code>。</p><p>具体形式如下：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.12/Spring/94cad1c8a786c9170784f2ca88ad1939c.png" alt=""></p><p>这种注入方式通过 Java 的反射机制实现，所以 private 的成员也可以被注入具体的对象。</p><h3 id="Constructor-Injection"><a href="#Constructor-Injection" class="headerlink" title="Constructor Injection"></a>Constructor Injection</h3><p><code>Constructor Injection</code>是构造器注入，是我们日常最为推荐的一种使用方式。</p><p>具体形式如下：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.12/Spring/2e2eb9389b504fc20e5f6adeb8f58053b8df6d7.png" alt=""></p><p>这种注入方式很直接，通过对象构建的时候建立关系，所以这种方式对对象创建的顺序会有要求，当然 Spring 会为你搞定这样的先后顺序，除非你出现循环依赖，然后就会抛出异常。</p><h3 id="Setter-Injection"><a href="#Setter-Injection" class="headerlink" title="Setter Injection"></a>Setter Injection</h3><p><code>Setter Injection</code>也会用到<code>@Autowired</code>注解，但使用方式与<code>Field Injection</code>有所不同，<code>Field Injection</code>是用在成员变量上，而<code>Setter Injection</code>的时候，是用在成员变量的 Setter 函数上。</p><p>具体形式如下：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.12/Spring/a08b87d6277f9e2fd1b1ab1c4230882dsee208a50.png" alt=""></p><p>这种注入方式也很好理解，就是通过调用成员变量的 set 方法来注入想要使用的依赖对象。</p><h3 id="三种依赖注入的对比"><a href="#三种依赖注入的对比" class="headerlink" title="三种依赖注入的对比"></a>三种依赖注入的对比</h3><p>在知道了 Spring 提供的三种依赖注入方式之后，我们继续回到本文开头说到的问题：IDEA 为什么不推荐使用<code>Field Injection</code>呢？</p><p>我们可以从多个开发测试的考察角度来对比一下它们之间的优劣：</p><p><strong>可靠性</strong></p><p>从对象构建过程和使用过程，看对象在各阶段的使用是否可靠来评判：</p><ul><li><code>Field Injection</code>：不可靠</li><li><code>Constructor Injection</code>：可靠</li><li><code>Setter Injection</code>：不可靠</li></ul><p>由于构造函数有严格的构建顺序和不可变性，一旦构建就可用，且不会被更改。</p><p><strong>可维护性</strong></p><p>主要从更容易阅读、分析依赖关系的角度来评判：</p><ul><li><code>Field Injection</code>：差</li><li><code>Constructor Injection</code>：好</li><li><code>Setter Injection</code>：差</li></ul><p>还是由于依赖关键的明确，从构造函数中可以显现的分析出依赖关系，对于我们如何去读懂关系和维护关系更友好。</p><p><strong>可测试性</strong></p><p>当在复杂依赖关系的情况下，考察程序是否更容易编写单元测试来评判</p><ul><li><code>Field Injection</code>：差</li><li><code>Constructor Injection</code>：好</li><li><code>Setter Injection</code>：好</li></ul><p><code>Constructor Injection</code>和<code>Setter Injection</code>的方式更容易 Mock 和注入对象，所以更容易实现单元测试。</p><p><strong>灵活性</strong></p><p>主要根据开发实现时候的编码灵活性来判断：</p><ul><li><code>Field Injection</code>：很灵活</li><li><code>Constructor Injection</code>：不灵活</li><li><code>Setter Injection</code>：很灵活</li></ul><p>由于<code>Constructor Injection</code>对 Bean 的依赖关系设计有严格的顺序要求，所以这种注入方式不太灵活。相反<code>Field Injection</code>和<code>Setter Injection</code>就非常灵活，但也因为灵活带来了局面的混乱，也是一把双刃剑。</p><p><strong>循环关系的检测</strong></p><p>对于 Bean 之间是否存在循环依赖关系的检测能力：</p><ul><li><code>Field Injection</code>：不检测</li><li><code>Constructor Injection</code>：自动检测</li><li><code>Setter Injection</code>：不检测</li></ul><p><strong>性能表现</strong></p><p>不同的注入方式，对性能的影响</p><ul><li><code>Field Injection</code>：启动快</li><li><code>Constructor Injection</code>：启动慢</li><li><code>Setter Injection</code>：启动快</li></ul><p>主要影响就是启动时间，由于<code>Constructor Injection</code>有严格的顺序要求，所以会拉长启动时间。</p><p>所以，综合上面各方面的比较，可以获得如下表格：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.12/Spring/sc99aef1ea6ee7a3a703ba.png" alt=""></p><p>结果一目了然，<code>Constructor Injection</code>在很多方面都是优于其他两种方式的，所以<code>Constructor Injection</code>通常都是首选方案！</p><p>而<code>Setter Injection</code>比起<code>Field Injection</code>来说，大部分都一样，但因为可测试性更好，所以当你要用<code>@Autowired</code>的时候，推荐使用<code>Setter Injection</code>的方式，这样 IDEA 也不会给出警告了。同时，也侧面也反映了，可测试性的重要地位啊！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后，对于今天的问题讨论，我们给出两个结论，方便大家记忆：</p><ol><li>依赖注入的使用上，<code>Constructor Injection</code>是首选。</li><li>使用<code>@Autowired</code>注解的时候，要使用<code>Setter Injection</code>方式，这样代码更容易编写单元测试。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解-Configuration注解使用</title>
      <link href="/posts/1d0508a6.html"/>
      <url>/posts/1d0508a6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Configuration-的使用"><a href="#Configuration-的使用" class="headerlink" title="@Configuration 的使用"></a><a href="https://blog.serms.top/post/1d0508a6/">@Configuration 的使用</a></h2><p>从 Spring3.0，@Configuration 用于定义配置类，可替换 xml 配置文件，被注解的类内部包含有一个或多个被@Bean 注解的方法，这些方法将会被 AnnotationConfigApplicationContext 或 AnnotationConfigWebApplicationContext 类进行扫描，并用于构建 bean 定义，初始化 Spring 容器。也就是说使用了这个注解完全不需要我们手动去配置<code>applicationContext.xml</code>了</p><p><strong>注意</strong>：@Configuration 注解的配置类有如下要求：</p><ol><li>@Configuration 不可以是 final 类型；</li><li>@Configuration 不可以是匿名类；</li><li>嵌套的 configuration 必须是静态类。</li></ol><p><strong>@Configuation 加载 Spring 方法</strong></p><h2 id="Configuration-配置-spring-并启动-spring-容器"><a href="#Configuration-配置-spring-并启动-spring-容器" class="headerlink" title="@Configuration 配置 spring 并启动 spring 容器"></a>@Configuration 配置 spring 并启动 spring 容器</h2><p>@Configuration 标注在类上，相当于把该类作为 spring 的 xml 配置文件中的<code>&lt;beans&gt;</code>，作用为：配置 spring 容器(应用上下文)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestConfiguration容器启动初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相当于 Spring 的 xml 配置文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主方法进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ms.demo.configuration.TestConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestConfiguration.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果加载spring-context.xml文件：</span></span><br><span class="line">        <span class="comment">// ApplicationContext context = new</span></span><br><span class="line">        <span class="comment">// ClassPathXmlApplicationContext(&quot;spring-context.xml&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从运行主方法结果可以看出，spring 容器已经启动了：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407224716063.png" alt=""></p><h2 id="Configuration-启动容器-Bean-注册-Bean，-Bean-下管理-bean-的生命周期"><a href="#Configuration-启动容器-Bean-注册-Bean，-Bean-下管理-bean-的生命周期" class="headerlink" title="@Configuration 启动容器+@Bean 注册 Bean，@Bean 下管理 bean 的生命周期"></a>@Configuration 启动容器+@Bean 注册 Bean，@Bean 下管理 bean 的生命周期</h2><p>@Bean 标注在方法上(返回某个实例的方法)，等价于 spring 的 xml 配置文件中的<code>&lt;bean&gt;</code>，作用为：注册 bean 对象</p><p>bean 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean sayHello...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;username:&quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;,url:&quot;</span> + <span class="built_in">this</span>.url + <span class="string">&quot;,password:&quot;</span> + <span class="built_in">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean 初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean 销毁。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestConfiguration容器启动初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Bean注解注册bean,同时可以指定初始化和销毁方法</span></span><br><span class="line">    <span class="comment">// @Bean(name=&quot;testBean&quot;,initMethod=&quot;start&quot;,destroyMethod=&quot;cleanUp&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span>     <span class="comment">//配置作用域,默认:singleton单例模式 ;prototype:双例模式,保证每次请求都创建一次对象</span></span><br><span class="line">    <span class="keyword">public</span> TestBean <span class="title function_">testBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主方法测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestConfiguration.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果加载spring-context.xml文件：</span></span><br><span class="line">        <span class="comment">// ApplicationContext context = new</span></span><br><span class="line">        <span class="comment">// ClassPathXmlApplicationContext(&quot;spring-context.xml&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取bean</span></span><br><span class="line">        <span class="type">TestBean</span> <span class="variable">tb</span> <span class="operator">=</span> (TestBean) context.getBean(<span class="string">&quot;testBean&quot;</span>);</span><br><span class="line">        tb.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407225446317.png" alt=""></p><p>注：<br>(1)、@Bean 注解在返回实例的方法上，如果未通过@Bean 指定 bean 的名称，则默认与标注的方法名相同；<br>(2)、@Bean 注解默认作用域为单例 singleton 作用域，可通过@Scope(“prototype”)设置为原型作用域；<br>(3)、既然@Bean 的作用是注册 bean 对象，那么完全可以使用@Component、@Controller、@Service、@Ripository 等注解注册 bean，当然需要配置@ComponentScan 注解进行自动扫描。</p><h2 id="Bean-下管理-bean-的生命周期"><a href="#Bean-下管理-bean-的生命周期" class="headerlink" title="@Bean 下管理 bean 的生命周期"></a><strong>@Bean 下管理 bean 的生命周期</strong></h2><p>可以使用基于 Java 的配置来管理 bean 的生命周期。<code>@Bean</code> 支持两种属性，即 <code>initMethod</code> 和<code>destroyMethod</code>，这些属性可用于定义生命周期方法。在实例化 bean 或即将销毁它时，容器便可调用生命周期方法。生命周期方法也称为回调方法，因为它将由容器调用。使用 <code>@Bean</code> 注释注册的 bean 也支持 JSR-250 规定的标准 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注释。如果您正在使用 XML 方法来定义 bean，那么就应该使用 bean 元素来定义生命周期回调方法。以下代码显示了在 XML 配置中通常使用 bean 元素定义回调的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestConfiguration容器启动初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Bean注解注册bean,同时可以指定初始化和销毁方法</span></span><br><span class="line">    <span class="meta">@Bean(name=&quot;testBean&quot;,initMethod=&quot;start&quot;,destroyMethod=&quot;cleanUp&quot;)</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span>     <span class="comment">//配置作用域,默认:singleton单例模式 ;prototype:双例模式,保证每次请求都创建一次对象</span></span><br><span class="line">    <span class="keyword">public</span> TestBean <span class="title function_">testBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ms.demo.configuration.TestBean;</span><br><span class="line"><span class="keyword">import</span> com.ms.demo.configuration.TestConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestConfiguration.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果加载spring-context.xml文件：</span></span><br><span class="line">        <span class="comment">// ApplicationContext context = new</span></span><br><span class="line">        <span class="comment">// ClassPathXmlApplicationContext(&quot;spring-context.xml&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取bean</span></span><br><span class="line">        <span class="type">TestBean</span> <span class="variable">tb</span> <span class="operator">=</span> (TestBean) context.getBean(<span class="string">&quot;testBean&quot;</span>);</span><br><span class="line">        tb.sayHello();</span><br><span class="line">        System.out.println(tb);</span><br><span class="line"></span><br><span class="line">        <span class="type">TestBean</span> <span class="variable">tb2</span> <span class="operator">=</span> (TestBean) context.getBean(<span class="string">&quot;testBean&quot;</span>);</span><br><span class="line">        tb2.sayHello();</span><br><span class="line">        System.out.println(tb2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407230933661.png" alt=""></p><h2 id="Configuration-启动容器-Component-注册-Bean"><a href="#Configuration-启动容器-Component-注册-Bean" class="headerlink" title="@Configuration 启动容器+@Component 注册 Bean"></a>@Configuration 启动容器+@Component 注册 Bean</h2><p>Bean 类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//添加注册Bean的注解</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean sayHello...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;username:&quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;,url:&quot;</span> + <span class="built_in">this</span>.url + <span class="string">&quot;,password:&quot;</span> + <span class="built_in">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean 初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestBean 销毁。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ms.demo.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//添加自动扫描注解，basePackages为TestBean包路径,也就是让SpringIOC容器扫描到刚刚添加@Component的Bean类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.ms.demo.configuration&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestConfiguration容器启动初始化。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主方法测试获取 bean 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ms.demo.configuration.TestBean;</span><br><span class="line"><span class="keyword">import</span> com.ms.demo.configuration.TestConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 22:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestConfiguration.class);</span><br><span class="line">        <span class="comment">//获取bean</span></span><br><span class="line">        <span class="type">TestBean</span> <span class="variable">tb</span> <span class="operator">=</span> (TestBean) context.getBean(<span class="string">&quot;testBean&quot;</span>);</span><br><span class="line">        tb.sayHello();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sayHello()方法都被正常调用。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407231701864.png" alt=""></p><h2 id="使用-AnnotationConfigApplicationContext-注册-AppContext-类的两种方法"><a href="#使用-AnnotationConfigApplicationContext-注册-AppContext-类的两种方法" class="headerlink" title="使用 AnnotationConfigApplicationContext 注册 AppContext 类的两种方法"></a><strong>使用 AnnotationConfigApplicationContext 注册 AppContext 类的两种方法</strong></h2><ol><li>配置类的注册方式是将其传递给 <code>AnnotationConfigApplicationContext</code> 构造函数</li></ol><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407232200976.png" alt=""></p><ol><li><code>AnnotationConfigApplicationContext</code> 的<code>register</code> 方法传入配置类来注册配置类</li></ol><p><img src="https://npm.elemecdn.com/serms-assets@1.0.11/Spring/image-20220407232908741.png" alt=""></p><h2 id="Configuation-总结"><a href="#Configuation-总结" class="headerlink" title="@Configuation 总结"></a>@Configuation 总结</h2><p>@Configuation 等价于<code>&lt;Beans&gt;&lt;/Beans&gt;</code></p><p>@Bean 等价于<code>&lt;Bean&gt;&lt;/Bean&gt;</code></p><p>@ComponentScan 等价于<code>&lt;context:component-scan base-package=&quot;com.ms.demo&quot;/&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea中Maven项目添加web模块</title>
      <link href="/posts/3208ee03.html"/>
      <url>/posts/3208ee03.html</url>
      
        <content type="html"><![CDATA[<h2 id="教程步骤"><a href="#教程步骤" class="headerlink" title="教程步骤"></a>教程步骤</h2><details class="folding-tag" cyan open><summary> 点击查看教程 </summary>              <div class='content'>              <p>1.首先创建一个 Maven 项目，一路 next，起下项目名字</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403171155529.png" alt=""></p><p>2.建好之后就是这个样子</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403171554797.png" alt=""></p><p>3.然后右键项目找到 open modules setting (打开模块设置) 或者快捷键 ctrl+shift +alt+s 或者右上角有个类似文件夹的图标</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403171742797.png" alt=""></p><p>4.打开以后点 Modules 点项目名点 add 找到 web</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403172017430.png" alt=""></p><p>5.然后修改 web.xml 和 web 资源目录的路径</p><div class="tip warning faa-horizontal animated"><p>注意:路径修改如果你不懂就放我写的路径:<wavy>项目名\src\main\webapp\ …..</wavy></p></div><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403172956018.png" alt=""></p><p>xml 和资源路径应该放在同一个 webapp 下面</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403173108342.png" alt=""></p><div class="tip warning faa-horizontal animated"><p>注意:修改完后点击确定,他会提示你说没有 webapp 这个项目是否创建,点击创建即可</p></div><p>创建完成的样子:</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174021409.png" alt=""></p><p>6.创建 Web application Exploded</p><p>依然还是打开模块设置&gt;选择模块&gt;点击刚刚创建好的 web 目录,如果下面有黄色三角感叹号的提示的话,咱们可以直接点击右侧的创建</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174050465.png" alt=""></p><p>如果没有的话: 点击 artifacts 点+号 选择 Web application Exploded，From Modules 选择项目。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174353863.png" alt=""></p><p>之后即可点击应用和确定就行</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174445834.png" alt=""></p><p>7.然后添加一个 tomcat 点 fix 选择刚才新建的 artifacts</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174606202.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174704803.png" alt=""></p><p>8.修改 Application context 为项目名 就完成了 去新建一个 html 页面访问一下,这里就完成了 web 模块的添加</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.7/maven/image-20220403174937843.png" alt=""></p>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启动Tomcat出现乱码</title>
      <link href="/posts/3a723147.html"/>
      <url>/posts/3a723147.html</url>
      
        <content type="html"><![CDATA[<p>启动 Tomcat 的时候老出现这种<span class='p red'>淇℃伅</span>乱码问题<img no-lazy class="inline" src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fc-ssl.duitang.com%2Fuploads%2Fitem%2F201608%2F02%2F20160802214728_Nhytn.thumb.400_0.jpeg&refer=http%3A%2F%2Fc-ssl.duitang.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1651217931&t=4a196c48ab42a6eb60cefb363f37418b" style="height:80px;"/></p><p>虽然不碍事,但是看着乱码就烦,也许是我强迫症犯了:</p><p><img src="https://cdn1.tianli0.top/npm/serms-assets@1.0.6/Tomcat/image-20220330152805998.png" alt=""></p><h2 id="解决方案如下"><a href="#解决方案如下" class="headerlink" title="解决方案如下"></a>解决方案如下</h2><div class="tip success"><p>找到 tomcat 安装目录下的<span class='p red'>conf/logging.properties</span>文件夹 修改<span class='p red'>logging.properties</span> 文件</p></div><p><img src="https://cdn1.tianli0.top/npm/serms-assets@1.0.6/Tomcat/image-20220330153004409.png" alt=""></p><div class="tip success"><p>将 java.util.logging.ConsoleHandler.encoding = <span class='p red'>utf-8</span><br>更改为 java.util.logging.ConsoleHandler.encoding = <span class='p red'>GBK</span> </p></div><p><img src="https://cdn1.tianli0.top/npm/serms-assets@1.0.6/Tomcat/image-20220330152553962.png" alt=""></p><blockquote><p>修改之后的运行结果:</p></blockquote><p><img src="https://cdn1.tianli0.top/npm/serms-assets@1.0.6/Tomcat/image-20220330153216427.png" alt=""></p><blockquote><p>完满解决~~~</p><p>觉得有用的话,给小弟打赏一下~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Bug记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC学习笔记</title>
      <link href="/posts/319c21eb.html"/>
      <url>/posts/319c21eb.html</url>
      
        <content type="html"><![CDATA[<details class="folding-tag" cyan><summary> 更新记录 </summary>              <div class='content'>              <div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>本人站长也正在学习当中,如果有纠错以及意见可以在下方评论区留言,我会尽快回复您,感谢您对本站的支持</p></div><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-04-04</p></div></div><div class='timeline-item-content'><ol><li>板块做了相应的优化</li><li>补充了一些图片和一些代码</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-03-30</p></div></div><div class='timeline-item-content'><p>文章发布</p></div></div></div>              </div>            </details><details class="folding-tag" blue><summary> 参考教程 </summary>              <div class='content'>              <p><strong>注解类</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">注解名称</th><th style="text-align:center">教程贴</th></tr></thead><tbody><tr><td style="text-align:center">@Controller 注解</td><td style="text-align:center"><a href="https://www.cnblogs.com/hualishu/p/7398881.html">教程</a></td></tr></tbody></table></div><p><strong>其他</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">参考方向</th><th style="text-align:center">教程贴</th></tr></thead><tbody><tr><td style="text-align:center">转发和重定向的区别和使用</td><td style="text-align:center"><a href="https://blog.csdn.net/weixin_40001125/article/details/88663468">教程</a></td></tr></tbody></table></div>              </div>            </details><h1 id="SpringMVC-简介"><a href="#SpringMVC-简介" class="headerlink" title="SpringMVC 简介"></a>SpringMVC 简介</h1><details class="folding-tag" cyan><summary> 什么是MVC </summary>              <div class='content'>              <p>MVC 是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的 JavaBean，作用是处理数据</p><p>JavaBean 分为两类：</p><ul><li>一类称为实体类 Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><p>V：View，视图层，指工程中的 html 或 jsp 等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的 servlet，作用是接收请求和响应浏览器</p><p>MVC 的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被 Controller 接收，Controller 调用相应的 Model 层处理请求，处理完毕将结果返回到 Controller，Controller 再根据请求处理的结果找到相应的 View 视图，渲染数据后最终响应给浏览器</p><div class="tip warning"><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台 servlet</p></div>              </div>            </details><details class="folding-tag" cyan><summary> 什么是SpringMVC </summary>              <div class='content'>              <p>SpringMVC 是 Spring 的一个后续产品，是 Spring 的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p>              </div>            </details><details class="folding-tag" cyan><summary> SpringMVC的特点 </summary>              <div class='content'>              <ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的 Servlet</strong>，通过了功能强大的<strong>前端控制器 DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul>              </div>            </details><h3 id="Spring-网站链接"><a href="#Spring-网站链接" class="headerlink" title="Spring 网站链接"></a>Spring 网站链接</h3><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">Spring官网</button><button type="button" class="tab " data-href="-2">SpringMVC文档</button><button type="button" class="tab " data-href="-3">Thymeleaf官网</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://spring.io/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://spring.io/images/favicon-9d25009f65637a49ac8d91eb1cf7b75e.ico)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Spring </div>            <div class="tag-link-sitename"> Spring.io</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div></div><div class="tab-item-content" id="-2"><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#spring-web">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://spring.io/images/favicon-9d25009f65637a49ac8d91eb1cf7b75e.ico)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">SpringMVC文档 </div>            <div class="tag-link-sitename">SpringMVC</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div></div><div class="tab-item-content" id="-3"><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.thymeleaf.org/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://www.thymeleaf.org/images/thymeleaf.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Thymeleaf官网</div>            <div class="tag-link-sitename"> Thymeleaf</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="创建-MVC-项目及编写-HelloWorld"><a href="#创建-MVC-项目及编写-HelloWorld" class="headerlink" title="创建 MVC 项目及编写 HelloWorld"></a>创建 MVC 项目及编写 HelloWorld</h1><details class="folding-tag" blue><summary> 开发环境 </summary>              <div class='content'>              <p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Idea%20Ultimate%20Edition-2021.3.2-orange?logo=IntelliJ IDEA&color=brightgreen&link=https://www.jetbrains.com/idea/&style=social&logoWidth=20"></object><br></p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/maven3.8.1-%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7-orange?logo=Apache Maven&color=brightgreen&link=https://maven.apache.org/docs/3.8.1/release-notes.html&style=social&logoWidth=20"></object><br></p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/tomcat9-%E6%9C%8D%E5%8A%A1%E5%99%A8-orange?logo=Apache Tomcat&color=yellow&link=https://tomcat.apache.org/download-90.cgi&style=social&logoWidth=20"></object><br></p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Spring-%E7%89%88%E6%9C%AC:3.0.1-orange?logo=Spring&color=yellow&link=https://spring.io/projects/spring-framework&style=social&logoWidth=20"></object><br></p>              </div>            </details><details class="folding-tag" green open><summary> 创建maven工程 & 配置SpringMVC </summary>              <div class='content'>              <p>1.创建 Maven 工程(简单的一匹,不会的话自行百度~)</p><p>2.给创建好的 Maven 项目添加 web 模块</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://serms.top/post/3208ee03/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-size: 60px 60px;" style="background-image: url(https://serms.top/img/favicon.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Maven 项目添加 web 模块 </div>            <div class="tag-link-sitename"> Idea中Maven项目添加web 模块</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>3.配置<kbd>pom.xml</kbd>文件打包方式：war 和引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置打包方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写好的 pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hgm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springMVC-demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tip warning"><p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/img001.png" alt=""></p></div><p>4.配置 web.xml</p><p>注册 SpringMVC 的前端控制器 DispatcherServlet</p><p>打开 web.xml</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.9/Spring/image-20220403225805963.png" alt=""></p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">默认配置方式</button><button type="button" class="tab " data-href="-2">扩展配置方式</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>此配置作用下，SpringMVC 的配置文件默认位于 WEB-INF 下，默认名称为\<servlet-name>-servlet.xml，例如，以下配置所对应 SpringMVC 的配置文件位于 WEB-INF 下，文件名为 springMVC-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tip warning"><p>注：</p><p>\<url-pattern>标签中使用/和/*的区别：</p><p>/所匹配的请求可以是/login 或.html 或.js 或.css 方式的请求路径，但是/不能匹配.jsp 请求路径的请求</p><p>因此就可以避免在访问 jsp 页面时，该请求被 DispatcherServlet 处理，从而找不到相应的页面</p><p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/*的写法</p></div></div><div class="tab-item-content" id="-2"><p><strong>可通过 init-param 标签设置 SpringMVC 配置文件的位置和名称，通过 load-on-startup 标签设置 SpringMVC 前端控制器 DispatcherServlet 的初始化时间</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tip warning"><p>注：</p><p><code>&lt;url-pattern&gt;</code>标签中使用/和/*的区别：</p><p>/所匹配的请求可以是/login 或.html 或.js 或.css 方式的请求路径，但是/不能匹配.jsp 请求路径的请求</p><p>因此就可以避免在访问 jsp 页面时，该请求被 DispatcherServlet 处理，从而找不到相应的页面</p><p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/*的写法</p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><p>配置好的 web.xml 为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置SpringMVC的前端控制器,对浏览器发送的请求进行统一处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--初始化参数 配置SpringMVC配置文件的位置和名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将前端控制器DispatcherServlet的初始化时间提前到服务器启动时--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.创建 springMVC 的配置文件</p><blockquote><p>在<wavy>resources</wavy>文件夹下创建名为 : <wavy>springMVC.xml</wavy>文件</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.10/Spring/image-20220403230416170.png" alt=""></p><p>写入一下配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  这里引入可能会报错,可以先删掉,后续将会讲解此处的作用</span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写好的 springMVC.xml 为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描组件 自动扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置视图解析器优先级--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--视图解析器编码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--视图解析器模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--内部Bean给templateEngine赋值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--内部Bean给templateResolver赋值--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>6.创建请求控制器</p><blockquote><p>创建一个控制类(HelloController)并声明控制层注解@Controller</p></blockquote><p><img src="https://npm.elemecdn.com/serms-assets@1.0.9/Spring/image-20220403230247900.png" alt=""></p><blockquote><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为 SpringMVC 的控制器由一个 POJO（普通的 Java 类）担任，因此需要通过@Controller 注解将其标识为一个控制层组件，交给 Spring 的 IoC 容器管理，此时 SpringMVC 才能够识别控制器的存在</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/3/30 11:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//控制器类 扫描控制层组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green open><summary> 测试HelloWorld </summary>              <div class='content'>              <p>在 WEB-INF 资源文件夹下面创建<wavy>templates</wavy>文件夹.并在此文件夹下创建<wavy>index.html</wavy>文件</p><div class="tip warning"><p>注:</p><p>因我们在<wavy>Thymeleaf视图解析器</wavy>中已经配置了<wavy>视图前缀</wavy>的 value 值为:value=”/WEB-INF/templates/“所以我们必须把静态文件创建在 WEB-INF 下的 templates 文件夹</p></div><p><img src="https://npm.elemecdn.com/serms-assets@1.0.9/Spring/image-20220403231346495.png" alt=""></p><p>创建好之后在 index.html 写入代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">实现对首页的访问</button><button type="button" class="tab " data-href="-2">通过超链接跳转到指定页面</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>在请求控制器(HelloController.java)中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完之后的整个文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/3/30 11:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//控制器类 扫描控制层组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RequestMapping注解==&gt;请求映射</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//返回视图名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 Tomcat 即可看到页面呈现 首页 字样</p></div><div class="tab-item-content" id="-2"><p>1.在主页 index.html 中设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在 templates 下创建第二个 html 页面名为 target</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.9/Spring/image-20220403233628709.png" alt=""></p><p>在里面写入:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    HelloWorld</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完后的控制层文件为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/3/30 11:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//控制器类 扫描控制层组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RequestMapping注解==&gt;请求映射</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//返回视图名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/target&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toTarget</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="tip success"><p>注:</p><p>此处的超链接中用到的 th:XXX 是 thymeleaf 的模板语法,而且必须在 html 标签内引入 xmlns 地址</p><p>一般写法为: th:href=”@{值}”</p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tip home"><p>总结</p><p>浏览器发送请求，若请求地址符合前端控制器的 url-pattern，该请求就会被前端控制器 DispatcherServlet 处理。前端控制器会读取 SpringMVC 的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping 注解的 value 属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过 Thymeleaf 对视图进行渲染，最终转发到视图所对应页面</p></div>              </div>            </details><h1 id="RequestMapping-注解"><a href="#RequestMapping-注解" class="headerlink" title="@RequestMapping 注解"></a>@RequestMapping 注解</h1><h3 id="RequestMapping-注解的功能"><a href="#RequestMapping-注解的功能" class="headerlink" title="@RequestMapping 注解的功能"></a>@RequestMapping 注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping 注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="RequestMapping-注解的位置"><a href="#RequestMapping-注解的位置" class="headerlink" title="@RequestMapping 注解的位置"></a>@RequestMapping 注解的位置</h3><p>@RequestMapping 标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping 标识一个方法：设置映射请求请求路径的具体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestMapping-注解的-value-属性"><a href="#RequestMapping-注解的-value-属性" class="headerlink" title="@RequestMapping 注解的 value 属性"></a>@RequestMapping 注解的 value 属性</h3><p>@RequestMapping 注解的 value 属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping 注解的 value 属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping 注解的 value 属性必须设置，至少通过请求地址匹配请求映射</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping&lt;/a</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestMapping-注解的-method-属性"><a href="#RequestMapping-注解的-method-属性" class="headerlink" title="@RequestMapping 注解的 method 属性"></a>@RequestMapping 注解的 method 属性</h3><p>@RequestMapping 注解的 method 属性通过请求的请求方式（get 或 post）匹配请求映射</p><p>@RequestMapping 注解的 method 属性是一个 RequestMethod 类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的 value 属性，但是请求方式不满足 method 属性，则浏览器报错 405：Request method ‘POST’ not supported</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC 中提供了@RequestMapping 的派生注解</p><p>处理 get 请求的映射—&gt;@GetMapping</p><p>处理 post 请求的映射—&gt;@PostMapping</p><p>处理 put 请求的映射—&gt;@PutMapping</p><p>处理 delete 请求的映射—&gt;@DeleteMapping</p><p>2、常用的请求方式有 get，post，put，delete</p><p>但是目前浏览器只支持 get 和 post，若在 form 表单提交时，为 method 设置了其他请求方式的字符串（put 或 delete），则按照默认的请求方式 get 处理</p><p>若要发送 put 和 delete 请求，则需要通过 spring 提供的过滤器 HiddenHttpMethodFilter，在 RESTful 部分会讲到</p></blockquote><h3 id="RequestMapping-注解的-params-属性（了解）"><a href="#RequestMapping-注解的-params-属性（了解）" class="headerlink" title="@RequestMapping 注解的 params 属性（了解）"></a>@RequestMapping 注解的 params 属性（了解）</h3><p>@RequestMapping 注解的 params 属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping 注解的 params 属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带 param 请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带 param 请求参数</p><p>“param=value”：要求请求映射所匹配的请求必须携带 param 请求参数且 param=value</p><p>“param!=value”：要求请求映射所匹配的请求必须携带 param 请求参数但是 param!=value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>测试@RequestMapping的params属性--&gt;/test&lt;/a</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>若当前请求满足@RequestMapping 注解的 value 和 method 属性，但是不满足 params 属性，此时页面回报错 400：Parameter conditions “username, password!=123456” not met for actual request parameters: username={admin}, password={123456}</p></blockquote><h3 id="RequestMapping-注解的-headers-属性（了解）"><a href="#RequestMapping-注解的-headers-属性（了解）" class="headerlink" title="@RequestMapping 注解的 headers 属性（了解）"></a>@RequestMapping 注解的 headers 属性（了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testParamsAndHeders&quot;,</span></span><br><span class="line"><span class="meta">                headers = &#123;&quot;Host=localhost:8080&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParamsAndHeders</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestMapping 注解的 headers 属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping 注解的 headers 属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带 header 请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带 header 请求头信息</p><p>“header=value”：要求请求映射所匹配的请求必须携带 header 请求头信息且 header=value</p><p>“header!=value”：要求请求映射所匹配的请求必须携带 header 请求头信息且 header!=value</p><p>若当前请求满足@RequestMapping 注解的 value 和 method 属性，但是不满足 headers 属性，此时页面显示 404 错误，即资源未找到</p><h3 id="SpringMVC-支持-ant-风格的路径"><a href="#SpringMVC-支持-ant-风格的路径" class="headerlink" title="SpringMVC 支持 ant 风格的路径"></a>SpringMVC 支持 ant 风格的路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(&quot;/a?a/testAnt&quot;)</span></span><br><span class="line"><span class="comment">//    @RequestMapping(&quot;/a*a/testAnt&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/**/testAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAnt</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>？：表示任意的单个字符</p><p>*：表示任意的 0 个或多个字符</p><p>**：表示任意的一层或多层目录</p><p>注意：在使用**时，只能使用/**/xxx 的方式</p><h3 id="SpringMVC-支持路径中的占位符（重点）"><a href="#SpringMVC-支持路径中的占位符（重点）" class="headerlink" title="SpringMVC 支持路径中的占位符（重点）"></a>SpringMVC 支持路径中的占位符（重点）</h3><p>原始方式：/deleteUser?id=1</p><p>rest 方式：/deleteUser/1</p><p>SpringMVC 路径中的占位符常用于 RESTful 风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping 注解的 value 属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable 注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure><h1 id="SpringMVC-获取请求参数"><a href="#SpringMVC-获取请求参数" class="headerlink" title="SpringMVC 获取请求参数"></a>SpringMVC 获取请求参数</h1><h3 id="通过-ServletAPI-获取"><a href="#通过-ServletAPI-获取" class="headerlink" title="通过 ServletAPI 获取"></a>通过 ServletAPI 获取</h3><p>将 HttpServletRequest 作为控制器方法的形参，此时 HttpServletRequest 类型的参数表示封装了当前请求的请求报文的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过控制器方法的形参获取请求参数"><a href="#通过控制器方法的形参获取请求参数" class="headerlink" title="通过控制器方法的形参获取请求参数"></a>通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet 中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>测试获取请求参数--&gt;/testParam&lt;/a</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p>@RequestParam 是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam 注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为 true</p><p>若设置为 true 时，则当前请求必须传输 value 所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue 属性，则页面报错 400：Required String parameter ‘xxx’ is not present；若设置为 false，则当前请求不是必须传输 value 所指定的请求参数，若没有传输，则注解所标识的形参的值为 null</p><p>defaultValue：不管 required 属性值为 true 或 false，当 value 所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h3><p>@RequestHeader 是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader 注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h3><p>@CookieValue 是将 cookie 数据和控制器方法的形参创建映射关系</p><p>@CookieValue 注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testParam&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user_name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  爱好:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> /&gt;</span>a<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span> /&gt;</span>b<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span> /&gt;</span>c<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试使用控制器形参获取请求参数&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;user_name&quot;, required = false, defaultValue = &quot;hehe&quot;)</span> String username,</span></span><br><span class="line"><span class="params">        String password,</span></span><br><span class="line"><span class="params">        String[] hobby,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestHeader(value = &quot;sayHaha&quot;, required = false, defaultValue = &quot;haha&quot;)</span> String host,</span></span><br><span class="line"><span class="params">        <span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String JSESSIONID)</span> &#123;</span><br><span class="line">    <span class="comment">//若请求参数中出现多个同名的请求参数.可以在控制器方法的形参位置设置字符串类型或字符串数组接收此请求参数</span></span><br><span class="line">    <span class="comment">//若使用字符串类型的形参,最终结果为请求参数的每一个值之间使用逗号进行拼接</span></span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span> + username + <span class="string">&quot;  password: &quot;</span> + password + <span class="string">&quot; hobby: &quot;</span> + Arrays.toString(hobby));</span><br><span class="line">    System.out.println(<span class="string">&quot;hsot : &quot;</span> + host);</span><br><span class="line">    System.out.println(<span class="string">&quot;JSESSIONID : &quot;</span> + JSESSIONID);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过-POJO-获取请求参数"><a href="#通过-POJO-获取请求参数" class="headerlink" title="通过 POJO 获取请求参数"></a>通过 POJO 获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> /&gt;</span>男<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;女&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span>女<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPOJO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="解决获取请求参数的乱码问题"><a href="#解决获取请求参数的乱码问题" class="headerlink" title="解决获取请求参数的乱码问题"></a>解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用 SpringMVC 提供的编码过滤器 CharacterEncodingFilter，但是必须在 web.xml 中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>SpringMVC 中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h1 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h1><details class="folding-tag" green><summary> 新建项目:[`SpringMVC-demo3`] </summary>              <div class='content'>              <ol><li><p>首先还是先创建 webapp 目录,将 web.xml 的路径改为<code>src\main\webapp</code>下,前面有讲到就不做阐述了~</p></li><li><p>配置 web.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置请求编码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置响应编码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置spring前端控制器DispatcherServlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表示启动容器时先初始化该servlet的顺序 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>resources</code>下创建<code>springMVC.xml</code>文件,并配置 springMVC.xml,配置完后的 springMVC.xml 为:.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在:file_folder:<code>Java</code>目录下创建控制器类(TestController)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2022/4/4 21:50</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在 :file_folder:<code>WEB-INF</code> 目录下 创建 :file_folder:<code>templates</code>,并在:file_folder:templates 下创建 index.xml 文件,然后在 index.xml 下写入代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置<i class="iconfont icon-Tomcat"></i><code>Tomcat</code>查看是否可以运行~</p></li></ol>              </div>            </details><div class="tip warning"><p>注:</p><p><code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>解释:</p><pre><code>1. load-on-startup 元素标记容器是否应该在web应用程序启动的时候就加载这个servlet，(实例化并调用其init()方法)。2. 它的值必须是一个整数，表示servlet被加载的先后顺序。3. 如果该元素的值为负数或者没有设置，则容器会当Servlet被请求时再加载。4. 如果值为正整数或者0时，表示容器在应用启动时就加载并初始化这个servlet，值越小，servlet的优先级越高，就越先被加载。值相同时，容器就会自己选择顺序来加载</code></pre></div><h3 id="使用-ServletAPI-向-request-域对象共享数据"><a href="#使用-ServletAPI-向-request-域对象共享数据" class="headerlink" title="使用 ServletAPI 向 request 域对象共享数据"></a>使用 ServletAPI 向 request 域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="comment">//此处用的是请求转发</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-ModelAndView-向-request-域对象共享数据"><a href="#使用-ModelAndView-向-request-域对象共享数据" class="headerlink" title="使用 ModelAndView 向 request 域对象共享数据"></a>使用 ModelAndView 向 request 域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Model-向-request-域对象共享数据"><a href="#使用-Model-向-request-域对象共享数据" class="headerlink" title="使用 Model 向 request 域对象共享数据"></a>使用 Model 向 request 域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-map-向-request-域对象共享数据"><a href="#使用-map-向-request-域对象共享数据" class="headerlink" title="使用 map 向 request 域对象共享数据"></a>使用 map 向 request 域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-ModelMap-向-request-域对象共享数据"><a href="#使用-ModelMap-向-request-域对象共享数据" class="headerlink" title="使用 ModelMap 向 request 域对象共享数据"></a>使用 ModelMap 向 request 域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Model、ModelMap、Map-的关系"><a href="#Model、ModelMap、Map-的关系" class="headerlink" title="Model、ModelMap、Map 的关系"></a>Model、ModelMap、Map 的关系</h3><p>Model、ModelMap、Map 类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Model&#123;&#125;</span><br><span class="line">public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;</span><br><span class="line">public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;</span><br><span class="line">public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="向-session-域共享数据"><a href="#向-session-域共享数据" class="headerlink" title="向 session 域共享数据"></a>向 session 域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="向-application-域共享数据"><a href="#向-application-域共享数据" class="headerlink" title="向 application 域共享数据"></a>向 application 域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" cyan><summary> 全部代码: </summary>              <div class='content'>              <div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">ScopeController.java</button><button type="button" class="tab " data-href="-2">index.html</button><button type="button" class="tab " data-href="-3">success.html</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/4 22:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScopeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 使用ServletAPI向request域对象共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestByServletAPI&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestByServletAPI</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 使用 ModelAndView 向 request 域对象共享数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两个功能</span></span><br><span class="line"><span class="comment">     * 1.Model向request域对象共享数据</span></span><br><span class="line"><span class="comment">     * 2.设置视图名称</span></span><br><span class="line"><span class="comment">     * 注意:</span></span><br><span class="line"><span class="comment">     * 使用ModelAndView向request域对象共享数据时,返回值必须是ModelAndView,</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//处理模型数据,即向请求域request共享数据</span></span><br><span class="line">        mav.addObject(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;hello,ModelAdnView&quot;</span>);</span><br><span class="line">        <span class="comment">//设置视图名称</span></span><br><span class="line">        mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用 Model 向 request 域对象共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;hello,model&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用 ModelMap 向 request 域对象共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        map.put(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;hello,map&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用 ModelMap 向 request 域对象共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span> &#123;</span><br><span class="line">        modelMap.addAttribute(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;hello,testModelMap&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向 session 域共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,Session&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向 application 域共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,testApplication&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestByServletAPI&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>通过ServletAPI向Request域对象共享数据&lt;/a</span><br><span class="line">    &gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testModelAndView&#125;&quot;</span>&gt;</span>通过ModelAndView向Request域对象共享数据&lt;/a</span><br><span class="line">    &gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testModel&#125;&quot;</span>&gt;</span>通过model向Request域对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testMap&#125;&quot;</span>&gt;</span>通过map集合向Request域对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testModelMap&#125;&quot;</span>&gt;</span>通过ModelMap集合向Request域对象共享数据&lt;/a</span><br><span class="line">    &gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testSession&#125;&quot;</span>&gt;</span>通过ServletAPI向Session域对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testApplication&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>通过ServletAPI向Application域对象共享数据&lt;/a</span><br><span class="line">    &gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>success<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;p th:text=&quot;$&#123;testRequestScope&#125;&quot;&gt;&lt;/p&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getAttribute(&#x27;testRequestScope&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.testSessionScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;application.testApplicationScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><h1 id="SpringMVC-的视图"><a href="#SpringMVC-的视图" class="headerlink" title="SpringMVC 的视图"></a>SpringMVC 的视图</h1><p>SpringMVC 中的视图是 View 接口，视图的作用渲染数据，将模型 Model 中的数据展示给用户</p><p>SpringMVC 视图的种类很多，默认有转发视图(InternalResourceView)和重定向视图(RedirectView)</p><p>当工程引入 jstl 的依赖，转发视图会自动转换为 JstlView</p><p>若使用的视图技术为 Thymeleaf，在 SpringMVC 的配置文件中配置了 Thymeleaf 的视图解析器，由此视图解析器解析之后所得到的是 ThymeleafView</p><h3 id="ThymeleafView"><a href="#ThymeleafView" class="headerlink" title="ThymeleafView"></a>ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被 SpringMVC 配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/img002.png" alt=""></p><h3 id="转发视图"><a href="#转发视图" class="headerlink" title="转发视图"></a>转发视图</h3><p>SpringMVC 中默认的转发视图是 InternalResourceView</p><p>SpringMVC 中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建 InternalResourceView 视图，此时的视图名称不会被 SpringMVC 配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:/“，”forward:/employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/img003.png" alt=""></p><h3 id="重定向视图"><a href="#重定向视图" class="headerlink" title="重定向视图"></a>重定向视图</h3><p>SpringMVC 中默认的重定向视图是 RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建 RedirectView 视图，此时的视图名称不会被 SpringMVC 配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:/“，”redirect:/employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/img004.png" alt=""></p><blockquote><p>注：</p><p>重定向视图在解析时，会先将 redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p></blockquote><h3 id="视图控制器-view-controller"><a href="#视图控制器-view-controller" class="headerlink" title="视图控制器 view-controller"></a>视图控制器 view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用 view-controller 标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>当 SpringMVC 中设置任何一个 view-controller 时，其他控制器中的请求映射将全部失效，此时需要在 SpringMVC 的核心配置文件中设置开启 mvc 注解驱动的标签：</p><mvc:annotation-driven /></blockquote><h3 id="JSP-视图"><a href="#JSP-视图" class="headerlink" title="JSP 视图"></a>JSP 视图</h3><p>直接上代码:</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">JspController.java</button><button type="button" class="tab " data-href="-2">index.html</button><button type="button" class="tab " data-href="-3">success.html</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/5 23:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JspController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- Created by IntelliJ IDEA. User: 18399 Date: 2022/4/5 Time: 23:44 To change</span><br><span class="line">this template use File | Settings | File Templates. --%&gt; &lt;%@ page</span><br><span class="line">contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/success&quot;</span>&gt;</span>success.js<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- Created by IntelliJ IDEA. User: 18399 Date: 2022/4/5 Time: 23:49 To change</span><br><span class="line">this template use File | Settings | File Templates. --%&gt; &lt;%@ page</span><br><span class="line">contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><h3 id="RESTful-简介"><a href="#RESTful-简介" class="headerlink" title="RESTful 简介"></a>RESTful 简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个 URI 来标识。URI 既是资源的名称，也是资源在 Web 上的地址。对某个资源感兴趣的客户端应用，可以通过资源的 URI 与其进行交互。</p><h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如 HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><h3 id="RESTful-的实现"><a href="#RESTful-的实现" class="headerlink" title="RESTful 的实现"></a>RESTful 的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><div class="table-container"><table><thead><tr><th>操作</th><th>传统方式</th><th>REST 风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id=1</td><td>user/1—&gt;get 请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user—&gt;post 请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id=1</td><td>user/1—&gt;delete 请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user—&gt;put 请求方式</td></tr></tbody></table></div><h3 id="HiddenHttpMethodFilter"><a href="#HiddenHttpMethodFilter" class="headerlink" title="HiddenHttpMethodFilter"></a>HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送 get 和 post 方式的请求，那么该如何发送 put 和 delete 请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理 put 和 delete 请求的条件：</p><p>a&gt;当前请求的请求方式必须为 post</p><p>b&gt;当前请求必须传输请求参数_method</p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method 的值，因此请求参数_method 的值才是最终的请求方式</p><p>在 web.xml 中注册<strong>HiddenHttpMethodFilter</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>目前为止，SpringMVC 中提供了两个过滤器：CharacterEncodingFilter 和 HiddenHttpMethodFilter</p><p>在 web.xml 中注册时，必须先注册 CharacterEncodingFilter，再注册 HiddenHttpMethodFilter</p><p>原因：</p><ul><li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p></li><li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></li><li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li><li><p>```<br>String paramValue = request.getParameter(this.methodParam);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># RESTful 案例</span><br><span class="line"></span><br><span class="line">### 准备工作</span><br><span class="line"></span><br><span class="line">和传统 CRUD 一样，实现对员工信息的增删改查。</span><br><span class="line"></span><br><span class="line">- 搭建环境</span><br><span class="line"></span><br><span class="line">- 准备实体类</span><br><span class="line"></span><br><span class="line"> ```java</span><br><span class="line"> package com.atguigu.mvc.bean;</span><br><span class="line"></span><br><span class="line"> public class Employee &#123;</span><br><span class="line"></span><br><span class="line">    private Integer id;</span><br><span class="line">    private String lastName;</span><br><span class="line"></span><br><span class="line">    private String email;</span><br><span class="line">    //1 male, 0 female</span><br><span class="line">    private Integer gender;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">       return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">       this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLastName() &#123;</span><br><span class="line">       return lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLastName(String lastName) &#123;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">       return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">       this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getGender() &#123;</span><br><span class="line">       return gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGender(Integer gender) &#123;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Employee(Integer id, String lastName, String email, Integer gender) &#123;</span><br><span class="line">       super();</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">       this.email = email;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Employee() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>准备 dao 模拟数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">      employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">      employees.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">         employee.setId(initId++);</span><br><span class="line">      &#125;</span><br><span class="line">      employees.put(employee.getId(), employee);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.values();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.get(id);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">      employees.remove(id);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="功能清单"><a href="#功能清单" class="headerlink" title="功能清单"></a>功能清单</h3><div class="table-container"><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页 √</td><td>/</td><td>GET</td></tr><tr><td>查询全部数据 √</td><td>/employee</td><td>GET</td></tr><tr><td>删除 √</td><td>/employee/2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面 √</td><td>/toAdd</td><td>GET</td></tr><tr><td>执行保存 √</td><td>/employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面 √</td><td>/employee/2</td><td>GET</td></tr><tr><td>执行更新 √</td><td>/employee</td><td>PUT</td></tr></tbody></table></div><h3 id="具体功能：访问首页"><a href="#具体功能：访问首页" class="headerlink" title="具体功能：访问首页"></a>具体功能：访问首页</h3><h5 id="a-gt-配置-view-controller"><a href="#a-gt-配置-view-controller" class="headerlink" title="a&gt;配置 view-controller"></a>a&gt;配置 view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具体功能：查询所有员工数据"><a href="#具体功能：查询所有员工数据" class="headerlink" title="具体功能：查询所有员工数据"></a>具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-gt-创建-employee-list-html"><a href="#b-gt-创建-employee-list-html" class="headerlink" title="b&gt;创建 employee_list.html"></a>b&gt;创建 employee_list.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span></span></span><br><span class="line"><span class="tag">      <span class="attr">border</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span>delete&lt;/a</span><br><span class="line">          &gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具体功能：删除"><a href="#具体功能：删除" class="headerlink" title="具体功能：删除"></a>具体功能：删除</h3><h5 id="a-gt-创建处理-delete-请求方式的表单"><a href="#a-gt-创建处理-delete-请求方式的表单" class="headerlink" title="a&gt;创建处理 delete 请求方式的表单"></a>a&gt;创建处理 delete 请求方式的表单</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入 vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>delete&lt;/a</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>通过 vue 处理点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">deleteEmployee</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> delete_form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="language-javascript">        delete_form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="language-javascript">        delete_form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="language-javascript">        event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体功能：跳转到添加数据页面"><a href="#具体功能：跳转到添加数据页面" class="headerlink" title="具体功能：跳转到添加数据页面"></a>具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置-view-controller-1"><a href="#a-gt-配置-view-controller-1" class="headerlink" title="a&gt;配置 view-controller"></a>a&gt;配置 view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-gt-创建-employee-add-html"><a href="#b-gt-创建-employee-add-html" class="headerlink" title="b&gt;创建 employee_add.html"></a>b&gt;创建 employee_add.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span>male</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span>female<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具体功能：执行保存"><a href="#具体功能：执行保存" class="headerlink" title="具体功能：执行保存"></a>具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体功能：跳转到更新数据页面"><a href="#具体功能：跳转到更新数据页面" class="headerlink" title="具体功能：跳转到更新数据页面"></a>具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-gt-创建-employee-update-html"><a href="#c-gt-创建-employee-update-html" class="headerlink" title="c&gt;创建 employee_update.html"></a>c&gt;创建 employee_update.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span> /&gt;</span></span><br><span class="line">      lastName:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      email:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;email&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">      gender:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span>male</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span>female<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具体功能：执行更新"><a href="#具体功能：执行更新" class="headerlink" title="具体功能：执行更新"></a>具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为 Java 对象，或将 Java 对象转换为响应报文</p><p>HttpMessageConverter 提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p><p>ResponseEntity</p><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>@RequestBody 可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody 进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>requestBody:username=admin&amp;password=123456</p><h3 id="RequestEntity"><a href="#RequestEntity" class="headerlink" title="RequestEntity"></a>RequestEntity</h3><p>RequestEntity 封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过 getHeaders()获取请求头信息，通过 getBody()获取请求体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age=0”, sec-ch-ua:”” Not A;Brand”;v=”99”, “Chromium”;v=”90”, “Google Chrome”;v=”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080">http://localhost:8080</a>“, user-agent:”Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36”]<br>requestBody:username=admin&amp;password=123</p><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>@ResponseBody 用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：浏览器页面显示 success</p><h3 id="SpringMVC-处理-json"><a href="#SpringMVC-处理-json" class="headerlink" title="SpringMVC 处理 json"></a>SpringMVC 处理 json</h3><p>@ResponseBody 处理 json 的步骤：</p><p>a&gt;导入 jackson 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b&gt;在 SpringMVC 的核心配置文件中开启 mvc 的注解驱动，此时在 HandlerAdaptor 中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的 Java 对象转换为 Json 格式的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure><p>c&gt;在处理器方法上使用@ResponseBody 注解进行标识</p><p>d&gt;将 Java 对象直接作为控制器方法的返回值返回，就会自动转换为 Json 格式的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器的页面中展示的结果：</p><p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p><h3 id="SpringMVC-处理-ajax"><a href="#SpringMVC-处理-ajax" class="headerlink" title="SpringMVC 处理 ajax"></a>SpringMVC 处理 ajax</h3><p>a&gt;请求超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b&gt;通过 vue 和 axios 处理点击事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">testAjax</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>: event.<span class="property">target</span>.<span class="property">href</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">params</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>: <span class="string">&quot;123456&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAjax</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,ajax&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RestController-注解"><a href="#RestController-注解" class="headerlink" title="@RestController 注解"></a>@RestController 注解</h3><p>@RestController 注解是 springMVC 提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller 注解，并且为其中的每个方法添加了@ResponseBody 注解</p><h3 id="ResponseEntity"><a href="#ResponseEntity" class="headerlink" title="ResponseEntity"></a>ResponseEntity</h3><p>ResponseEntity 用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h1 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h1><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>使用 ResponseEntity 实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传要求 form 表单的请求方式必须为 post，并且添加属性 enctype=”multipart/form-data”</p><p>SpringMVC 中将上传的文件封装到 MultipartFile 对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>a&gt;添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b&gt;在 SpringMVC 的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hzName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h3 id="拦截器的配置"><a href="#拦截器的配置" class="headerlink" title="拦截器的配置"></a>拦截器的配置</h3><p>SpringMVC 中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC 中的拦截器需要实现 HandlerInterceptor</p><p>SpringMVC 的拦截器必须在 SpringMVC 的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="拦截器的三个抽象方法"><a href="#拦截器的三个抽象方法" class="headerlink" title="拦截器的三个抽象方法"></a>拦截器的三个抽象方法</h3><p>SpringMVC 中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行 preHandle()，其 boolean 类型的返回值表示是否拦截或放行，返回 true 为放行，即调用控制器方法；返回 false 表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行 postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行 afterComplation()</p><h3 id="多个拦截器的执行顺序"><a href="#多个拦截器的执行顺序" class="headerlink" title="多个拦截器的执行顺序"></a>多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的 preHandle()都返回 true</p><p>此时多个拦截器的执行顺序和拦截器在 SpringMVC 的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而 postHandle()和 afterComplation()会按照配置的反序执行</p><p>b&gt;若某个拦截器的 preHandle()返回了 false</p><p>preHandle()返回 false 和它之前的拦截器的 preHandle()都会执行，postHandle()都不执行，返回 false 的拦截器之前的拦截器的 afterComplation()会执行</p><h1 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h1><h3 id="基于配置的异常处理"><a href="#基于配置的异常处理" class="headerlink" title="基于配置的异常处理"></a>基于配置的异常处理</h3><p>SpringMVC 提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver 接口的实现类有：DefaultHandlerExceptionResolver 和 SimpleMappingExceptionResolver</p><p>SpringMVC 提供了自定义的异常处理器 SimpleMappingExceptionResolver，使用方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于注解的异常处理"><a href="#基于注解的异常处理" class="headerlink" title="基于注解的异常处理"></a>基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注解配置-SpringMVC"><a href="#注解配置-SpringMVC" class="headerlink" title="注解配置 SpringMVC"></a>注解配置 SpringMVC</h1><p>使用配置类和注解代替 web.xml 和 SpringMVC 配置文件的功能</p><h3 id="创建初始化类，代替-web-xml"><a href="#创建初始化类，代替-web-xml" class="headerlink" title="创建初始化类，代替 web.xml"></a>创建初始化类，代替 web.xml</h3><p>在 Servlet3.0 环境中，容器会在类路径中查找实现 javax.servlet.ServletContainerInitializer 接口的类，如果找到的话就用它来配置 Servlet 容器。<br>Spring 提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现 WebApplicationInitializer 的类并将配置的任务交给它们来完成。Spring3.2 引入了一个便利的 WebApplicationInitializer 基础实现，名为 AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer 并将其部署到 Servlet3.0 容器的时候，容器会自动发现它，并用它来配置 Servlet 上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-SpringConfig-配置类，代替-spring-的配置文件"><a href="#创建-SpringConfig-配置类，代替-spring-的配置文件" class="headerlink" title="创建 SpringConfig 配置类，代替 spring 的配置文件"></a>创建 SpringConfig 配置类，代替 spring 的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"><span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-WebConfig-配置类，代替-SpringMVC-的配置文件"><a href="#创建-WebConfig-配置类，代替-SpringMVC-的配置文件" class="headerlink" title="创建 WebConfig 配置类，代替 SpringMVC 的配置文件"></a>创建 WebConfig 配置类，代替 SpringMVC 的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringMVC-执行流程"><a href="#SpringMVC-执行流程" class="headerlink" title="SpringMVC 执行流程"></a>SpringMVC 执行流程</h1><h3 id="SpringMVC-常用组件"><a href="#SpringMVC-常用组件" class="headerlink" title="SpringMVC 常用组件"></a>SpringMVC 常用组件</h3><ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：根据请求的 url、method 等信息查找 Handler，即控制器方法</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul><p>作用：在 DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：通过 HandlerAdapter 对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h3 id="DispatcherServlet-初始化过程"><a href="#DispatcherServlet-初始化过程" class="headerlink" title="DispatcherServlet 初始化过程"></a>DispatcherServlet 初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/img005.png" alt=""></p><h5 id="a-gt-初始化-WebApplicationContext"><a href="#a-gt-初始化-WebApplicationContext" class="headerlink" title="a&gt;初始化 WebApplicationContext"></a>a&gt;初始化 WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-gt-创建-WebApplicationContext"><a href="#b-gt-创建-WebApplicationContext" class="headerlink" title="b&gt;创建 WebApplicationContext"></a>b&gt;创建 WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span></span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-gt-DispatcherServlet-初始化策略"><a href="#c-gt-DispatcherServlet-初始化策略" class="headerlink" title="c&gt;DispatcherServlet 初始化策略"></a>c&gt;DispatcherServlet 初始化策略</h5><p>FrameworkServlet 创建 WebApplicationContext 后，刷新容器，调用 onRefresh(wac)，此方法在 DispatcherServlet 中进行了重写，调用了 initStrategies(context)方法，初始化策略，即初始化 DispatcherServlet 的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initStrategies</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DispatcherServlet-调用组件处理请求"><a href="#DispatcherServlet-调用组件处理请求" class="headerlink" title="DispatcherServlet 调用组件处理请求"></a>DispatcherServlet 调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet 重写 HttpServlet 中的 service()和 doXxx()，这些方法中调用了 processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">failureCause</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> <span class="title class_">RequestBindingInterceptor</span>());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.flashMapManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">FlashMap</span> <span class="variable">inputFlashMap</span> <span class="operator">=</span> <span class="built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> <span class="title class_">FlashMap</span>());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="built_in">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestPath</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           <span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> (mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC-的执行流程"><a href="#SpringMVC-的执行流程" class="headerlink" title="SpringMVC 的执行流程"></a>SpringMVC 的执行流程</h3><ol><li><p>用户向服务器发送请求，请求被 SpringMVC 前端控制器 DispatcherServlet 捕获。</p></li><li><p>DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI），判断请求 URI 对应的映射：</p></li></ol><p>a) 不存在</p><p>i. 再判断是否配置了 mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示 404 错误</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/img006.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/img007.png" alt=""></p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示 404 错误</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/img008.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/img009.png" alt=""></p><p>b) 存在则执行下面的流程</p><ol><li><p>根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 执行链对象的形式返回。</p></li><li><p>DispatcherServlet 根据获得的 Handler，选择一个合适的 HandlerAdapter。</p></li><li><p>如果成功获得 HandlerAdapter，此时将开始执行拦截器的 preHandler(…)方法【正向】</p></li><li><p>提取 Request 中的模型数据，填充 Handler 入参，开始执行 Handler（Controller)方法，处理请求。在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：</p></li></ol><p>a) HttpMessageConveter： 将请求消息（如 Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如 String 转换成 Integer、Double 等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中</p><ol><li><p>Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象。</p></li><li><p>此时将开始执行拦截器的 postHandle(…)方法【逆向】。</p></li><li><p>根据返回的 ModelAndView（此时会判断是否存在异常：如果存在异常，则执行 HandlerExceptionResolver 进行异常处理）选择一个适合的 ViewResolver 进行视图解析，根据 Model 和 View，来渲染视图。</p></li><li><p>渲染视图完毕执行拦截器的 afterCompletion(…)方法【逆向】。</p></li><li><p>将渲染结果返回给客户端。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis注解开发</title>
      <link href="/posts/6e9321d6.html"/>
      <url>/posts/6e9321d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="mybatis-的常用注解"><a href="#mybatis-的常用注解" class="headerlink" title="mybatis 的常用注解"></a>mybatis 的常用注解</h2><div class="table-container"><table><thead><tr><th style="text-align:center">注解</th><th style="text-align:center">说明<br/></th></tr></thead><tbody><tr><td style="text-align:center">@Insert</td><td style="text-align:center">实现新增<br/></td></tr><tr><td style="text-align:center">@Delete</td><td style="text-align:center">实现删除<br/></td></tr><tr><td style="text-align:center">@Update</td><td style="text-align:center">实现更新<br/></td></tr><tr><td style="text-align:center">@Select</td><td style="text-align:center">实现查询<br/></td></tr><tr><td style="text-align:center">@Result</td><td style="text-align:center">实现结果集封装<br/></td></tr><tr><td style="text-align:center">@Results</td><td style="text-align:center">可以与@Result 一起使用，封装多个结果集<br/></td></tr><tr><td style="text-align:center">@ResultMap</td><td style="text-align:center">实现引用@Results 定义的封装<br/></td></tr><tr><td style="text-align:center">@One</td><td style="text-align:center">实现一对一结果集封装<br/></td></tr><tr><td style="text-align:center">@Many</td><td style="text-align:center">实现一对多结果集封装<br/></td></tr><tr><td style="text-align:center">@SelectProvider</td><td style="text-align:center">实现动态 SQL 映射<br/></td></tr><tr><td style="text-align:center">@CacheNamespace</td><td style="text-align:center">实现注解二级缓存的使用<br/></td></tr></tbody></table></div><hr><h2 id="使用-Mybatis-注解实现基本-CRUD"><a href="#使用-Mybatis-注解实现基本-CRUD" class="headerlink" title="使用 Mybatis 注解实现基本 CRUD"></a>使用 Mybatis 注解实现基本 CRUD</h2><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><p><img src="https://img-blog.csdnimg.cn/20210217022346823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h3><p><strong>User：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: User实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022-02-16 20:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(Date birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用注解方式开发持久层接口"><a href="#使用注解方式开发持久层接口" class="headerlink" title="使用注解方式开发持久层接口"></a>使用注解方式开发持久层接口</h3><p><strong>IUserDao：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: IUserDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022-02-16 20:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在mybatis中针对CRUD一共有四个注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Select</span> <span class="doctag">@Insert</span> <span class="doctag">@Update</span> <span class="doctag">@Delete</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(username,address,sex,birthday)values(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Integer userId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer userId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名称模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Select(&quot;select * from user where username like #&#123;username&#125;&quot;) //占位符</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username like &#x27;%$&#123;value&#125;%&#x27;&quot;)</span>  <span class="comment">//字符串拼接</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByName</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(*) from user&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">findTotal</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>通过注解方式，就不需要再去编写 UserDao.xml 映射文件了。</p></div><h3 id="编写-SqlMapConfig-xml-配置文件"><a href="#编写-SqlMapConfig-xml-配置文件" class="headerlink" title="编写 SqlMapConfig.xml 配置文件"></a>编写 SqlMapConfig.xml 配置文件</h3><p><strong>SqlMapConfig.xml：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbcConfig.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.keafmd.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定带有注解的dao接口所在位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.keafmd.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><p><strong>AnnotationCRUDTest：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.keafmd.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AnnotationCRUDTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 注解开发CRUD测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022-02-16 21:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationCRUDTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;mybatis annotation&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">55</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;mybatis annotation&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">54</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindOne</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.findById(<span class="number">55</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = userDao.findByName(&quot;%Keafmd%&quot;);</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findByName(<span class="string">&quot;Keafmd&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindTotal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> userDao.findTotal();</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用注解实现复杂关系映射开发"><a href="#使用注解实现复杂关系映射开发" class="headerlink" title="使用注解实现复杂关系映射开发"></a>使用注解实现复杂关系映射开发</h3><div class="tip "><p>实现复杂关系映射之前我们可以在映射文件中通过配置<code>&lt;resultMap&gt;</code>来实现，在使用注解开发时我们需要借助@Results 注解，@Result 注解，@One 注解，@Many 注解。</p></div><h3 id="复杂关系映射的注解说明"><a href="#复杂关系映射的注解说明" class="headerlink" title="复杂关系映射的注解说明"></a>复杂关系映射的注解说明</h3><blockquote><p><strong>@Results 注解<br>代替的是标签<code>&lt;resultMap&gt;</code><br>该注解中可以使用单个@Result 注解，也可以使用@Result 集合<br>@Results（{@Result（），@Result（）}）或@Results（@Result（））</strong></p><p><strong>@Resutl 注解<br>代替了<code>&lt;id&gt;</code> 标签和<code>&lt;result&gt;</code>标签<br>@Result 中的属性介绍：</strong></p></blockquote><div class="table-container"><table><thead><tr><th>@Result 中的属性</th><th>介绍</th></tr></thead><tbody><tr><td>id</td><td>是否是主键字段</td></tr><tr><td>column</td><td>数据库的列名</td></tr><tr><td>property</td><td>需要装配的属性名</td></tr><tr><td>one</td><td>需要使用的@One 注解（@Result（one=@One）（）））</td></tr><tr><td>many</td><td>需要使用的@Many 注解（@Result（many=@many）（）））</td></tr></tbody></table></div><blockquote><p>@One 注解（一对一）<br>代替了<assocation>标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。<br>@One 注解属性介绍：<br>select 指定用来多表查询的 sqlmapper<br>fetchType 会覆盖全局的配置参数 lazyLoadingEnabled。<br>使用格式：@Result(column=” “,property=””,one=@One(select=””))</p><p>@Many 注解（多对一）<br>代替了<collection>标签,是是多表查询的关键，在注解中用来指定子查询返回对象集合。<br>注意：聚集元素用来处理“一对多”的关系。需要指定映射的 Java 实体类的属性，属性的 javaType（一般为 ArrayList）但是注解中可以不定义。<br>使用格式：@Result(property=””,column=””,many=@Many(select=””))</p></blockquote><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p><img src="https://img-blog.csdnimg.cn/20210217024602241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="使用注解实现一对一复杂关系映射及立即加载"><a href="#使用注解实现一对一复杂关系映射及立即加载" class="headerlink" title="使用注解实现一对一复杂关系映射及立即加载"></a>使用注解实现一对一复杂关系映射及立即加载</h2><div class="tip "><p><strong>需求：加载账户信息时并且加载该账户的用户信息，根据情况可实现立即加载。（注解方式实现）</strong></p></div><h3 id="添加-User-实体类及-Account-实体类"><a href="#添加-User-实体类及-Account-实体类" class="headerlink" title="添加 User 实体类及 Account 实体类"></a>添加 User 实体类及 Account 实体类</h3><p><strong>User：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: User实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022-02-16 20:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserAddress</span><span class="params">(String userAddress)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userAddress = userAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userSex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserSex</span><span class="params">(String userSex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userSex = userSex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getUserBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userBirthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserBirthday</span><span class="params">(Date userBirthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userBirthday = userBirthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;userId=&quot;</span> + userId +</span><br><span class="line">            <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, userAddress=&#x27;&quot;</span> + userAddress + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, userSex=&#x27;&quot;</span> + userSex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, userBirthday=&quot;</span> + userBirthday +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Account：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Account</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 账户实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022-02-16 22:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对一（mybatis中称之为一对一）的映射，一个账户只能属于一个用户 *</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getUid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(Double money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, uid=&quot;</span> + uid +</span><br><span class="line">            <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加账户的持久层接口并使用注解配置"><a href="#添加账户的持久层接口并使用注解配置" class="headerlink" title="添加账户的持久层接口并使用注解配置"></a>添加账户的持久层接口并使用注解配置</h3><p><strong>IAccountDao：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.One;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.FetchType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: IAccountDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021-02-16 22:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IAccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，并且获取每个账户下的用户信息,一对一</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from account&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id=&quot;accountMap&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true,column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;uid&quot;,property = &quot;uid&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;money&quot;,property = &quot;money&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;user&quot;,column = &quot;uid&quot;,one=@One(select=&quot;com.keafmd.dao.IUserDao.findById&quot;,fetchType= FetchType.EAGER))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加用户的持久层接口并使用注解配置"><a href="#添加用户的持久层接口并使用注解配置" class="headerlink" title="添加用户的持久层接口并使用注解配置"></a>添加用户的持久层接口并使用注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.FetchType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: IUserDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022-02-16 20:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在mybatis中针对CRUD一共有四个注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Select</span> <span class="doctag">@Insert</span> <span class="doctag">@Update</span> <span class="doctag">@Delete</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id=&quot;userMap&quot;,value=&#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true,column = &quot;id&quot;,property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;id&quot;,property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;username&quot;,property = &quot;userName&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;sex&quot;,property = &quot;userSex&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;birthday&quot;,property = &quot;userBirthday&quot;)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@ResultMap(value=&#123;&quot;userMap&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResultMap(&quot;userMap&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer userId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名称模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username like #&#123;username&#125;&quot;)</span> <span class="comment">//占位符</span></span><br><span class="line">    <span class="meta">@ResultMap(&quot;userMap&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByName</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试一对一关联及立即加载"><a href="#测试一对一关联及立即加载" class="headerlink" title="测试一对一关联及立即加载"></a>测试一对一关联及立即加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.keafmd.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.keafmd.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AnnotationCRUDTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 注解开发CRUD测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022-02-16 21:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        accountDao = session.getMapper(IAccountDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----每个账户信息-----&quot;</span>);</span><br><span class="line">            System.out.println(account);</span><br><span class="line">            System.out.println(account.getUser());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">2021-02-17 03:04:39,939 163    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Opening JDBC Connection</span><br><span class="line">2021-02-17 03:04:40,190 414    [           main] DEBUG source.pooled.PooledDataSource  - Created connection 1176735295.</span><br><span class="line">2021-02-17 03:04:40,190 414    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@46238e3f]</span><br><span class="line">2021-02-17 03:04:40,195 419    [           main] DEBUG keafmd.dao.IAccountDao.findAll  - ==&gt;  Preparing: select * from account</span><br><span class="line">2021-02-17 03:04:40,226 450    [           main] DEBUG keafmd.dao.IAccountDao.findAll  - ==&gt; Parameters:</span><br><span class="line">2021-02-17 03:04:40,267 491    [           main] DEBUG m.keafmd.dao.IUserDao.findById  - ====&gt;  Preparing: select * from user where id=?</span><br><span class="line">2021-02-17 03:04:40,268 492    [           main] DEBUG m.keafmd.dao.IUserDao.findById  - ====&gt; Parameters: 41(Integer)</span><br><span class="line">2021-02-17 03:04:40,270 494    [           main] DEBUG m.keafmd.dao.IUserDao.findById  - &lt;====      Total: 1</span><br><span class="line">2021-02-17 03:04:40,271 495    [           main] DEBUG m.keafmd.dao.IUserDao.findById  - ====&gt;  Preparing: select * from user where id=?</span><br><span class="line">2021-02-17 03:04:40,271 495    [           main] DEBUG m.keafmd.dao.IUserDao.findById  - ====&gt; Parameters: 45(Integer)</span><br><span class="line">2021-02-17 03:04:40,272 496    [           main] DEBUG m.keafmd.dao.IUserDao.findById  - &lt;====      Total: 1</span><br><span class="line">2021-02-17 03:04:40,273 497    [           main] DEBUG keafmd.dao.IAccountDao.findAll  - &lt;==      Total: 3</span><br><span class="line">-----每个账户信息-----</span><br><span class="line">Account&#123;id=1, uid=41, money=1000.0&#125;</span><br><span class="line">User&#123;userId=41, userName=&#x27;update user clear cache&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Tue Feb 27 17:47:08 CST 2018&#125;</span><br><span class="line">-----每个账户信息-----</span><br><span class="line">Account&#123;id=2, uid=45, money=1000.0&#125;</span><br><span class="line">User&#123;userId=45, userName=&#x27;新一&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Sun Mar 04 12:04:06 CST 2018&#125;</span><br><span class="line">-----每个账户信息-----</span><br><span class="line">Account&#123;id=3, uid=41, money=2000.0&#125;</span><br><span class="line">User&#123;userId=41, userName=&#x27;update user clear cache&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Tue Feb 27 17:47:08 CST 2018&#125;</span><br><span class="line">2021-02-17 03:04:40,274 498    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@46238e3f]</span><br><span class="line">2021-02-17 03:04:40,274 498    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@46238e3f]</span><br><span class="line">2021-02-17 03:04:40,274 498    [           main] DEBUG source.pooled.PooledDataSource  - Returned connection 1176735295 to pool.</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用注解实现一对多复杂关系映射及延迟加载"><a href="#使用注解实现一对多复杂关系映射及延迟加载" class="headerlink" title="使用注解实现一对多复杂关系映射及延迟加载"></a>使用注解实现一对多复杂关系映射及延迟加载</h2><blockquote><p><strong>需求：查询用户信息时，也要查询他的账户列表。使用注解方式实现。<br>分析：一个用户具有多个账户信息，所以形成了用户(User)与账户(Account)之间的一对多关系。</strong></p></blockquote><h3 id="User-实体类加入-List-lt-Account-gt"><a href="#User-实体类加入-List-lt-Account-gt" class="headerlink" title="User 实体类加入 List&lt;Account&gt;"></a>User 实体类加入 List<code>&lt;Account&gt;</code></h3><p><strong>User：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: User实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021-02-16 20:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多关系映射：一个用户对应多个账户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">getAccounts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccounts</span><span class="params">(List&lt;Account&gt; accounts)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accounts = accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserAddress</span><span class="params">(String userAddress)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userAddress = userAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userSex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserSex</span><span class="params">(String userSex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userSex = userSex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getUserBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userBirthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserBirthday</span><span class="params">(Date userBirthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userBirthday = userBirthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;userId=&quot;</span> + userId +</span><br><span class="line">            <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, userAddress=&#x27;&quot;</span> + userAddress + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, userSex=&#x27;&quot;</span> + userSex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, userBirthday=&quot;</span> + userBirthday +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编写用户的持久层接口并使用注解配置"><a href="#编写用户的持久层接口并使用注解配置" class="headerlink" title="编写用户的持久层接口并使用注解配置"></a>编写用户的持久层接口并使用注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.FetchType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: IUserDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021-02-16 20:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在mybatis中针对CRUD一共有四个注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Select</span> <span class="doctag">@Insert</span> <span class="doctag">@Update</span> <span class="doctag">@Delete</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id=&quot;userMap&quot;,value=&#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true,column = &quot;id&quot;,property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;id&quot;,property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;username&quot;,property = &quot;userName&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;sex&quot;,property = &quot;userSex&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;birthday&quot;,property = &quot;userBirthday&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;accounts&quot; ,column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                many = @Many(select = &quot;com.keafmd.dao.IAccountDao.findAccountByUid&quot;,</span></span><br><span class="line"><span class="meta">                             fetchType = FetchType.LAZY))</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@ResultMap(value=&#123;&quot;userMap&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResultMap(&quot;userMap&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer userId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名称模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username like #&#123;username&#125;&quot;)</span> <span class="comment">//占位符</span></span><br><span class="line">    <span class="meta">@ResultMap(&quot;userMap&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByName</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写账户的持久层接口并使用注解配置"><a href="#编写账户的持久层接口并使用注解配置" class="headerlink" title="编写账户的持久层接口并使用注解配置"></a>编写账户的持久层接口并使用注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.One;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.FetchType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: IAccountDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021-02-16 22:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IAccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，并且获取每个账户下的用户信息,一对一 ，* 这里用不到这个findAll()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from account&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id=&quot;accountMap&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true,column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;uid&quot;,property = &quot;uid&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;money&quot;,property = &quot;money&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;user&quot;,column = &quot;uid&quot;,one=@One(select=&quot;com.keafmd.dao.IUserDao.findById&quot;,fetchType= FetchType.EAGER))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id查询账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from account where uid = #&#123;userId&#125;&quot;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAccountByUid</span><span class="params">(Integer userId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编写测试代码-1"><a href="#编写测试代码-1" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.keafmd.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AnnotationCRUDTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 注解开发CRUD测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021-02-16 21:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----每个用户的信息&quot;</span>);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">            System.out.println(user.getAccounts());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行 testFindAll()的结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">2021-02-17 03:14:19,655 378    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Opening JDBC Connection</span><br><span class="line">2021-02-17 03:14:20,124 847    [           main] DEBUG source.pooled.PooledDataSource  - Created connection 1176735295.</span><br><span class="line">2021-02-17 03:14:20,124 847    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@46238e3f]</span><br><span class="line">2021-02-17 03:14:20,135 858    [           main] DEBUG om.keafmd.dao.IUserDao.findAll  - ==&gt;  Preparing: select * from user</span><br><span class="line">2021-02-17 03:14:20,183 906    [           main] DEBUG om.keafmd.dao.IUserDao.findAll  - ==&gt; Parameters:</span><br><span class="line">2021-02-17 03:14:20,471 1194   [           main] DEBUG om.keafmd.dao.IUserDao.findAll  - &lt;==      Total: 9</span><br><span class="line">-----每个用户的信息</span><br><span class="line">2021-02-17 03:14:20,473 1196   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">2021-02-17 03:14:20,474 1197   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: 41(Integer)</span><br><span class="line">2021-02-17 03:14:20,475 1198   [           main] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: 2</span><br><span class="line">User&#123;userId=41, userName=&#x27;update user clear cache&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Tue Feb 27 17:47:08 CST 2018&#125;</span><br><span class="line">[Account&#123;id=1, uid=41, money=1000.0&#125;, Account&#123;id=3, uid=41, money=2000.0&#125;]</span><br><span class="line">-----每个用户的信息</span><br><span class="line">2021-02-17 03:14:20,476 1199   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">2021-02-17 03:14:20,476 1199   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: 42(Integer)</span><br><span class="line">2021-02-17 03:14:20,477 1200   [           main] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: 0</span><br><span class="line">User&#123;userId=42, userName=&#x27;update&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Mon Feb 08 19:37:31 CST 2021&#125;</span><br><span class="line">[]</span><br><span class="line">-----每个用户的信息</span><br><span class="line">2021-02-17 03:14:20,479 1202   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">2021-02-17 03:14:20,480 1203   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: 43(Integer)</span><br><span class="line">2021-02-17 03:14:20,481 1204   [           main] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: 0</span><br><span class="line">User&#123;userId=43, userName=&#x27;小二王&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;女&#x27;, userBirthday=Sun Mar 04 11:34:34 CST 2018&#125;</span><br><span class="line">[]</span><br><span class="line">-----每个用户的信息</span><br><span class="line">2021-02-17 03:14:20,481 1204   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">2021-02-17 03:14:20,482 1205   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: 45(Integer)</span><br><span class="line">2021-02-17 03:14:20,483 1206   [           main] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: 1</span><br><span class="line">User&#123;userId=45, userName=&#x27;新一&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Sun Mar 04 12:04:06 CST 2018&#125;</span><br><span class="line">[Account&#123;id=2, uid=45, money=1000.0&#125;]</span><br><span class="line">-----每个用户的信息</span><br><span class="line">2021-02-17 03:14:20,484 1207   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">2021-02-17 03:14:20,484 1207   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: 50(Integer)</span><br><span class="line">2021-02-17 03:14:20,484 1207   [           main] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: 0</span><br><span class="line">User&#123;userId=50, userName=&#x27;Keafmd&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Mon Feb 08 15:44:01 CST 2021&#125;</span><br><span class="line">[]</span><br><span class="line">-----每个用户的信息</span><br><span class="line">2021-02-17 03:14:20,485 1208   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">2021-02-17 03:14:20,485 1208   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: 51(Integer)</span><br><span class="line">2021-02-17 03:14:20,486 1209   [           main] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: 0</span><br><span class="line">User&#123;userId=51, userName=&#x27;update DAO&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Tue Feb 09 11:31:38 CST 2021&#125;</span><br><span class="line">[]</span><br><span class="line">-----每个用户的信息</span><br><span class="line">2021-02-17 03:14:20,488 1211   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">2021-02-17 03:14:20,489 1212   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: 52(Integer)</span><br><span class="line">2021-02-17 03:14:20,491 1214   [           main] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: 0</span><br><span class="line">User&#123;userId=52, userName=&#x27;Keafmd DAO&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Tue Feb 09 11:29:41 CST 2021&#125;</span><br><span class="line">[]</span><br><span class="line">-----每个用户的信息</span><br><span class="line">2021-02-17 03:14:20,491 1214   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">2021-02-17 03:14:20,492 1215   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: 53(Integer)</span><br><span class="line">2021-02-17 03:14:20,493 1216   [           main] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: 0</span><br><span class="line">User&#123;userId=53, userName=&#x27;Keafmd laset insertid 1&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Fri Feb 12 20:53:46 CST 2021&#125;</span><br><span class="line">[]</span><br><span class="line">-----每个用户的信息</span><br><span class="line">2021-02-17 03:14:20,493 1216   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">2021-02-17 03:14:20,493 1216   [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: 55(Integer)</span><br><span class="line">2021-02-17 03:14:20,494 1217   [           main] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: 0</span><br><span class="line">User&#123;userId=55, userName=&#x27;mybatis annotation&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Tue Feb 16 22:15:36 CST 2021&#125;</span><br><span class="line">[]</span><br><span class="line">2021-02-17 03:14:20,495 1218   [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@46238e3f]</span><br><span class="line">2021-02-17 03:14:20,495 1218   [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@46238e3f]</span><br><span class="line">2021-02-17 03:14:20,495 1218   [           main] DEBUG source.pooled.PooledDataSource  - Returned connection 1176735295 to pool.</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>可以看出来延迟加载，在每次加载每个用户时都会查询一次。</strong></p></blockquote><p><strong>修改测试代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    <span class="comment">/*for (User user : users) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;-----每个用户的信息&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(user);</span></span><br><span class="line"><span class="comment">        System.out.println(user.getAccounts());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2021-02-17 03:17:26,203 166    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Opening JDBC Connection</span><br><span class="line">2021-02-17 03:17:26,500 463    [           main] DEBUG source.pooled.PooledDataSource  - Created connection 1176735295.</span><br><span class="line">2021-02-17 03:17:26,500 463    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@46238e3f]</span><br><span class="line">2021-02-17 03:17:26,505 468    [           main] DEBUG om.keafmd.dao.IUserDao.findAll  - ==&gt;  Preparing: select * from user</span><br><span class="line">2021-02-17 03:17:26,540 503    [           main] DEBUG om.keafmd.dao.IUserDao.findAll  - ==&gt; Parameters:</span><br><span class="line">2021-02-17 03:17:26,613 576    [           main] DEBUG om.keafmd.dao.IUserDao.findAll  - &lt;==      Total: 9</span><br><span class="line">2021-02-17 03:17:26,614 577    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@46238e3f]</span><br><span class="line">2021-02-17 03:17:26,614 577    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@46238e3f]</span><br><span class="line">2021-02-17 03:17:26,614 577    [           main] DEBUG source.pooled.PooledDataSource  - Returned connection 1176735295 to pool.</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>这样通过对比就可以很明显的看出来延迟加载的效果。</strong></p></blockquote><h2 id="回顾下一级缓存"><a href="#回顾下一级缓存" class="headerlink" title="回顾下一级缓存"></a>回顾下一级缓存</h2><p><strong>运行代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindOne</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.findById(<span class="number">55</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userDao.findById(<span class="number">55</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line"></span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2021-02-17 03:26:22,736 164    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Opening JDBC Connection</span><br><span class="line">2021-02-17 03:26:22,970 398    [           main] DEBUG source.pooled.PooledDataSource  - Created connection 85445963.</span><br><span class="line">2021-02-17 03:26:22,971 399    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@517cd4b]</span><br><span class="line">2021-02-17 03:26:22,975 403    [           main] DEBUG m.keafmd.dao.IUserDao.findById  - ==&gt;  Preparing: select * from user where id=?</span><br><span class="line">2021-02-17 03:26:23,001 429    [           main] DEBUG m.keafmd.dao.IUserDao.findById  - ==&gt; Parameters: 55(Integer)</span><br><span class="line">2021-02-17 03:26:23,054 482    [           main] DEBUG m.keafmd.dao.IUserDao.findById  - &lt;==      Total: 1</span><br><span class="line">2021-02-17 03:26:23,055 483    [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">2021-02-17 03:26:23,055 483    [           main] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: 55(Integer)</span><br><span class="line">2021-02-17 03:26:23,056 484    [           main] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: 0</span><br><span class="line">User&#123;userId=55, userName=&#x27;mybatis annotation&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Tue Feb 16 22:15:36 CST 2021&#125;</span><br><span class="line">User&#123;userId=55, userName=&#x27;mybatis annotation&#x27;, userAddress=&#x27;null&#x27;, userSex=&#x27;男&#x27;, userBirthday=Tue Feb 16 22:15:36 CST 2021&#125;</span><br><span class="line">true</span><br><span class="line">2021-02-17 03:26:23,056 484    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@517cd4b]</span><br><span class="line">2021-02-17 03:26:23,056 484    [           main] DEBUG ansaction.jdbc.JdbcTransaction  - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@517cd4b]</span><br><span class="line">2021-02-17 03:26:23,057 485    [           main] DEBUG source.pooled.PooledDataSource  - Returned connection 85445963 to pool.</span><br></pre></td></tr></table></figure><h2 id="mybatis-基于注解的二级缓存"><a href="#mybatis-基于注解的二级缓存" class="headerlink" title="mybatis 基于注解的二级缓存"></a>mybatis 基于注解的二级缓存</h2><h3 id="在-SqlMapConfig-xml-中开启二级缓存支持"><a href="#在-SqlMapConfig-xml-中开启二级缓存支持" class="headerlink" title="在 SqlMapConfig.xml 中开启二级缓存支持"></a>在 SqlMapConfig.xml 中开启二级缓存支持</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置开启二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在持久层接口中使用注解配置二级缓存"><a href="#在持久层接口中使用注解配置二级缓存" class="headerlink" title="在持久层接口中使用注解配置二级缓存"></a>在持久层接口中使用注解配置二级缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.FetchType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: IUserDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021-02-16 20:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在mybatis中针对CRUD一共有四个注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Select</span> <span class="doctag">@Insert</span> <span class="doctag">@Update</span> <span class="doctag">@Delete</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CacheNamespace(blocking = true)</span> <span class="comment">//mybatis 基于注解方式实现配置二级缓存 *这里*</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id=&quot;userMap&quot;,value=&#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true,column = &quot;id&quot;,property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;id&quot;,property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;username&quot;,property = &quot;userName&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;sex&quot;,property = &quot;userSex&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;birthday&quot;,property = &quot;userBirthday&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;accounts&quot; ,column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                many = @Many(select = &quot;com.keafmd.dao.IAccountDao.findAccountByUid&quot;,</span></span><br><span class="line"><span class="meta">                             fetchType = FetchType.LAZY))</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@ResultMap(value=&#123;&quot;userMap&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResultMap(&quot;userMap&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer userId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名称模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username like #&#123;username&#125;&quot;)</span> <span class="comment">//占位符</span></span><br><span class="line">    <span class="meta">@ResultMap(&quot;userMap&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByName</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编写测试二级缓存的测试类"><a href="#编写测试二级缓存的测试类" class="headerlink" title="编写测试二级缓存的测试类"></a>编写测试二级缓存的测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.keafmd.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.keafmd.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.keafmd.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keafmd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: SecondLevelCatchTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 二级缓存测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022-02-16 23:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondLevelCatchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindOne</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="type">IUserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> session.getMapper(IUserDao.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.findById(<span class="number">55</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        session.close();<span class="comment">//释放一级缓存</span></span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session1</span> <span class="operator">=</span> factory.openSession();<span class="comment">//再次打开session</span></span><br><span class="line">        <span class="type">IUserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> session1.getMapper(IUserDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userDao1.findById(<span class="number">55</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        System.out.println(user==user2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>不开启二级缓存配置的运行结果：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">119</span> <span class="number">320</span>    [           <span class="type">main</span>] DEBUG ansaction.jdbc.JdbcTransaction  - Opening JDBC Connection</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">509</span> <span class="number">710</span>    [           <span class="type">main</span>] DEBUG source.pooled.PooledDataSource  - Created connection <span class="number">85445963</span>.</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">510</span> <span class="number">711</span>    [           <span class="type">main</span>] DEBUG ansaction.jdbc.JdbcTransaction  - Setting autocommit to false on JDBC Connection [<span class="type">com.mysql.jdbc.JDBC4Connection</span>@<span class="number">517</span><span class="type">cd4b</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">514</span> <span class="number">715</span>    [           <span class="type">main</span>] DEBUG m.keafmd.dao.IUserDao.findById  - ==&gt;  Preparing: <span class="built_in">select</span> * from user <span class="built_in">where</span> id=?</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">551</span> <span class="number">752</span>    [           <span class="type">main</span>] DEBUG m.keafmd.dao.IUserDao.findById  - ==&gt; Parameters: <span class="number">55</span>(Integer)</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">633</span> <span class="number">834</span>    [           <span class="type">main</span>] DEBUG m.keafmd.dao.IUserDao.findById  - &lt;==      Total: <span class="number">1</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">634</span> <span class="number">835</span>    [           <span class="type">main</span>] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: <span class="built_in">select</span> * from account <span class="built_in">where</span> uid = ?</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">634</span> <span class="number">835</span>    [           <span class="type">main</span>] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: <span class="number">55</span>(Integer)</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">635</span> <span class="number">836</span>    [           <span class="type">main</span>] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: <span class="number">0</span></span><br><span class="line">User&#123;userId=<span class="number">55</span>, userName=<span class="string">&#x27;mybatis annotation&#x27;</span>, userAddress=<span class="string">&#x27;null&#x27;</span>, userSex=<span class="string">&#x27;男&#x27;</span>, userBirthday=Tue Feb <span class="number">16</span> <span class="number">22</span>:<span class="number">15</span>:<span class="number">36</span> CST <span class="number">2021</span>&#125;</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">635</span> <span class="number">836</span>    [           <span class="type">main</span>] DEBUG ansaction.jdbc.JdbcTransaction  - Resetting autocommit to true on JDBC Connection [<span class="type">com.mysql.jdbc.JDBC4Connection</span>@<span class="number">517</span><span class="type">cd4b</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">636</span> <span class="number">837</span>    [           <span class="type">main</span>] DEBUG ansaction.jdbc.JdbcTransaction  - Closing JDBC Connection [<span class="type">com.mysql.jdbc.JDBC4Connection</span>@<span class="number">517</span><span class="type">cd4b</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">636</span> <span class="number">837</span>    [           <span class="type">main</span>] DEBUG source.pooled.PooledDataSource  - Returned connection <span class="number">85445963</span> to pool.</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">636</span> <span class="number">837</span>    [           <span class="type">main</span>] DEBUG ansaction.jdbc.JdbcTransaction  - Opening JDBC Connection</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">636</span> <span class="number">837</span>    [           <span class="type">main</span>] DEBUG source.pooled.PooledDataSource  - Checked out connection <span class="number">85445963</span> from pool.</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">636</span> <span class="number">837</span>    [           <span class="type">main</span>] DEBUG ansaction.jdbc.JdbcTransaction  - Setting autocommit to false on JDBC Connection [<span class="type">com.mysql.jdbc.JDBC4Connection</span>@<span class="number">517</span><span class="type">cd4b</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">636</span> <span class="number">837</span>    [           <span class="type">main</span>] DEBUG m.keafmd.dao.IUserDao.findById  - ==&gt;  Preparing: <span class="built_in">select</span> * from user <span class="built_in">where</span> id=?</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">637</span> <span class="number">838</span>    [           <span class="type">main</span>] DEBUG m.keafmd.dao.IUserDao.findById  - ==&gt; Parameters: <span class="number">55</span>(Integer)</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">639</span> <span class="number">840</span>    [           <span class="type">main</span>] DEBUG m.keafmd.dao.IUserDao.findById  - &lt;==      Total: <span class="number">1</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">641</span> <span class="number">842</span>    [           <span class="type">main</span>] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: <span class="built_in">select</span> * from account <span class="built_in">where</span> uid = ?</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">641</span> <span class="number">842</span>    [           <span class="type">main</span>] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: <span class="number">55</span>(Integer)</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">31</span>:<span class="number">32</span>,<span class="number">642</span> <span class="number">843</span>    [           <span class="type">main</span>] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: <span class="number">0</span></span><br><span class="line">User&#123;userId=<span class="number">55</span>, userName=<span class="string">&#x27;mybatis annotation&#x27;</span>, userAddress=<span class="string">&#x27;null&#x27;</span>, userSex=<span class="string">&#x27;男&#x27;</span>, userBirthday=Tue Feb <span class="number">16</span> <span class="number">22</span>:<span class="number">15</span>:<span class="number">36</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line"><span class="keyword">Process</span> finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>开启二级缓存配置的运行结果：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">197</span> <span class="number">373</span>    [           <span class="type">main</span>] DEBUG ansaction.jdbc.JdbcTransaction  - Opening JDBC Connection</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">605</span> <span class="number">781</span>    [           <span class="type">main</span>] DEBUG source.pooled.PooledDataSource  - Created connection <span class="number">500179317</span>.</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">606</span> <span class="number">782</span>    [           <span class="type">main</span>] DEBUG ansaction.jdbc.JdbcTransaction  - Setting autocommit to false on JDBC Connection [<span class="type">com.mysql.jdbc.JDBC4Connection</span>@<span class="number">1</span><span class="type">dd02175</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">617</span> <span class="number">793</span>    [           <span class="type">main</span>] DEBUG m.keafmd.dao.IUserDao.findById  - ==&gt;  Preparing: <span class="built_in">select</span> * from user <span class="built_in">where</span> id=?</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">668</span> <span class="number">844</span>    [           <span class="type">main</span>] DEBUG m.keafmd.dao.IUserDao.findById  - ==&gt; Parameters: <span class="number">55</span>(Integer)</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">777</span> <span class="number">953</span>    [           <span class="type">main</span>] DEBUG m.keafmd.dao.IUserDao.findById  - &lt;==      Total: <span class="number">1</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">781</span> <span class="number">957</span>    [           <span class="type">main</span>] DEBUG o.IAccountDao.findAccountByUid  - ==&gt;  Preparing: <span class="built_in">select</span> * from account <span class="built_in">where</span> uid = ?</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">782</span> <span class="number">958</span>    [           <span class="type">main</span>] DEBUG o.IAccountDao.findAccountByUid  - ==&gt; Parameters: <span class="number">55</span>(Integer)</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">782</span> <span class="number">958</span>    [           <span class="type">main</span>] DEBUG o.IAccountDao.findAccountByUid  - &lt;==      Total: <span class="number">0</span></span><br><span class="line">User&#123;userId=<span class="number">55</span>, userName=<span class="string">&#x27;mybatis annotation&#x27;</span>, userAddress=<span class="string">&#x27;null&#x27;</span>, userSex=<span class="string">&#x27;男&#x27;</span>, userBirthday=Tue Feb <span class="number">16</span> <span class="number">22</span>:<span class="number">15</span>:<span class="number">36</span> CST <span class="number">2021</span>&#125;</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">790</span> <span class="number">966</span>    [           <span class="type">main</span>] DEBUG ansaction.jdbc.JdbcTransaction  - Resetting autocommit to true on JDBC Connection [<span class="type">com.mysql.jdbc.JDBC4Connection</span>@<span class="number">1</span><span class="type">dd02175</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">791</span> <span class="number">967</span>    [           <span class="type">main</span>] DEBUG ansaction.jdbc.JdbcTransaction  - Closing JDBC Connection [<span class="type">com.mysql.jdbc.JDBC4Connection</span>@<span class="number">1</span><span class="type">dd02175</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">791</span> <span class="number">967</span>    [           <span class="type">main</span>] DEBUG source.pooled.PooledDataSource  - Returned connection <span class="number">500179317</span> to pool.</span><br><span class="line"><span class="number">2021</span><span class="literal">-02-17</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">23</span>,<span class="number">800</span> <span class="number">976</span>    [           <span class="type">main</span>] DEBUG        com.keafmd.dao.IUserDao  - Cache Hit Ratio [<span class="type">com.keafmd.dao.IUserDao</span>]: <span class="number">0.5</span></span><br><span class="line">User&#123;userId=<span class="number">55</span>, userName=<span class="string">&#x27;mybatis annotation&#x27;</span>, userAddress=<span class="string">&#x27;null&#x27;</span>, userSex=<span class="string">&#x27;男&#x27;</span>, userBirthday=Tue Feb <span class="number">16</span> <span class="number">22</span>:<span class="number">15</span>:<span class="number">36</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line"><span class="keyword">Process</span> finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>效果很明显，开启使用二级缓存时第二次并没有发起查询，证明使用的就是二级缓存。</strong></p><p><strong>以上就是 Mybatis 注解开发（超详细）的全部内容。</strong></p><p><strong>看完如果对你有帮助，感谢赞助支持！</strong></p><p><img src="https://img-blog.csdnimg.cn/20210115230629703.gif#pic_center" alt=""></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> MyBatis </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单项链表</title>
      <link href="/posts/e72b5a3a.html"/>
      <url>/posts/e72b5a3a.html</url>
      
        <content type="html"><![CDATA[<h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><h3 id="链表-Linked-List-介绍"><a href="#链表-Linked-List-介绍" class="headerlink" title="链表(Linked  List)介绍"></a>链表(Linked  List)介绍</h3><blockquote><p>链表在内存中的存储<br><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200617221622.png" alt=""></p><p><strong>特点</strong></p><ul><li>链表是以节点的方式来存储,<strong>是链式存储</strong></li><li>每个节点包含 data 域 和 next 域。next域用来指向下一个节点</li><li>链表的各个节点不一定是连续存储的</li><li>链表分<strong>带头节点的链表</strong>和<strong>没有头节点的链表</strong>，根据实际的需求来确定</li></ul><p>带头结点的单列表<strong>逻辑示意图</strong></p><p><img src="https://img-blog.csdn.net/20160928205306919?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200617221632.png" alt=""></p></blockquote><h3 id="单向链表的优缺点"><a href="#单向链表的优缺点" class="headerlink" title="单向链表的优缺点"></a>单向链表的优缺点</h3><blockquote><p> 和普通的线性结构（如数组）相比，链表结构有以下特点：<br>    （1）单个结点创建非常灵活，普通的线性内存通常在创建的时候就需要设定数据的大小<br>    （2）结点的删除、插入非常方便，不需要像线性结构那样移动剩下的数据<br>    （3）结点的访问方便，可以通过循环或者递归的方法访问到任意数据，但是平均的访问效率低于线性表</p></blockquote><h3 id="实现思路-实现链表的增删改查"><a href="#实现思路-实现链表的增删改查" class="headerlink" title="实现思路(实现链表的增删改查)"></a>实现思路(实现链表的增删改查)</h3><h4 id="创建（添加）"><a href="#创建（添加）" class="headerlink" title="创建（添加）"></a><strong>创建（添加）</strong></h4><blockquote><ul><li>先创建一个Head头节点，表示单链表的头</li><li>后面我们每添加一个节点，就放在链表的最后</li></ul></blockquote><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a><strong>遍历</strong></h4><blockquote><p>通过一个辅助变量，来遍历整个链表</p></blockquote><h4 id="有序插入"><a href="#有序插入" class="headerlink" title="有序插入"></a><strong>有序插入</strong></h4><blockquote><ul><li>先遍历链表，找到应该插入的位置</li><li>要插入的节点的next指向插入位置的后一个节点</li><li>插入位置的前一个节点的next指向要插入节点<ul><li>插入前要判断是否在队尾插入</li></ul></li></ul></blockquote><h4 id="根据某个属性节点修改值"><a href="#根据某个属性节点修改值" class="headerlink" title="根据某个属性节点修改值"></a><strong>根据某个属性节点修改值</strong></h4><blockquote><ul><li>先遍历节点，找到修改的位置<ul><li>如果未找到修改节点，则不修改</li></ul></li></ul></blockquote><h4 id="删除某个节点"><a href="#删除某个节点" class="headerlink" title="删除某个节点"></a><strong>删除某个节点</strong></h4><blockquote><ul><li>先遍历节点，找到要删除节点的前一个节点</li><li>进行删除操作</li></ul></blockquote><h4 id="求倒数第n个节点的信息"><a href="#求倒数第n个节点的信息" class="headerlink" title="求倒数第n个节点的信息"></a><strong>求倒数第n个节点的信息</strong></h4><blockquote><ul><li>遍历链表，求出链表的<strong>有效长度</strong>length（不算头结点）</li><li>遍历链表到第length-n的节点</li></ul></blockquote><h4 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a><strong>翻转链表</strong></h4><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200616112143.png" alt=""></p><blockquote><ul><li><p>创建一个新的头结点，作为新链表的头</p></li><li><p>从头遍历旧链表，将遍历到的节点插入新链表的头结点之后</p></li><li><p>注意需要用到</p><p>两个暂存节点</p><ul><li>一个用来保存正在遍历的节点</li><li>一个用来保存正在遍历节点的下一个节点</li></ul></li></ul></blockquote><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200616142843.png" alt="img"></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200616142931.png" alt="img"></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200616142248.png" alt="img"></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200617221646.png" alt="img"></p><h4 id="逆序打印"><a href="#逆序打印" class="headerlink" title="逆序打印"></a><strong>逆序打印</strong></h4><blockquote><ul><li>遍历链表，将遍历到的节点入栈</li><li>遍历完后，进行出栈操作，<strong>同时打印出栈元素</strong></li></ul></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">linkedList.traverseNode();</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//创建学生节点，并插入链表</span></span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentNode</span>(<span class="number">1</span>, <span class="string">&quot;Nyima&quot;</span>);</span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">student3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentNode</span>(<span class="number">3</span>, <span class="string">&quot;Lulu&quot;</span>);</span><br><span class="line">linkedList.addNode(student1);</span><br><span class="line">linkedList.addNode(student3);</span><br><span class="line">linkedList.traverseNode();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//按id大小插入</span></span><br><span class="line">System.out.println(<span class="string">&quot;有序插入&quot;</span>);</span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentNode</span>(<span class="number">0</span>, <span class="string">&quot;Wenwen&quot;</span>);</span><br><span class="line">linkedList.addByOrder(student2);</span><br><span class="line">linkedList.traverseNode();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//按id修改学生信息</span></span><br><span class="line">System.out.println(<span class="string">&quot;修改学生信息&quot;</span>);</span><br><span class="line">student2 = <span class="keyword">new</span> <span class="title class_">StudentNode</span>(<span class="number">1</span>, <span class="string">&quot;Hulu&quot;</span>);</span><br><span class="line">linkedList.changeNode(student2);</span><br><span class="line">linkedList.traverseNode();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id删除学生信息</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除学生信息&quot;</span>);</span><br><span class="line">student2 = <span class="keyword">new</span> <span class="title class_">StudentNode</span>(<span class="number">1</span>, <span class="string">&quot;Hulu&quot;</span>);</span><br><span class="line">linkedList.deleteNode(student2);</span><br><span class="line">linkedList.traverseNode();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得倒数第几个节点</span></span><br><span class="line">System.out.println(<span class="string">&quot;获得倒数节点&quot;</span>);</span><br><span class="line">System.out.println(linkedList.getStuByRec(<span class="number">2</span>));</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//翻转链表</span></span><br><span class="line">System.out.println(<span class="string">&quot;翻转链表&quot;</span>);</span><br><span class="line"><span class="type">LinkedList</span> <span class="variable">newLinkedList</span> <span class="operator">=</span> linkedList.reverseList();</span><br><span class="line">newLinkedList.traverseNode();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒叙遍历链表</span></span><br><span class="line">System.out.println(<span class="string">&quot;倒序遍历链表&quot;</span>);</span><br><span class="line">newLinkedList.reverseTraverse();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line"><span class="comment">//头节点，防止被修改，设置为私有的</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">StudentNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 要添加的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(StudentNode node)</span> &#123;</span><br><span class="line"><span class="comment">//因为头节点不能被修改，所以创建一个辅助节点</span></span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">//找到最后一个节点</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//temp是尾节点就停止循环</span></span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是尾结点就向后移动</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//现在temp是尾节点了，再次插入</span></span><br><span class="line">temp.next = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traverseNode</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;开始遍历链表&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建辅助节点</span></span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//遍历完成就停止循环</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(temp);</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按id顺序插入节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOrder</span><span class="params">(StudentNode node)</span> &#123;</span><br><span class="line"><span class="comment">//如果没有首节点，就直接插入</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">head.next = node;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助节点，用于找到插入位置和插入操作</span></span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">//节点的下一个节点存在，且它的id小于要插入节点的id，就继续下移</span></span><br><span class="line"><span class="keyword">while</span> (temp.next!=<span class="literal">null</span> &amp;&amp; temp.next.id &lt; node.id) &#123;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果temp的下一个节点存在，则执行该操作</span></span><br><span class="line"><span class="comment">//且插入操作，顺序不能换</span></span><br><span class="line"><span class="keyword">if</span>(temp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">node.next = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">temp.next = node;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id来修改节点信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 修改信息的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeNode</span><span class="params">(StudentNode node)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空，请先加入该学生信息&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">//遍历链表，找到要修改的节点</span></span><br><span class="line"><span class="keyword">while</span> (temp.next!= <span class="literal">null</span> &amp;&amp; temp.id != node.id) &#123;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果temp已经是最后一个节点，判断id是否相等</span></span><br><span class="line"><span class="keyword">if</span>(temp.id != node.id) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;未找到该学生的信息，请先创建该学生的信息&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改学生信息</span></span><br><span class="line">temp.name = node.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 要删除的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(StudentNode node)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="type">StudentNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"> <span class="comment">//遍历链表，找到要删除的节点</span></span><br><span class="line"> <span class="keyword">if</span>(temp.next!=<span class="literal">null</span> &amp;&amp; temp.next.id!=node.id) &#123;</span><br><span class="line"> temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//判断最后一个节点的是否要删除的节点</span></span><br><span class="line"> <span class="keyword">if</span>(temp.next.id != node.id) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请先插入该学生信息&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//删除该节点</span></span><br><span class="line"> temp.next = temp.next.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 得到倒数的节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 倒数第几个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> StudentNode <span class="title function_">getStuByRec</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="comment">//用户记录链表长度，因为head.next不为空，此时已经有一个节点了</span></span><br><span class="line"><span class="comment">//所以length初始化为1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(temp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">temp = temp.next;</span><br><span class="line">length++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(length &lt; index) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;链表越界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp = head.next;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;length-index; i++) &#123;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 翻转链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 反转后的链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> LinkedList <span class="title function_">reverseList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//链表为空或者只有一个节点，无需翻转</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;无需翻转&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">LinkedList</span> <span class="variable">newLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"><span class="comment">//给新链表创建新的头结点</span></span><br><span class="line">newLinkedList.head = <span class="keyword">new</span> <span class="title class_">StudentNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//用于保存正在遍历的节点</span></span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="comment">//用于保存正在遍历节点的下一个节点</span></span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">nextNode</span> <span class="operator">=</span> temp.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//插入新链表</span></span><br><span class="line">temp.next = newLinkedList.head.next;</span><br><span class="line">newLinkedList.head.next = temp;</span><br><span class="line"><span class="comment">//移动到下一个节点</span></span><br><span class="line">temp = nextNode;</span><br><span class="line">nextNode = nextNode.next;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//插入最后一个节点</span></span><br><span class="line">temp.next = newLinkedList.head.next;</span><br><span class="line">newLinkedList.head.next = temp;</span><br><span class="line">head.next = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span> newLinkedList;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseTraverse</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">StudentNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="comment">//创建栈，用于存放遍历到的节点</span></span><br><span class="line">Stack&lt;StudentNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span>(temp != <span class="literal">null</span>) &#123;</span><br><span class="line">stack.push(temp);</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">System.out.println(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentNode</span> &#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">String name;</span><br><span class="line"><span class="comment">//用于保存下一个节点的地址</span></span><br><span class="line">StudentNode next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StudentNode</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;StudentNode&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line"><span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">开始遍历链表</span><br><span class="line">链表为空</span><br><span class="line"></span><br><span class="line">开始遍历链表</span><br><span class="line">StudentNode&#123;id=1, name=&#x27;Nyima&#x27;&#125;</span><br><span class="line">StudentNode&#123;id=3, name=&#x27;Lulu&#x27;&#125;</span><br><span class="line"></span><br><span class="line">有序插入</span><br><span class="line">开始遍历链表</span><br><span class="line">StudentNode&#123;id=0, name=&#x27;Wenwen&#x27;&#125;</span><br><span class="line">StudentNode&#123;id=1, name=&#x27;Nyima&#x27;&#125;</span><br><span class="line">StudentNode&#123;id=3, name=&#x27;Lulu&#x27;&#125;</span><br><span class="line"></span><br><span class="line">修改学生信息</span><br><span class="line">开始遍历链表</span><br><span class="line">StudentNode&#123;id=0, name=&#x27;Wenwen&#x27;&#125;</span><br><span class="line">StudentNode&#123;id=1, name=&#x27;Hulu&#x27;&#125;</span><br><span class="line">StudentNode&#123;id=3, name=&#x27;Lulu&#x27;&#125;</span><br><span class="line"></span><br><span class="line">删除学生信息</span><br><span class="line">开始遍历链表</span><br><span class="line">StudentNode&#123;id=0, name=&#x27;Wenwen&#x27;&#125;</span><br><span class="line">StudentNode&#123;id=3, name=&#x27;Lulu&#x27;&#125;</span><br><span class="line"></span><br><span class="line">获得倒数节点</span><br><span class="line">StudentNode&#123;id=0, name=&#x27;Wenwen&#x27;&#125;</span><br><span class="line"></span><br><span class="line">翻转链表</span><br><span class="line">开始遍历链表</span><br><span class="line">StudentNode&#123;id=3, name=&#x27;Lulu&#x27;&#125;</span><br><span class="line">StudentNode&#123;id=0, name=&#x27;Wenwen&#x27;&#125;</span><br><span class="line"></span><br><span class="line">倒序遍历链表</span><br><span class="line">StudentNode&#123;id=0, name=&#x27;Wenwen&#x27;&#125;</span><br><span class="line">StudentNode&#123;id=3, name=&#x27;Lulu&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200616170404.png" alt="img"></p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><h3 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a><strong>遍历</strong></h3><ul><li>和单向链表的遍历相同，需要一个辅助节点来保存当前正在遍历的节点</li></ul><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a><strong>添加</strong></h3><ul><li>双向链表多出了一个frnot，所以在添加时，要让新增节点的front指向链表尾节点</li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a><strong>修改</strong></h3><ul><li>和单向链表的修改相同</li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a><strong>删除</strong></h3><ul><li>使用temp来保存要删除的节点</li><li>temp.pre.next指向temp.next</li><li>temp.next指向temp.pre</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BidirectionalList</span> <span class="variable">bidirectionalList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BidirectionalList</span>();</span><br><span class="line">        bidirectionalList.addNode(<span class="keyword">new</span> <span class="title class_">PersonNode</span>(<span class="number">1</span>, <span class="string">&quot;Nyima&quot;</span>));</span><br><span class="line">        bidirectionalList.addNode(<span class="keyword">new</span> <span class="title class_">PersonNode</span>(<span class="number">2</span>, <span class="string">&quot;Lulu&quot;</span>));</span><br><span class="line">        bidirectionalList.traverseNode();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;修改节点信息&quot;</span>);</span><br><span class="line">        bidirectionalList.changeNode(<span class="keyword">new</span> <span class="title class_">PersonNode</span>(<span class="number">2</span>, <span class="string">&quot;Wenwen&quot;</span>));</span><br><span class="line">        bidirectionalList.traverseNode();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除节点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除节点&quot;</span>);</span><br><span class="line">        bidirectionalList.deleteNode(<span class="keyword">new</span> <span class="title class_">PersonNode</span>(<span class="number">1</span>, <span class="string">&quot;Nyima&quot;</span>));</span><br><span class="line">        bidirectionalList.traverseNode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BidirectionalList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">PersonNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonNode</span>(-<span class="number">1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断双向链表是否为空</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 判空结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加将诶点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> node 要被添加的节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(PersonNode node)</span> &#123;</span><br><span class="line">        <span class="type">PersonNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">if</span>(temp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入在最后一个节点的后面</span></span><br><span class="line">        temp.next = node;</span><br><span class="line">        node.front = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traverseNode</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;遍历链表&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">PersonNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改节点信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> node 要修改的节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeNode</span><span class="params">(PersonNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">PersonNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">//用于判定是否做了修改</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.id == node.id) &#123;</span><br><span class="line">                <span class="comment">//匹配到节点，替换节点</span></span><br><span class="line">                temp.front.next = node;</span><br><span class="line">                node.next = temp.next;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未匹配到改人信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> node 要删除的节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(PersonNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">PersonNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">//查看是否删除成功</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.id == node.id) &#123;</span><br><span class="line">                temp.front.next = temp.next;</span><br><span class="line">                temp.next = <span class="literal">null</span>;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到该节点&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//指向下一个节点</span></span><br><span class="line">    PersonNode next;</span><br><span class="line">    <span class="comment">//指向前一个节点</span></span><br><span class="line">    PersonNode front;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PersonNode</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PersonNode&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">遍历链表</span><br><span class="line">PersonNode&#123;id=1, name=&#x27;Nyima&#x27;&#125;</span><br><span class="line">PersonNode&#123;id=2, name=&#x27;Lulu&#x27;&#125;</span><br><span class="line"></span><br><span class="line">修改节点信息</span><br><span class="line">遍历链表</span><br><span class="line">PersonNode&#123;id=1, name=&#x27;Nyima&#x27;&#125;</span><br><span class="line">PersonNode&#123;id=2, name=&#x27;Wenwen&#x27;&#125;</span><br><span class="line"></span><br><span class="line">删除节点</span><br><span class="line">遍历链表</span><br><span class="line">PersonNode&#123;id=2, name=&#x27;Wenwen&#x27;&#125;</span><br></pre></td></tr></table></figure><p>&gt;</p><blockquote><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=39jvp4pqpw2ss">https://cloud.tencent.com/developer/support-plan?invite_code=39jvp4pqpw2ss</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环队列</title>
      <link href="/posts/b66774c1.html"/>
      <url>/posts/b66774c1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>循环队列</strong>是 队列的一种特殊形式。首先介绍队列，然后引申出循环队列。<br>队列又称为“先进先出”<strong>FIFO</strong>线性表<br>限定插入操作只能在队尾进行，而删除操作只能在队首进行<br>队列也可以采用<strong>顺序存储结构或链表结构</strong>来实现，分别称为顺序队列和链队列</p><p><strong>队列的顺序表示—顺序队列</strong></p><p>用一组连续的<strong>存储单元</strong>依次存放从队首到队尾的元素，附设两个指针 head 和 tail 分别指向队首元素和队尾元素的位置，<br>(有的地方用 front 和 rear 表示)</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/queue/SouthEast.png" alt="img"></p><p><strong>当 head = tail = 0 时表示空队列</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/queue/01.png" alt="这里写图片描述"></p><p><strong>当插入新元素到队尾时，tail 加 1</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/queue/02.png" alt="这里写图片描述"></p><p><strong>当删除队首元素时，head 加 1，上图如果把 C 也删掉，那么就 head = tail 了</strong></p><p><strong>tail 始终指向队列元素的下一个位置</strong></p><p>对应的操作：<br>队空：head=tail<br>求队长：tail - head<br>入队：新元素按 tail 指示位置加入，再将队尾指针加 1 ，即 tail = tail + 1<br>出队：将 head 指示的元素取出，再将队头指针加 1，即 head = head + 1</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/queue/03.png" alt="这里写图片描述"></p><p><strong>下面引入循环队列</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/queue/04.png" alt="这里写图片描述"></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/queue/05.png" alt="这里写图片描述"></p><p><strong>入队，tail 指针变化：</strong> &gt;<strong>tail ＝ （tail ＋ 1）％maxsize</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/queue/06.png" alt="这里写图片描述"></p><p><strong>出队，head 指针变化：</strong> &gt;<strong>head ＝（ head ＋ 1）％maxsize</strong></p><p>删除数据 C，队列为空</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/queue/07.png" alt="这里写图片描述"></p><p>依次插入数据 D,E,F,G,H,I,J,K<br>队列满：head = tail</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/queue/08.png" alt="这里写图片描述"></p><p>队满和队空时，均有 head=tail<br>因此，只凭 head=tail 还无法区分是满还是空。</p><p>如何判定队列满还是空？</p><p>方法 1：<br>用一个计数变量来记载队列中的元素个数<br>初始化队列时 c=0;<br>当入队时，计数变量＋ 1（ c=c+1 ）<br>当出队时，计数变量－1 （c=c-1）<br>当计数变量＝ maxsize 时，队满<br>当计数变量＝ 0 时，队空</p><p>方法 2：<br>牺牲一个元素空间，来区别队空或队满。<br>入队前，先判 Q.rear+1 是否等于 Q.front，<br>若是则为队满。<br>而当 Q.front=Q.rear 时，为队空。<br>上图中：当数据 J 入队后，就认为队已满，<br>而当数据 K 再要入队时，就拒绝入队。</p><p>当队列已经满了，如果允许覆盖之前的数据：<br><img src="https://npm.elemecdn.com/serms-assets@1.0.6/queue/09.png" alt="这里写图片描述"></p><p>队列已经满了之后，<br>继续插入数据 L,M,N，<br>之前的数据 D,E,F 被覆盖<br>此时，队列已经满了，<br>最新的数据是：G,H,I，J，K,L,M,N</p><p>在程序中，取队列的数据的时候，如果检测到 队列满了，<br>此时，需要一次性取出队列中的数据，一次性取出数据的时候，不用管 head 指针，直接按照 tail 指针指向的位置开始取数据，直到循环取到 tail-1 位置停止。最终取出的数据的个数是 队列的长度 maxsize<br>取出之后，可以对队列指针 head 和 tail 初始化为 0，需要将队列满整个标志设置为 False.</p><p>当应该用场景如下的时候：</p><ol><li>数据是一条一条的进入队列的</li><li>队列中的数据是一次性读取的<br>一次性读取出队列中的所有数据的方式：<br>因为允许覆盖，有两种情况：<br>当队列满了之后，<br>需要根据 tail,从 tail 所在位置的数据，绕一圈到 tail-1 位置所在的数据，都按照顺序取出来，这些数据是按照顺序，最新的数据。<br>当队列没有满的时候，<br>队列中所有的数据是 Head 到 tail 之间的所有数据。</li></ol><p><strong>这里采用方式 2 来进行代码演示</strong></p><p>参考代码：</p><p>分析:</p><ol><li>当队列满时,条件是(rear + 1) % maxSize = front</li><li>队列为空的条件: rear == front</li><li>队列有效数据个数:(rear + maxSize - front) % maxSize</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/3/20 18:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleArrayQueueDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试数组模拟环形队列的案例~~~~~&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        <span class="type">CircleArray</span> <span class="variable">circleArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleArray</span>(<span class="number">4</span>); <span class="comment">//说明设置4.其队列的有效数据最大是3</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>; <span class="comment">//接收用户输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s(show): 显示队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;e(exit): 推出队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;a(add): 添加数据到队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;g(get): 从队列取出数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;h(head): 查看队列头的数据&quot;</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>); <span class="comment">//接收一个字符</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        circleArray.showQueue();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    circleArray.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: <span class="comment">//取出数据</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> circleArray.getQueue();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;取出的数据是: %d\n&quot;</span>, res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> circleArray.headQueue();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;队列头数据是:%d\n&quot;</span>, res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;退出队列~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleArray</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;  <span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="comment">//front的初始值=0 也就是说arr[front]就是队列的第一个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;  <span class="comment">//队列头</span></span><br><span class="line">    <span class="comment">//rear的初始值=0 rear指向队列的最后一个元素的后一个位置,因为希望空出一个空间作为约定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rear;   <span class="comment">//队列尾</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr; <span class="comment">//该数组用于存放数据,模拟队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleArray</span><span class="params">(<span class="type">int</span> arrMaxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = arrMaxSize;</span><br><span class="line">        <span class="built_in">this</span>.arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="built_in">this</span>.maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数据到队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列满,不能加入数据~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接将数据加入</span></span><br><span class="line">        arr[rear] = n;</span><br><span class="line">        <span class="comment">//将rear后移,必须考虑取模</span></span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取队列的数据,出队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//判断队列是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空,不能获取数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分析出front是指向队列的第一个元素</span></span><br><span class="line">        <span class="comment">//1.先把front对应的值保存到临时变量</span></span><br><span class="line">        <span class="comment">//2.将front后移 考虑取模</span></span><br><span class="line">        <span class="comment">//3.将临时保存的变量返回</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> arr[front];</span><br><span class="line">        front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示所有数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空,不能获取数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//思路:从front开始遍历,遍历多少个元素</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> front; i &lt; front + size(); i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i % maxSize, arr[i % maxSize]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求出当前队列有效数据的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列头数据,不是取出数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空,没有数据~~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OJ1024</title>
      <link href="/posts/9b97716e.html"/>
      <url>/posts/9b97716e.html</url>
      
        <content type="html"><![CDATA[<p>ps:<code>算法打卡第一天</code></p><h2 id="金币"><a href="#金币" class="headerlink" title="金币"></a>金币</h2><blockquote><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>国王将金币作为工资，发放给忠诚的骑士。第一天，骑士收到一枚金币；之后两天（第二天和第三天），每天收到两枚金币；之后三天（第四、五、六天），每天收到三枚金币；之后四天（第七、八、九、十天），每天收到四枚金币……；这种工资发放模式会一直这样延续下去：当连续 N 天每天收到 N 枚金币后，骑士会在之后的连续 N+1 天里，每天收到 N+1 枚金币。</p><p>请计算在前 K 天里，骑士一共获得了多少金币。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入只有 1 行，包含一个正整数 K，表示发放金币的天数。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出文件只有 1 行，包含一个正整数，即骑士收到的金币数。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/oj/image-20220317235542863.png" alt=""></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote><p>骑士收的金币数写成以下形式，更容易想到解题方法<br>以前 10 天（包括第 10 天）收到的金币数为例，则收到的金币数为：<br>1 （第一天）<br>2 2 （第二、三天）<br>3 3 3 （第四、五、六天）<br>4 4 4 4 （第七、八、九、十天）<br>若想打印上面的这个数字三角形的话，只需两个 for 循环即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=<span class="number">4</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">       System.out.println(i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类比这段代码，内层 for 循环可以代表天数，那只需修改循环终止的条件，当天数 day==k 时，终止循环即可。<br>该题解决代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span> 2022/3/17 23:15</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main1024</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> sc.nextInt(), days = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">               days++;</span><br><span class="line">               sum += i;</span><br><span class="line">               <span class="keyword">if</span> (day==days)&#123;</span><br><span class="line">                   System.out.println(sum);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Aop详细介绍</title>
      <link href="/posts/9dadefec.html"/>
      <url>/posts/9dadefec.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h2><blockquote><p>​ <a href="https://baike.baidu.com/item/AOP/1332219?fr=aladdin">AOP</a>（Aspect-OrientedProgramming，面向切面编程），可以说是 OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP 引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP 则显得无能为力。也就是说，OOP 允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在 OOP 设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p><p>​ 而 AOP 技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP 代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p></blockquote><hr><h2 id="AOP-的基本概念"><a href="#AOP-的基本概念" class="headerlink" title="AOP 的基本概念"></a>AOP 的基本概念</h2><blockquote><ul><li>(1)Aspect(切面):通常是一个类，里面可以定义切入点和通知</li><li>(2)JointPoint(连接点):程序执行过程中明确的点，一般是方法的调用</li><li>(3)Advice(通知):AOP 在特定的切入点上执行的增强处理，有 before,after,afterReturning,afterThrowing,around</li><li>(4)Pointcut(切入点):就是带有通知的连接点，在程序中主要体现为书写切入点表达式</li><li>(5)AOP 代理：AOP 框架创建的对象，代理就是目标对象的加强。Spring 中的 AOP 代理可以使 JDK 动态代理，也可以是 CGLIB 代理，前者基于接口，后者基于子类</li></ul></blockquote><p><strong>通知方法:</strong></p><blockquote><ol><li>前置通知:在我们执行目标方法之前运行(<strong>@Before</strong>)</li><li>后置通知:在我们目标方法运行结束之后 ,不管有没有异常<strong>**(@After)**</strong></li><li>返回通知:在我们的目标方法正常返回值后运行<strong>**(@AfterReturning)**</strong></li><li>异常通知:在我们的目标方法出现异常后运行<strong>**(@AfterThrowing)**</strong></li><li>环绕通知:动态代理, 需要手动执行 joinPoint.procced()(其实就是执行我们的目标方法执行之前相当于前置通知, 执行之后就相当于我们后置通知<strong>(@Around)</strong></li></ol></blockquote><hr><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><blockquote><p>​ Spring 中的 AOP 代理还是离不开 Spring 的 IOC 容器，代理的生成，管理及其依赖关系都是由 IOC 容器负责，Spring 默认使用 JDK 动态代理，在需要代理类而不是代理接口的时候，Spring 会自动切换为使用 CGLIB 代理，不过现在的项目都是面向接口编程，所以 JDK 动态代理相对来说用的还是多一些。</p></blockquote><h3 id="advice-的类型"><a href="#advice-的类型" class="headerlink" title="advice 的类型"></a>advice 的类型</h3><blockquote><ul><li>before advice, 在 join point 前被执行的 advice. 虽然 before advice 是在 join point 前被执行, 但是它并不能够阻止 join point 的执行, 除非发生了异常(即我们在 before advice 代码中, 不能人为地决定是否继续执行 join point 中的代码)</li><li>after return advice, 在一个 join point 正常返回后执行的 advice</li><li>after throwing advice, 当一个 join point 抛出异常后执行的 advice</li><li>after(final) advice, 无论一个 join point 是正常退出还是发生了异常, 都会被执行的 advice.</li><li>around advice, 在 join point 前和 joint point 退出后都执行的 advice. 这个是最常用的 advice</li></ul></blockquote><h3 id="关于-AOP-Proxy"><a href="#关于-AOP-Proxy" class="headerlink" title="关于 AOP Proxy"></a>关于 AOP Proxy</h3><p>Spring AOP 默认使用标准的 JDK 动态代理(dynamic proxy)技术来实现 AOP 代理, 通过它, 我们可以为任意的接口实现代理. <code>如果需要为一个类实现代理, 那么可以使用 CGLIB 代理.</code> 当一个业务逻辑对象没有实现接口时, 那么 Spring AOP 就默认使用 CGLIB 来作为 AOP 代理了. 即如果我们需要为一个方法织入 advice, 但是这个方法不是一个接口所提供的方法, 则此时 Spring AOP 会使用 CGLIB 来实现动态代理. 鉴于此, Spring AOP 建议基于接口编程, 对接口进行 AOP 而不是类.</p><h3 id="彻底理解-aspect-join-point-point-cut-advice"><a href="#彻底理解-aspect-join-point-point-cut-advice" class="headerlink" title="#彻底理解 aspect, join point, point cut, advice"></a><a href="https://dunwu.github.io/spring-tutorial/core/spring-aop.html#彻底理解-aspect-join-point-point-cut-advice">#</a>彻底理解 aspect, join point, point cut, advice</h3><p>看完了上面的理论部分知识, 我相信还是会有不少朋友感觉到 AOP 的概念还是很模糊, 对 AOP 中的各种概念理解的还不是很透彻. 其实这很正常, 因为 AOP 中的概念是在是太多了, 我当时也是花了老大劲才梳理清楚的. 下面我以一个简单的例子来比喻一下 AOP 中 aspect, jointpoint, pointcut 与 advice 之间的关系.</p><p>让我们来假设一下, 从前有一个叫爪哇的小县城, 在一个月黑风高的晚上, 这个县城中发生了命案. 作案的凶手十分狡猾, 现场没有留下什么有价值的线索. 不过万幸的是, 刚从隔壁回来的老王恰好在这时候无意中发现了凶手行凶的过程, 但是由于天色已晚, 加上凶手蒙着面, 老王并没有看清凶手的面目, 只知道凶手是个男性, 身高约七尺五寸. 爪哇县的县令根据老王的描述, 对守门的士兵下命令说: 凡是发现有身高七尺五寸的男性, 都要抓过来审问. 士兵当然不敢违背县令的命令, 只好把进出城的所有符合条件的人都抓了起来.</p><p>来让我们看一下上面的一个小故事和 AOP 到底有什么对应关系. 首先我们知道, 在 Spring AOP 中 join point 指代的是所有方法的执行点, 而 point cut 是一个描述信息, 它修饰的是 join point, 通过 point cut, 我们就可以确定哪些 join point 可以被织入 Advice. 对应到我们在上面举的例子, 我们可以做一个简单的类比, join point 就相当于 <strong>爪哇的小县城里的百姓</strong>, point cut 就相当于 <strong>老王所做的指控, 即凶手是个男性, 身高约七尺五寸</strong>, 而 advice 则是施加在符合老王所描述的嫌疑人的动作: <strong>抓过来审问</strong>. 为什么可以这样类比呢?</p><ul><li>join point —&gt; 爪哇的小县城里的百姓: 因为根据定义, join point 是所有可能被织入 advice 的候选的点, 在 Spring AOP 中, 则可以认为所有方法执行点都是 join point. 而在我们上面的例子中, 命案发生在小县城中, 按理说在此县城中的所有人都有可能是嫌疑人.</li><li>point cut —&gt; 男性, 身高约七尺五寸: 我们知道, 所有的方法(joint point) 都可以织入 advice, 但是我们并不希望在所有方法上都织入 advice, 而 pointcut 的作用就是提供一组规则来匹配 joinpoint, 给满足规则的 joinpoint 添加 advice. 同理, 对于县令来说, 他再昏庸, 也知道不能把县城中的所有百姓都抓起来审问, 而是根据<code>凶手是个男性, 身高约七尺五寸</code>, 把符合条件的人抓起来. 在这里<code>凶手是个男性, 身高约七尺五寸</code> 就是一个修饰谓语, 它限定了凶手的范围, 满足此修饰规则的百姓都是嫌疑人, 都需要抓起来审问.</li><li>advice —&gt; 抓过来审问, advice 是一个动作, 即一段 Java 代码, 这段 Java 代码是作用于 point cut 所限定的那些 join point 上的. 同理, 对比到我们的例子中, <code>抓过来审问</code> 这个动作就是对作用于那些满足 <code>男性, 身高约七尺五寸</code> 的<code>爪哇的小县城里的百姓</code>.</li><li>aspect: aspect 是 point cut 与 advice 的组合, 因此在这里我们就可以类比: <strong>“根据老王的线索, 凡是发现有身高七尺五寸的男性, 都要抓过来审问”</strong> 这一整个动作可以被认为是一个 aspect.</li></ul><p>或则我们也可以从语法的角度来简单类比一下. 我们在学英语时, 经常会接触什么 <code>定语</code>, <code>被动句</code> 之类的概念, 那么可以做一个不严谨的类比, 即 <code>joinpoint</code> 可以认为是一个 <code>宾语</code>, 而 <code>pointcut</code> 则可以类比为修饰 <code>joinpoint</code> 的定语, 那么整个 <code>aspect</code> 就可以描述为: <code>满足 pointcut 规则的 joinpoint 会被添加相应的 advice 操作.</code></p><hr><h2 id="AspectJ-支持"><a href="#AspectJ-支持" class="headerlink" title="@AspectJ 支持"></a>@AspectJ 支持</h2><p><strong><code>@AspectJ</code></strong> 是一种使用 Java 注解来实现 AOP 的编码风格。</p><p>@AspectJ 风格的 AOP 是 AspectJ Project 在 AspectJ 5 中引入的, 并且 Spring 也支持 @AspectJ 的 AOP 风格.</p><h3 id="使能-AspectJ-支持"><a href="#使能-AspectJ-支持" class="headerlink" title="使能 @AspectJ 支持"></a>使能 @AspectJ 支持</h3><p>@AspectJ 可以以 XML 的方式或以注解的方式来使能, 并且不论以哪种方式使能@ASpectJ, 我们都必须保证 aspectjweaver.jar 在 classpath 中.</p><h4 id="使用-Java-Configuration-方式使能-AspectJ"><a href="#使用-Java-Configuration-方式使能-AspectJ" class="headerlink" title="使用 Java Configuration 方式使能@AspectJ"></a>使用 Java Configuration 方式使能@AspectJ</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-XML-方式使能-AspectJ"><a href="#使用-XML-方式使能-AspectJ" class="headerlink" title="使用 XML 方式使能@AspectJ"></a>使用 XML 方式使能@AspectJ</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy/&gt;</span><br></pre></td></tr></table></figure><h3 id="定义-aspect-切面"><a href="#定义-aspect-切面" class="headerlink" title="定义 aspect(切面)"></a>定义 aspect(切面)</h3><p>当使用注解 <strong>@Aspect</strong> 标注一个 Bean 后, 那么 Spring 框架会自动收集这些 Bean, 并添加到 Spring AOP 中, 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">注意, 仅仅使用<span class="meta">@Aspect</span> 注解, 并不能将一个 Java 对象转换为 Bean, 因此我们还需要使用类似 <span class="meta">@Component</span> 之类的注解.` `注意, 如果一个 类被<span class="meta">@Aspect</span> 标注, 则这个类就不能是其他 aspect 的 **advised object** 了, 因为使用 <span class="meta">@Aspect</span> 后, 这个类就会被排除在 auto-proxying 机制之外.</span><br></pre></td></tr></table></figure><h3 id="声明-pointcut"><a href="#声明-pointcut" class="headerlink" title="声明 pointcut"></a>声明 pointcut</h3><p>一个 pointcut 的声明由两部分组成:</p><ul><li>一个方法签名, 包括方法名和相关参数</li><li>一个 pointcut 表达式, 用来指定哪些方法执行是我们感兴趣的(即因此可以织入 advice).</li></ul><p>在@AspectJ 风格的 AOP 中, 我们使用一个方法来描述 pointcut, 即:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.xys.service.UserService.*(..))&quot;)</span> <span class="comment">// 切点表达式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dataAccessOperation</span><span class="params">()</span> &#123;&#125; <span class="comment">// 切点前面</span></span><br></pre></td></tr></table></figure><p><code>这个方法必须无返回值.</code> <code>这个方法本身就是 pointcut signature, pointcut 表达式使用@Pointcut 注解指定.</code> 上面我们简单地定义了一个 pointcut, 这个 pointcut 所描述的是: 匹配所有在包 <strong>com.xys.service.UserService</strong> 下的所有方法的执行.</p><h4 id="切点标志符-designator"><a href="#切点标志符-designator" class="headerlink" title="切点标志符(designator)"></a>切点标志符(designator)</h4><p>AspectJ5 的切点表达式由标志符(designator)和操作参数组成. 如 “execution(* greetTo(..))” 的切点表达式, <strong>execution</strong> 就是 标志符, 而圆括号里的 <strong>*</strong>greetTo(..) 就是操作参数</p><h5 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h5><p>匹配 join point 的执行, 例如 “execution(* hello(..))” 表示匹配所有目标类中的 hello() 方法. 这个是最基本的 pointcut 标志符.</p><h5 id="within"><a href="#within" class="headerlink" title="within"></a>within</h5><p>匹配特定包下的所有 join point, 例如 <code>within(com.xys.*)</code> 表示 com.xys 包中的所有连接点, 即包中的所有类的所有方法. 而<code>within(com.xys.service.*Service)</code> 表示在 com.xys.service 包中所有以 Service 结尾的类的所有的连接点.</p><h5 id="this-与-target"><a href="#this-与-target" class="headerlink" title="this 与 target"></a>this 与 target</h5><p>this 的作用是匹配一个 bean, 这个 bean(Spring AOP proxy) 是一个给定类型的实例(instance of). 而 target 匹配的是一个目标对象(target object, 即需要织入 advice 的原始的类), 此对象是一个给定类型的实例(instance of).</p><h5 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h5><p>匹配 bean 名字为指定值的 bean 下的所有方法, 例如:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bean(*Service) // 匹配名字后缀为 Service 的 bean 下的所有方法</span><br><span class="line">bean(myService) // 匹配名字为 myService 的 bean 下的所有方法</span><br></pre></td></tr></table></figure><h5 id="args"><a href="#args" class="headerlink" title="args"></a>args</h5><p>匹配参数满足要求的的方法. 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;within(com.xys.demo2.*)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut2</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(value = &quot;pointcut2()  &amp;&amp;  args(name)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;---page: &#123;&#125;---&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;---NormalService: someMethod invoked---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;---NormalService: test invoked---&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务一切正常&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 NormalService.test 执行时, 则 advice <code>doSomething</code> 就会执行, test 方法的参数 name 就会传递到 <code>doSomething</code> 中.</p><p>常用例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配只有一个参数 name 的方法</span></span><br><span class="line"><span class="meta">@Before(value = &quot;aspectMethod()  &amp;&amp;  args(name)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(String name)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配第一个参数为 name 的方法</span></span><br><span class="line"><span class="meta">@Before(value = &quot;aspectMethod()  &amp;&amp;  args(name, ..)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(String name)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配第二个参数为 name 的方法</span></span><br><span class="line">Before(value = <span class="string">&quot;aspectMethod()  &amp;&amp;  args(*, name, ..)&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(String name)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h5><p>匹配由指定注解所标注的方法, 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;@annotation(com.xys.demo1.AuthChecker)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则匹配由注解 <code>AuthChecker</code> 所标注的方法.</p><h4 id="常见的切点表达式"><a href="#常见的切点表达式" class="headerlink" title="常见的切点表达式"></a>常见的切点表达式</h4><h5 id="匹配方法签名"><a href="#匹配方法签名" class="headerlink" title="匹配方法签名"></a>匹配方法签名</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 匹配指定包中的所有的方法</span><br><span class="line">execution(* com.xys.service.*(..))</span><br><span class="line"></span><br><span class="line">// 匹配当前包中的指定类的所有方法</span><br><span class="line">execution(* UserService.*(..))</span><br><span class="line"></span><br><span class="line">// 匹配指定包中的所有 public 方法</span><br><span class="line">execution(public * com.xys.service.*(..))</span><br><span class="line"></span><br><span class="line">// 匹配指定包中的所有 public 方法, 并且返回值是 int 类型的方法</span><br><span class="line">execution(public int com.xys.service.*(..))</span><br><span class="line"></span><br><span class="line">// 匹配指定包中的所有 public 方法, 并且第一个参数是 String, 返回值是 int 类型的方法</span><br><span class="line">execution(public int com.xys.service.*(String name, ..))</span><br></pre></td></tr></table></figure><h5 id="匹配类型签名"><a href="#匹配类型签名" class="headerlink" title="匹配类型签名"></a>匹配类型签名</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 匹配指定包中的所有的方法, 但不包括子包</span><br><span class="line">within(com.xys.service.*)</span><br><span class="line"></span><br><span class="line">// 匹配指定包中的所有的方法, 包括子包</span><br><span class="line">within(com.xys.service..*)</span><br><span class="line"></span><br><span class="line">// 匹配当前包中的指定类中的方法</span><br><span class="line">within(UserService)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 匹配一个接口的所有实现类中的实现的方法</span><br><span class="line">within(UserDao+)</span><br></pre></td></tr></table></figure><h5 id="匹配-Bean-名字"><a href="#匹配-Bean-名字" class="headerlink" title="匹配 Bean 名字"></a>匹配 Bean 名字</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 匹配以指定名字结尾的 Bean 中的所有方法</span><br><span class="line">bean(*Service)</span><br></pre></td></tr></table></figure><h5 id="切点表达式组合"><a href="#切点表达式组合" class="headerlink" title="切点表达式组合"></a>切点表达式组合</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 匹配以 Service 或 ServiceImpl 结尾的 bean</span><br><span class="line">bean(*Service || *ServiceImpl)</span><br><span class="line"></span><br><span class="line">// 匹配名字以 Service 结尾, 并且在包 com.xys.service 中的 bean</span><br><span class="line">bean(*Service) &amp;&amp; within(com.xys.service.*)</span><br></pre></td></tr></table></figure><h3 id="声明-advice"><a href="#声明-advice" class="headerlink" title="声明 advice"></a>声明 advice</h3><p>advice 是和一个 pointcut 表达式关联在一起的, 并且会在匹配的 join point 的方法执行的前/后/周围 运行. <code>pointcut 表达式可以是简单的一个 pointcut 名字的引用, 或者是完整的 pointcut 表达式</code>. 下面我们以几个简单的 advice 为例子, 来看一下一个 advice 是如何声明的.</p><h4 id="Before-advice"><a href="#Before-advice" class="headerlink" title="Before advice"></a>Before advice</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiongyongshun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@created</span> 16/9/9 13:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeforeAspectTest</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.xys.service.UserService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dataAccessOperation</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdviseDefine</span> &#123;</span><br><span class="line">    <span class="comment">// 定义 advise</span></span><br><span class="line">    <span class="meta">@Before(&quot;com.xys.aspect.PointcutDefine.dataAccessOperation()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBeforeAccessCheck</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*****Before advise, method: &quot;</span> + joinPoint.getSignature().toShortString() + <span class="string">&quot; *****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里, <strong>@Before</strong> 引用了一个 pointcut, 即 “com.xys.aspect.PointcutDefine.dataAccessOperation()” 是一个 pointcut 的名字. 如果我们在 advice 在内置 pointcut, 则可以:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdviseDefine</span> &#123;</span><br><span class="line">    <span class="comment">// 将 pointcut 和 advice 同时定义</span></span><br><span class="line">    <span class="meta">@Before(&quot;within(com.xys.service..*)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAccessCheck</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*****doAccessCheck, Before advise, method: &quot;</span> + joinPoint.getSignature().toShortString() + <span class="string">&quot; *****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="around-advice"><a href="#around-advice" class="headerlink" title="around advice"></a>around advice</h4><p>around advice 比较特别, 它可以在一个方法的之前之前和之后添加不同的操作, 并且甚至可以决定何时, 如何, 是否调用匹配到的方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdviseDefine</span> &#123;</span><br><span class="line">    <span class="comment">// 定义 advise</span></span><br><span class="line">    <span class="meta">@Around(&quot;com.xys.aspect.PointcutDefine.dataAccessOperation()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doAroundAccessCheck</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        <span class="comment">// 开始</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">retVal</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        <span class="comment">// 结束</span></span><br><span class="line">        System.out.println(<span class="string">&quot;invoke method: &quot;</span> + pjp.getSignature().getName() + <span class="string">&quot;, elapsed time: &quot;</span> + stopWatch.getTotalTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>around advice 和前面的 before advice 差不多, 只是我们把注解 <strong>@Before</strong> 改为了 <strong>@Around</strong> 了.</p><hr><h2 id="基于注解的-AOP-配置方式"><a href="#基于注解的-AOP-配置方式" class="headerlink" title="基于注解的 AOP 配置方式"></a>基于注解的 AOP 配置方式</h2><p><strong>切面类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.enjoy.cap10.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="comment">//日志切面类</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//什么这个类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspects</span> &#123;</span><br><span class="line">    <span class="comment">//@Pointcut声明切入点</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(public int com.enjoy.cap10.aop.Calculator.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@before代表在目标方法执行前切入, 并指定在哪个方法前切入</span></span><br><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logStart</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;除法运行....参数列表是:&#123;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logEnd</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;除法结束......&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logReturn</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;除法正常返回......运行结果是:&#123;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterThrowing(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logException</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;运行异常......异常信息是:&#123;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">Around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;@Arount:执行目标方法之前...&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> proceedingJoinPoint.proceed();<span class="comment">//相当于开始调div地</span></span><br><span class="line">System.out.println(<span class="string">&quot;@Arount:执行目标方法之后...&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>目标方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.enjoy.cap10.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"><span class="comment">//业务逻辑方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> i/j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.enjoy.cap10.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.enjoy.cap10.aop.Calculator;</span><br><span class="line"><span class="keyword">import</span> com.enjoy.cap10.aop.LogAspects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cap10MainConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Calculator <span class="title function_">calculator</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LogAspects <span class="title function_">logAspects</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogAspects</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cap10Test</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Cap10MainConfig.class);</span><br><span class="line"><span class="type">Calculator</span> <span class="variable">c</span> <span class="operator">=</span> app.getBean(Calculator.class);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> c.div(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">app.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Arount:执行目标方法之前...</span><br><span class="line">除法运行....参数列表是:&#123;&#125;</span><br><span class="line">--------</span><br><span class="line">@Arount:执行目标方法之后...</span><br><span class="line">除法结束......</span><br><span class="line">除法正常返回......运行结果是:&#123;&#125;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><hr><h2 id="AOP-源码赏析"><a href="#AOP-源码赏析" class="headerlink" title="AOP 源码赏析"></a>AOP 源码赏析</h2><blockquote><p>在这个注解比较流行的年代里,当我们想要使用 spring 的某些功能时只需要加上一行代码就可以了,比如:</p><ul><li>@EnableAspectJAutoProxy 开启 AOP</li><li>@EnableTransactionManagement 开启 spring 事务管理,</li><li>@EnableCaching 开启 spring 缓存</li><li>@EnableWebMvc 开启 webMvc</li></ul><p>对于我们使用者而言十分简单便利,然而,其背后所做的事,却远远比一个注解复杂的多了,本篇只是简略的介绍一下@EnableAspectJAutoProxy 背后所发生的那些事,了解其工作原理,才能更好的运用,并从中领略大师的智慧.</p></blockquote><p>废话不多说,先来看一下源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(AspectJAutoProxyRegistrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAspectJAutoProxy &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed</span></span><br><span class="line"><span class="comment">     * to standard Java interface-based proxies. The default is &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicate that the proxy should be exposed by the AOP framework as a &#123;<span class="doctag">@code</span> ThreadLocal&#125;</span></span><br><span class="line"><span class="comment">     * for retrieval via the &#123;<span class="doctag">@link</span> org.springframework.aop.framework.AopContext&#125; class.</span></span><br><span class="line"><span class="comment">     * Off by default, i.e. no guarantees that &#123;<span class="doctag">@code</span> AopContext&#125; access will work.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 4.3.1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exposeProxy</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>英文注解已经很详细了,这里简单介绍一下两个参数,一个是控制 aop 的具体实现方式,为 true 的话使用 cglib,为 false 的话使用 java 的 Proxy,默认为 false,第二个参数控制代理的暴露方式,解决内部调用不能使用代理的场景，默认为 false.</p><p>这里核心是@Import(AspectJAutoProxyRegistrar.class);在 AspectJAutoProxyRegistrar 里,核心的地方是</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br></pre></td></tr></table></figure><blockquote><p>一个 AOP 的工具类,这个工具类的主要作用是把 AnnotationAwareAspectJAutoProxyCreator 这个类定义为 BeanDefinition 放到 spring 容器中,这是通过实现 ImportBeanDefinitionRegistrar 接口来装载的,具体装载过程不是本篇的重点,这里就不赘述,我们重点看 AnnotationAwareAspectJAutoProxyCreator 这个类.</p><p>首先看看这个类图:</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/20190415091218213.png" alt=""></p><p><strong>从类图是可以大致了解 AnnotationAwareAspectJAutoProxyCreator 这个类的功能.它实现了一系列 Aware 的接口,在 Bean 装载的时候获取 BeanFactory(Bean 容器),Bean 的 ClassLoader,还实现了 order 接口,继承了 PorxyConfig,ProxyConfig 中主要封装了代理的通用处理逻辑,比如设置目标类,设置使用 cglib 还是 java proxy 等一些基础配置.</strong></p><p>而能够让这个类参与到 bean 初始化功能,并为 bean 添加代理功能的还是因为它实现了 BeanPostProcessor 这个接口.这个接口的 postProcessAfterInitialization 方法会在 bean 初始化结束后(赋值完成)被调用<em>。</em></p><p>这里先看一下最顶部的抽象类:AbstractAutoProxyCreator,这个抽象类主要抽象了实现代理的逻辑:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主要看这个方法，在bean初始化之后对生产出的bean进行包装</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">cacheKey</span> <span class="operator">=</span> getCacheKey(bean.getClass(), beanName);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line"><span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wrapIfNecessary</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (beanName != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Boolean.FALSE.equals(<span class="built_in">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create proxy if we have advice.</span></span><br><span class="line">        <span class="comment">// 意思就是如果该类有advice则创建proxy，</span></span><br><span class="line">Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">            <span class="comment">// 1.通过方法名也能简单猜测到，这个方法就是把bean包装为proxy的主要方法，</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> createProxy(</span><br><span class="line">bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> <span class="title class_">SingletonTargetSource</span>(bean));</span><br><span class="line"><span class="built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.返回该proxy代替原来的bean</span></span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>1）将 AnnotationAwareAspectJAutoProxyCreator 注册到 Spring 容器中</strong></li><li><strong>2）AnnotationAwareAspectJAutoProxyCreator 类的 postProcessAfterInitialization()方法将所有有 advice 的 bean 重新包装成 proxy</strong></li></ul><hr><h2 id="创建-proxy-过程分析"><a href="#创建-proxy-过程分析" class="headerlink" title="创建 proxy 过程分析"></a>创建 proxy 过程分析</h2><p>​ 通过之前的代码结构分析，我们知道，所有的 bean 在返回给用户使用之前都需要经过 AnnotationAwareAspectJAutoProxyCreator 类的 postProcessAfterInitialization()方法，而该方法的主要作用也就是将所有拥有 advice 的 bean 重新包装为 proxy，那么我们接下来直接分析这个包装为 proxy 的方法即可，看一下 bean 如何被包装为 proxy，proxy 在被调用方法时，是具体如何执行的</p><p><strong>以下是 AbstractAutoProxyCreator.wrapIfNecessary(Object bean, String beanName, Object cacheKey)中的 createProxy()代码片段分析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">createProxy</span><span class="params">(</span></span><br><span class="line"><span class="params">Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="built_in">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建proxyFactory，proxy的生产主要就是在proxyFactory做的</span></span><br><span class="line"><span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">proxyFactory.copyFrom(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line"><span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">proxyFactory.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.将当前bean适合的advice，重新封装下，封装为Advisor类，然后添加到ProxyFactory中</span></span><br><span class="line">Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line"><span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">proxyFactory.addAdvisor(advisor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxyFactory.setTargetSource(targetSource);</span><br><span class="line">customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">proxyFactory.setFrozen(<span class="built_in">this</span>.freezeProxy);</span><br><span class="line"><span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">proxyFactory.setPreFiltered(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.调用getProxy获取bean对应的proxy</span></span><br><span class="line"><span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TargetSource 中存放被代理的对象,这段代码主要是为了构建 ProxyFactory,将配置信息(是否使用 java proxy,是否 threadlocal 等),目标类,切面,传入 ProxyFactory 中</p></blockquote><h3 id="创建何种类型的-Proxy？JDKProxy-还是-CGLIBProxy？"><a href="#创建何种类型的-Proxy？JDKProxy-还是-CGLIBProxy？" class="headerlink" title="创建何种类型的 Proxy？JDKProxy 还是 CGLIBProxy？"></a><strong>创建何种类型的 Proxy？JDKProxy 还是 CGLIBProxy？</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getProxy()方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// createAopProxy()方法就是决定究竟创建何种类型的proxy</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title function_">createAopProxy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.active) &#123;</span><br><span class="line">activate();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 关键方法createAopProxy()</span></span><br><span class="line"><span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// createAopProxy()</span></span><br><span class="line"><span class="keyword">public</span> AopProxy <span class="title function_">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException &#123;</span><br><span class="line">        <span class="comment">// 1.config.isOptimize()是否使用优化的代理策略，目前使用与CGLIB</span></span><br><span class="line">        <span class="comment">// config.isProxyTargetClass() 是否目标类本身被代理而不是目标类的接口</span></span><br><span class="line">        <span class="comment">// hasNoUserSuppliedProxyInterfaces()是否存在代理接口</span></span><br><span class="line"><span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line"><span class="keyword">if</span> (targetClass == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AopConfigException</span>(<span class="string">&quot;TargetSource cannot determine target class: &quot;</span> +</span><br><span class="line"><span class="string">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.如果目标类是接口或者是代理类，则直接使用JDKproxy</span></span><br><span class="line"><span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.其他情况则使用CGLIBproxy</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjenesisCglibAopProxy</span>(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getProxy-方法"><a href="#getProxy-方法" class="headerlink" title="getProxy()方法"></a><strong>getProxy()方法</strong></h3><blockquote><p>由上面可知，通过 createAopProxy()方法来确定具体使用何种类型的 Proxy，针对于该示例，我们具体使用的为 JdkDynamicAopProxy，下面来看下 JdkDynamicAopProxy.getProxy()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">JdkDynamicAopProxy</span> <span class="keyword">implements</span> <span class="title class_">AopProxy</span>, InvocationHandler, Serializable<span class="comment">// JdkDynamicAopProxy类结构，由此可知，其实现了InvocationHandler，则必定有invoke方法，来被调用，也就是用户调用bean相关方法时，此invoke()被真正调用</span></span><br><span class="line">    <span class="comment">// getProxy()</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Creating JDK dynamic proxy: target source is &quot;</span> + <span class="built_in">this</span>.advised.getTargetSource());</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class="built_in">this</span>.advised, <span class="literal">true</span>);</span><br><span class="line">findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK proxy 动态代理的标准用法</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="invoke-方法"><a href="#invoke-方法" class="headerlink" title="invoke()方法"></a><strong>invoke()方法</strong></h3><blockquote><p>以上的代码模式可以很明确的看出来，使用了 JDK 动态代理模式，真正的方法执行在 invoke()方法里，下面我们来看下该方法，来看下 bean 方法如何被代理执行的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">MethodInvocation invocation;</span><br><span class="line"><span class="type">Object</span> <span class="variable">oldProxy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">setProxyContext</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">TargetSource</span> <span class="variable">targetSource</span> <span class="operator">=</span> <span class="built_in">this</span>.advised.targetSource;</span><br><span class="line">Class&lt;?&gt; targetClass = <span class="literal">null</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 1.以下的几个判断，主要是为了判断method是否为equals、hashCode等Object的方法</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line"><span class="comment">// The target does not implement the equals(Object) method itself.</span></span><br><span class="line"><span class="keyword">return</span> equals(args[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line"><span class="comment">// The target does not implement the hashCode() method itself.</span></span><br><span class="line"><span class="keyword">return</span> hashCode();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (method.getDeclaringClass() == DecoratingProxy.class) &#123;</span><br><span class="line"><span class="comment">// There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span></span><br><span class="line"><span class="keyword">return</span> AopProxyUtils.ultimateTargetClass(<span class="built_in">this</span>.advised);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line"><span class="comment">// Service invocations on ProxyConfig with the proxy config...</span></span><br><span class="line"><span class="keyword">return</span> AopUtils.invokeJoinpointUsingReflection(<span class="built_in">this</span>.advised, method, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object retVal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.advised.exposeProxy) &#123;</span><br><span class="line"><span class="comment">// Make invocation available if necessary.</span></span><br><span class="line">oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">setProxyContext = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// May be null. Get as late as possible to minimize the time we &quot;own&quot; the target,</span></span><br><span class="line"><span class="comment">// in case it comes from a pool.</span></span><br><span class="line">target = targetSource.getTarget();</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">targetClass = target.getClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取当前bean被拦截方法链表</span></span><br><span class="line">List&lt;Object&gt; chain = <span class="built_in">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.如果为空，则直接调用target的method</span></span><br><span class="line"><span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">&#125;</span><br><span class="line">           <span class="comment">// 4.不为空，则逐一调用chain中的每一个拦截方法的proceed</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// We need to create a method invocation...</span></span><br><span class="line">invocation = <span class="keyword">new</span> <span class="title class_">ReflectiveMethodInvocation</span>(proxy, target, method, args, targetClass, chain);</span><br><span class="line"><span class="comment">// Proceed to the joinpoint through the interceptor chain.</span></span><br><span class="line">retVal = invocation.proceed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截方法真正被执行调用-invocation-proceed"><a href="#拦截方法真正被执行调用-invocation-proceed" class="headerlink" title="拦截方法真正被执行调用 invocation.proceed()"></a><strong>拦截方法真正被执行调用 invocation.proceed()</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">//We start with an index of -1 and increment early.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.currentInterceptorIndex == <span class="built_in">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> invokeJoinpoint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">interceptorOrInterceptionAdvice</span> <span class="operator">=</span></span><br><span class="line"><span class="built_in">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="built_in">this</span>.currentInterceptorIndex);</span><br><span class="line"><span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line"><span class="comment">// Evaluate dynamic method matcher here: static part will already have</span></span><br><span class="line"><span class="comment">// been evaluated and found to match.</span></span><br><span class="line"><span class="type">InterceptorAndDynamicMethodMatcher</span> <span class="variable">dm</span> <span class="operator">=</span></span><br><span class="line">(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line"><span class="keyword">if</span> (dm.methodMatcher.matches(<span class="built_in">this</span>.method, <span class="built_in">this</span>.targetClass, <span class="built_in">this</span>.arguments)) &#123;</span><br><span class="line"><span class="keyword">return</span> dm.interceptor.invoke(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Dynamic matching failed.</span></span><br><span class="line"><span class="comment">// Skip this interceptor and invoke the next in the chain.</span></span><br><span class="line"><span class="keyword">return</span> proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// It&#x27;s an interceptor, so we just invoke it: The pointcut will have</span></span><br><span class="line"><span class="comment">// been evaluated statically before this object was constructed.</span></span><br><span class="line"><span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结 4：依次遍历拦截器链的每个元素，然后调用其实现，将真正调用工作委托给各个增强器</p></blockquote><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a><strong>总结：</strong></h3><p>纵观以上过程可知：实际就是为 bean 创建一个 proxy，JDKproxy 或者 CGLIBproxy，然后在调用 bean 的方法时，会通过 proxy 来调用 bean 方法</p><p>重点过程可分为：</p><p><strong>1）将 AnnotationAwareAspectJAutoProxyCreator 注册到 Spring 容器中</strong></p><p><strong>2）AnnotationAwareAspectJAutoProxyCreator 类的 postProcessAfterInitialization()方法将所有有 advice 的 bean 重新包装成 proxy</strong></p><p><strong>3）调用 bean 方法时通过 proxy 来调用，proxy 依次调用增强器的相关方法，来实现方法切入</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/20190415112857658.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5注解</title>
      <link href="/posts/b6dbc3f5.html"/>
      <url>/posts/b6dbc3f5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最近在看 B 站颜群老师的课程，Javaweb&gt;spring&gt;springMVC&gt;mybatis&gt;spring 高级，一路走来，跌跌撞撞，发现 spring 也不过尔尔，说白了，spring 就是想尽办法将 new 做的更简单，更完美，更可配置。</p><p>Spring 的一个核心功能是 IOC，就是将 Bean 初始化加载到容器中，Bean 是如何加载到容器的，可以使用 Spring 注解方式或者 Spring XML 配置方式。</p><p>Spring 注解方式减少了配置文件内容，更加便于管理，并且使用注解可以大大提高了开发效率！</p><p>注解本身是没有功能的，和 xml 一样，注解和 xml 都是一种元数据，元数据即解释数据的数据，也就是所谓的配置。</p></blockquote><h3 id="xml-和注解的最佳实践："><a href="#xml-和注解的最佳实践：" class="headerlink" title="xml 和注解的最佳实践："></a>xml 和注解的最佳实践：</h3><blockquote><ul><li>xml 用来管理 bean；</li><li>注解只负责完成属性的注入；</li></ul></blockquote><h3 id="使用注解唯一需要注意的就是，必须开启注解的支持："><a href="#使用注解唯一需要注意的就是，必须开启注解的支持：" class="headerlink" title="使用注解唯一需要注意的就是，必须开启注解的支持："></a>使用注解唯一需要注意的就是，必须开启注解的支持：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//扫描指定包下的全部的标有@Component的类，并注册成bean.</span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.guo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Spring-的常用注解"><a href="#Spring-的常用注解" class="headerlink" title="Spring 的常用注解"></a>Spring 的常用注解</h2><h3 id="给容器中注入组件"><a href="#给容器中注入组件" class="headerlink" title="给容器中注入组件"></a>给容器中注入组件</h3><blockquote><p>包扫描+组件标注注解</p><p>@<strong>Component</strong>：泛指各种组件</p><p>@<strong>Controller</strong>、@<strong>Service</strong>、@<strong>Repository</strong>都可以称为@<strong>Component</strong>。</p><p>@<strong>Controller</strong>：控制层</p><p>@<strong>Service</strong>：业务层</p><p>@<strong>Repository</strong>：数据访问层</p><p>@<strong>Bean</strong>: 导入第三方包里面的注解</p><p>@<strong>Import</strong>(要导入到容器中的组件)；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Color.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig2</span> &#123;</span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Bean(&quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是Person&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;素小暖&quot;</span>,<span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@<strong>ImportSelector</strong>：返回需要导入的组件的全类名数组；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * AnnotationMetadata：当前类的注解信息</span></span><br><span class="line"><span class="comment">    * BeanDefinitionRegistry：BeanDefinition注册类</span></span><br><span class="line"><span class="comment">    * 把所有需要添加到容器中的bean，调用BeanDefinitionRegistry.registerBeanDefinition手动注入</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">definition</span> <span class="operator">=</span> registry.containsBeanDefinition(<span class="string">&quot;com.atguigu.bean.Red&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">definition2</span> <span class="operator">=</span> registry.containsBeanDefinition(<span class="string">&quot;com.atguigu.bean.Blue&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(definition &amp;&amp; definition2)&#123;</span><br><span class="line">            <span class="comment">//指定bean定义信息（bean的类型，bean的scope）</span></span><br><span class="line">            <span class="type">RootBeanDefinition</span> <span class="variable">rootBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(RainBow.class);</span><br><span class="line">            <span class="comment">//注册一个bean，指定bean名</span></span><br><span class="line">            registry.registerBeanDefinition(<span class="string">&quot;rainBow&quot;</span>,rootBeanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 spring 提供的<strong>FactoryBean</strong>（工厂 Bean）</p><ul><li>默认获取到的是工厂<strong>Bean</strong>调用<strong>getObject</strong>创建的对象</li><li>要获取工厂<strong>Bean</strong>本身，需要在 id 前面加一个&amp;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ColorFactoryBean <span class="title function_">colorFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ColorFactoryBean</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个spring定义的FactoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Color&gt; &#123;</span><br><span class="line">    <span class="comment">//返回一个Color对象，并将Color添加到容器中</span></span><br><span class="line">    <span class="keyword">public</span> Color <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ColorFactoryBean,getObject()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Color.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="注入-bean-的注解"><a href="#注入-bean-的注解" class="headerlink" title="注入 bean 的注解"></a>注入 bean 的注解</h3><blockquote><p>@<strong>Autowired</strong>：由 bean 提供</p><ul><li>@Autowired 可以作用在变量、setter 方法、构造函数上；</li><li>有个属性为 required，可以配置为 false；</li></ul><p>@<strong>Inject</strong>：由 JSR-330 提供</p><ul><li>@Inject 用法和@Autowired 一样。</li></ul><p>@<strong>Resource</strong>：由 JSR-250 提供</p><p>@<strong>Autowired</strong>、@<strong>Inject</strong>是默认按照类型匹配的，@<strong>Resource</strong>是按照名称匹配的，@<strong>Autowired</strong>如果需要按照名称匹配需要和@<strong>Qualifier</strong>一起使用，@Inject 和@Name 一起使用。</p><p>@<strong>Primary</strong></p><p>让<strong>spring</strong>进行自动装配的时候，默认使用首选的<strong>bean</strong>，和@<strong>Qualifier</strong>一个效果。</p></blockquote><h3 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore"></a>@JsonIgnore</h3><blockquote><ol><li>作用: 在 json 序列化时将 java bean 中的一些属性忽略掉，序列化和反序列化都受影响。</li><li>使用方法: 一般标记在属性或者方法上，返回的 json 数据即不包含该属性。</li><li>注解失效:如果注解失效，可能是因为你使用的是 fastJson，尝试使用对应的注解来忽略字段，注解为：@JSONField(serialize = false)，使用方法一样。</li></ol></blockquote><h3 id="初始化和销毁方法"><a href="#初始化和销毁方法" class="headerlink" title="初始化和销毁方法"></a>初始化和销毁方法</h3><blockquote><ol><li>通过@Bean(initMethod=”init”,destoryMethod=”destory”)方法</li><li>通过 bean 实现 InitializingBean 来定义初始化逻辑，DisposableBean 定义销毁逻辑</li><li>可以使用 JSR250：@PostConstruct：初始化方法；@PreDestory：销毁方法。</li><li>BeanPostProcessor：bean 的后置处理器，在 bean 初始化前后进行一些处理工作</li><li>postProcessBeforeInitialization：在初始化之前工作；</li><li>postProcessAfterInitialization：在初始化工作之后工作；</li></ol></blockquote><p>Java 配置类相关注解</p><blockquote><p>@<strong>Configuration</strong></p><p>声明当前类为配置类；</p><p>@<strong>Bean</strong></p><p>注解在方法上，声明当前方法的返回值为一个 bean，替代 xml 中的方式；</p><p>@<strong>ComponentScan</strong></p><p>用于对<strong>Component</strong>进行扫描；</p></blockquote><h3 id="切面（AOP）相关注解"><a href="#切面（AOP）相关注解" class="headerlink" title="切面（AOP）相关注解"></a>切面（AOP）<strong>相关注解</strong></h3><blockquote><p><a href="https://SerMs.github.io/post/a528d135">Spring AOP 详细介绍</a></p><p>Spring 支持<strong>AspectJ</strong>的注解式切面编程。</p><p>@<strong>Aspect</strong> 声明一个切面</p><p>@<strong>After</strong> 在方法执行之后执行（方法上）</p><p>@<strong>Before</strong> 在方法执行之前执行（方法上）</p><p>@<strong>Around</strong> 在方法执行之前与之后执行（方法上）</p><p>@<strong>PointCut</strong> 声明切点</p><p>在 java 配置类中使用@<strong>EnableAspectJAutoProxy</strong>注解开启<strong>Spring</strong>对<strong>AspectJ</strong>代理的支持</p></blockquote><p>@Bean 的属性支持</p><blockquote><p>@<strong>Scope</strong>设置类型包括：</p><p>设置 Spring 容器如何新建 Bean 实例（方法上，得有@<strong>Bean</strong>）</p><p>① <strong>Singleton</strong></p><p>（单例,一个 Spring 容器中只有一个 bean 实例，默认模式）,</p><p>② <strong>Protetype</strong></p><p>（每次调用新建一个 bean）,</p><p>③ <strong>Request</strong></p><p>（web 项目中，给每个 http request 新建一个 bean）,</p><p>④ <strong>Session</strong></p><p>（web 项目中，给每个 http session 新建一个 bean）,</p><p>⑤ <strong>GlobalSession</strong></p><p>（给每一个 global http session 新建一个 Bean 实例）</p></blockquote><h3 id="Value-注解"><a href="#Value-注解" class="headerlink" title="@Value 注解"></a>@Value 注解</h3><blockquote><p>支持如下方式的注入：</p><ul><li>注入普通字符</li><li>注入操作系统属性</li><li>注入表达式结果</li><li>注入其它 bean 属性</li><li>注入文件资源</li><li>注入网站资源</li><li>注入配置文件</li></ul><p>@<strong>Value</strong>三种情况的用法。</p><ol><li>${}是去找外部配置的参数，将值赋过来</li><li>#{}是 SpEL 表达式，去寻找对应变量的内容</li><li>#{}直接写字符串就是将字符串的值注入进去</li></ol></blockquote><h3 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h3><blockquote><p>@<strong>Profile</strong></p><p>指定组件在哪个环境的情况下才能被注册到容器中，不指定，任何环境下都能注册这个组件。</p><p>@<strong>Conditional</strong></p><p>通过实现 Condition 接口，并重写 matches 方法，从而决定该 bean 是否被实例化。</p></blockquote><h3 id="异步相关"><a href="#异步相关" class="headerlink" title="异步相关"></a>异步相关</h3><blockquote><p>@<strong>EnableAsync</strong></p><p>配置类中通过此注解开启对异步任务的支持；</p><p>@<strong>Async</strong></p><p>在实际执行的 bean 方法使用该注解来声明其是一个异步任务（方法上或类上所有的方法都将异步，需要@EnableAsync 开启异步任务）</p></blockquote><h3 id="定时任务相关"><a href="#定时任务相关" class="headerlink" title="定时任务相关"></a>定时任务相关</h3><blockquote><p>@<strong>EnableScheduling</strong></p><p>在配置类上使用，开启计划任务的支持（类上）</p><p>@<strong>Scheduled</strong></p><p>来申明这是一个任务，包括 cron,fixDelay,fixRate 等类型（方法上，需先开启计划任务的支持）</p></blockquote><h2 id="SpringMVC-常用注解"><a href="#SpringMVC-常用注解" class="headerlink" title="SpringMVC 常用注解"></a>SpringMVC 常用注解</h2><blockquote><h3 id="1、-EnableWebMvc"><a href="#1、-EnableWebMvc" class="headerlink" title="1、@EnableWebMvc"></a>1、@EnableWebMvc</h3><p>在配置类中开启 Web MVC 的配置支持。</p><h3 id="2、-Controller"><a href="#2、-Controller" class="headerlink" title="2、@Controller"></a>2、@Controller</h3><p>3、@RequestMapping<br>用于映射 web 请求，包括访问路径和参数。</p><h3 id="4、-ResponseBody"><a href="#4、-ResponseBody" class="headerlink" title="4、@ResponseBody"></a>4、@ResponseBody</h3><p>支持将返回值放到 response 内，而不是一个页面，通常用户返回 json 数据。</p><h3 id="5、-RequestBody"><a href="#5、-RequestBody" class="headerlink" title="5、@RequestBody"></a>5、@RequestBody</h3><p>允许 request 的参数在 request 体中，而不是在直接连接的地址后面。（放在参数前）</p><h3 id="6、-PathVariable"><a href="#6、-PathVariable" class="headerlink" title="6、@PathVariable"></a>6、@PathVariable</h3><p>用于接收路径参数，比如@RequestMapping(“/hello/{name}”)声明的路径，将注解放在参数前，即可获取该值，通常作为 Restful 的接口实现方法。</p><h3 id="7、-RestController"><a href="#7、-RestController" class="headerlink" title="7、@RestController"></a>7、@RestController</h3><p>该注解为一个组合注解，相当于@Controller 和@ResponseBody 的组合，注解在类上，意味着，该 Controller 的所有方法都默认加上了@ResponseBody。</p><h3 id="8、-ControllerAdvice"><a href="#8、-ControllerAdvice" class="headerlink" title="8、@ControllerAdvice"></a>8、@ControllerAdvice</h3><p>全局异常处理<br>全局数据绑定<br>全局数据预处理</p><h3 id="9、-ExceptionHandler"><a href="#9、-ExceptionHandler" class="headerlink" title="9、@ExceptionHandler"></a>9、@ExceptionHandler</h3><p>用于全局处理控制器里的异常。</p><h3 id="10、-InitBinder"><a href="#10、-InitBinder" class="headerlink" title="10、@InitBinder"></a>10、@InitBinder</h3><p>用来设置 WebDataBinder，WebDataBinder 用来自动绑定前台请求参数到 Model 中。</p><h3 id="11、-ModelAttribute"><a href="#11、-ModelAttribute" class="headerlink" title="11、@ModelAttribute"></a>11、@ModelAttribute</h3><p>（1）@ModelAttribute 注释方法</p><p>如果把@ModelAttribute 放在方法的注解上时，代表的是：该 Controller 的所有方法在调用前，先执行此@ModelAttribute 方法。可以把这个@ModelAttribute 特性，应用在 BaseController 当中，所有的 Controller 继承 BaseController，即可实现在调用 Controller 时，先执行@ModelAttribute 方法。比如权限的验证（也可以使用 Interceptor）等。</p><p>（2）@ModelAttribute 注释一个方法的参数</p><p>当作为方法的参数使用，指示的参数应该从模型中检索。如果不存在，它应该首先实例化，然后添加到模型中，一旦出现在模型中，参数字段应该从具有匹配名称的所有请求参数中填充。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDi四种依赖注入方式</title>
      <link href="/posts/7a5d2d7e.html"/>
      <url>/posts/7a5d2d7e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://npm.elemecdn.com/serms-assets/Spring/20200712213350.png" alt=""></p><h2 id="SpringDI（依赖注入）"><a href="#SpringDI（依赖注入）" class="headerlink" title="SpringDI（依赖注入）"></a>SpringDI（依赖注入）</h2><hr><h3 id="DI-概述"><a href="#DI-概述" class="headerlink" title="DI 概述"></a>DI 概述</h3><blockquote><h3 id="Dependency-Injection即为依赖注入，简称-DI-。"><a href="#Dependency-Injection即为依赖注入，简称-DI-。" class="headerlink" title="Dependency Injection即为依赖注入，简称 DI 。"></a><code>Dependency Injection</code><strong>即为依赖注入，简称 DI</strong> 。</h3><p>简单来说，在 Spring 创建对象的同时，为其属性赋值，称之为依赖注入。</p><p>形象来说，组件之间依赖关系由容器在运行期决定的，即由容器动态的将某个依赖关系注入到组件之中。</p></blockquote><h3 id="什么是-DI"><a href="#什么是-DI" class="headerlink" title="什么是 DI"></a>什么是 DI</h3><h4 id="了解-DI-的思想"><a href="#了解-DI-的思想" class="headerlink" title="了解 DI 的思想"></a>了解 DI 的思想</h4><blockquote><p>简单了解了 DI（依赖注入），在看依赖注入这个词，我们也可以将依赖注入以 IOC（控制反转）的形式拆分它。</p><p>顾名思义，依赖注入是由“依赖”和“注入”两个词汇组合而成，那么我们再一次顺藤摸瓜，分别分析这两个词语!</p></blockquote><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><blockquote><p>依赖一词，可以拆分成很多元素。比如说，达成依赖条件必须是<strong>两个对象</strong> ，<strong>谁依赖谁</strong> ，<strong>某一个对象依赖另一个对象的什么</strong> 。这里我们可以根据这几个条件列举出这几种情况：</p><ol><li>关于谁依赖与谁，当然是应用程序依赖于 IOC 容器。因为应用程序依赖于 IOC 容器提供的对象所需外部资源，所以就产生了这种依赖关系。（可以理解为入口，虽然不是这么严谨吧！）</li></ol></blockquote><h4 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h4><blockquote><p>注入一次，可以也可以拆分成很多元素。比如说，注入可以分解成<strong>谁注入谁</strong> ，<strong>注入了什么</strong> 。这里我们也可以根据这两个条件来列举出这几种情况：</p><ol><li>关于谁注入谁，身为容器的 IOC 肯定是被注入的对象，也就是说我们将所需要的对象注入到 IOC 容器中。至于注入了什么，很明显，就是我们项目中所需要的对象、资源、数据等等。简单来说，我们需要外部的资源既可以注入到 IOC 容器中，并由 IOC 容器来实现注入对象的控制反转！</li><li>IOC 的是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过 DI（Dependency Injection，依赖注入）来实现的。</li></ol></blockquote><h3 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h3><h4 id="Setter-方法注入"><a href="#Setter-方法注入" class="headerlink" title="Setter 方法注入"></a>Setter 方法注入</h4><blockquote><p>Setter 方法注入，它只需要提供对应的 Setter 方法接口实现注入，由于 JavaBean 一般都实现了 Setter 方法，所以 Setter 方法注入也成为了我们常用的注入方法之一。</p></blockquote><h5 id="定义-JavaBean"><a href="#定义-JavaBean" class="headerlink" title="定义 JavaBean"></a>定义 JavaBean</h5><blockquote><p>定义一个 JavaBean 并赋予其 Setter 方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mylifes1110.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lombok@Data注解提供了Setter方法</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer             id;</span><br><span class="line">    <span class="keyword">private</span> String              password;</span><br><span class="line">    <span class="keyword">private</span> String              sex;</span><br><span class="line">    <span class="keyword">private</span> Integer             age;</span><br><span class="line">    <span class="keyword">private</span> Date                bornDate;</span><br><span class="line">    <span class="keyword">private</span> String[]            hobbys;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt;         phones;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt;        names;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; countries;</span><br><span class="line">    <span class="keyword">private</span> Properties          files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注入各种数据类型"><a href="#注入各种数据类型" class="headerlink" title="注入各种数据类型"></a>注入各种数据类型</h5><blockquote><p>注意：Spring 底层对 Date 日期类型做了处理，默认处理格式为“yyyy/MM/dd”</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;User&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.bean.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入基本数据类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入日期类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bornDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1999/09/09&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数组类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Run<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Jump<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Climb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入List集合类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;names&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Ziph<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Join<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Marry<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入Set集合类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;phones&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>110<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>119<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>120<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入Properties类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;first&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;second&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;third&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入Map集合类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;countries&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;CHINA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;USA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;美国&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;UK&quot;</span> <span class="attr">value</span>=<span class="string">&quot;英国&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="注入自建类型数据"><a href="#注入自建类型数据" class="headerlink" title="注入自建类型数据"></a>注入自建类型数据</h5><blockquote><p>将 Service 层需要一个 Dao 层实现类对象，我们可以使用注入方式来实现对 Service 层和 Dao 层的对象关联</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>将创建的 Bean 对象注入到另一个对象中，比如一个 JavaBean 对象中作为了另一个 JavaBean 对象的属性</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--次要bean,被作为属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.bean.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;position&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上海市&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;zipCode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100001&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--主要bean,操作的主体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.bean.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--address属性引用address对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h4><blockquote><p>创建对象时，Spring 工厂会通过构造方法为对象的属性赋值。由于某些框架或者项目中并没有为 JavaBean 提供 Setter 方法，我们就可以利用其构造方法来注入。不要和我说，没有提供构造方法哈！（开个玩笑！）</p></blockquote><h5 id="定义-JavaBean-1"><a href="#定义-JavaBean-1" class="headerlink" title="定义 JavaBean"></a>定义 JavaBean</h5><blockquote><p>定义一个 JavaBean 对象，为其提供构造方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Constructors</span></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer id , String name , String sex , Integer age)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">          <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造方法注入-1"><a href="#构造方法注入-1" class="headerlink" title="构造方法注入"></a>构造方法注入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--构造注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 除标签名称有变化,其他均和Set注入一致 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h4><blockquote><p>不用在配置中 指定为哪个属性赋值，及赋什么值。由 spring 自动根据某个 “原则” ，在工厂中查找一个 bean，为属性注入属性值。</p></blockquote><h5 id="注入场景"><a href="#注入场景" class="headerlink" title="注入场景"></a>注入场景</h5><blockquote><p>将 Dao 层实现类对象注入到 Service 层并调用方法得以测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mylifes1110.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mylifes1110.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.mylifes1110.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.mylifes1110.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------insertUser and UserService------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userDao.insertUser(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自动注入的两种方式"><a href="#自动注入的两种方式" class="headerlink" title="自动注入的两种方式"></a>自动注入的两种方式</h5><blockquote><p>基于名称自动注入值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为UserServiceImpl中的属性基于名称自动注入值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.service.impl.userServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>基于类型自动注入值，根据实现的接口来判断并自动注入值，如果实现此接口的实现类太多，它会在很多实现此接口的实现类中选择名字相同的实现类进行注入。（现根据判断，如果不成功，则根据名称注入）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.dao.UserDaoImpl&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为UserServiceImpl中的属性基于类型自动注入值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解自动注入"><a href="#注解自动注入" class="headerlink" title="注解自动注入"></a>注解自动注入</h4><div class="table-container"><table><thead><tr><th style="text-align:left">注解名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">@Autowired</td><td style="text-align:left">基于类型自动注入</td></tr><tr><td style="text-align:left">@Resource</td><td style="text-align:left">基于名称自动注入</td></tr><tr><td style="text-align:left">@Qualifier(“userDAO”)</td><td style="text-align:left">限定要自动注入的 bean 的 id，一般和@Autowired 联用</td></tr><tr><td style="text-align:left">@Value</td><td style="text-align:left">注入简单类型数据 （jdk8 种基本数据类型+String 类型）</td></tr></tbody></table></div><blockquote><p>使用基于类型自动注入，将 Dao 层注入到 Service 层</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;   </span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//注入类型为UserDao的bean</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span> <span class="comment">//如果有多个类型为UserDao的bean,可以用此注解从中指定一个</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用基于名称自动注入，将 Dao 层注入到 Serivce 层</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;   </span><br><span class="line">    <span class="meta">@Resource(&quot;userDao&quot;)</span> <span class="comment">//注入id=“userDao”的bean</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用注入简单类型数据注解来完成简单注入 JavaBean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;1&quot;)</span>    <span class="comment">//注入数字</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Value(&quot;Ziph&quot;)</span> <span class="comment">//注入String</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-动态代理实现AOP(进阶)</title>
      <link href="/posts/a528d135.html"/>
      <url>/posts/a528d135.html</url>
      
        <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th style="text-align:center">相关推荐</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://spring.io/">Spring 官网</a></td></tr><tr><td style="text-align:center"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/index.html">Spring Framework 官方文档</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/spring-projects/spring-framework">spring-framework Github</a></td></tr><tr><td style="text-align:center"><a href="https://serms.top/post/841c624e/">SpringIOC 详解</a></td></tr><tr><td style="text-align:center"><a href="https://serms.top/post/9dadefec/">SpringAOP 详解</a></td></tr><tr><td style="text-align:center"></td></tr></tbody></table></div><h2 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h2><blockquote><p>动态代理其实就是<code>Java</code>中的一个方法，这个方法可以实现：</p><p><strong>动态创建一组指定的接口的实现对象（在运行时，创建实现了指定的一组接口的对象）</strong><br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="comment">//obj对象的类型实现了A和B两个接口</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> 方法(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;A.class, B.class&#125;)</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="动态代理初体验"><a href="#动态代理初体验" class="headerlink" title="动态代理初体验"></a>动态代理初体验</h2><blockquote><p>我们根据上面的思路来体验一下 Java 中的动态代理吧，首先我们要先写两个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;<span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>然后我们就先来看一下动态代理的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                     Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                          InvocationHandler h)</span></span><br><span class="line">    ```</span><br><span class="line"></span><br><span class="line">上面这个就是动态代理类（Proxy）类中的创建代理对象的方法，下面介绍一下方法的三个参数：</span><br><span class="line"></span><br><span class="line">+ `ClassLoader loader`：方法需要动态生成一个类，这个类实现了A和B两个接口，然后创建这个类的对象。需要生成一个类，而且这个类也需要加载到方法区中，所以我们需要一个`ClassLoader`来加载该类</span><br><span class="line">+ `Class&lt;?&gt;[] interfaces`：我们需要代理对象实现的数组</span><br><span class="line">+ `InvocationHandler h`：调用处理器</span><br><span class="line"></span><br><span class="line">这里你可能对`InvocationHandler`有疑惑，这里先买个关子，下面马上揭晓。</span><br><span class="line">我们现在就使用动态代理创建一个代理对象吧。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 三个参数</span></span><br><span class="line"><span class="comment">        * 1、ClassLoader</span></span><br><span class="line"><span class="comment">        * 方法需要动态生成一个类，这个类实现了A和B两个接口，然后创建这个类的对象</span></span><br><span class="line"><span class="comment">        * 需要生成一个类，这个类也需要加载到方法区中，所以我们需要一个ClassLoader来加载该类</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 2、Class[] interfaces</span></span><br><span class="line"><span class="comment">        * 我们需要代理对象实现的数组</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 3、InvocationHandler</span></span><br><span class="line"><span class="comment">        * 调用处理器</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">       <span class="comment">//这里创建一个空实现的调用处理器。</span></span><br><span class="line">       <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;A.class, B.class&#125;, invocationHandler);</span><br><span class="line">       <span class="comment">//强转为A和B接口类型，说明生成的代理对象实现了A和B接口</span></span><br><span class="line">       <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> (A) obj;</span><br><span class="line">       <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> (B) obj;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>经过测试代码运行成功，说明生成的代理对象确实实现了 A 接口和 B 接口，但是我想你一定会对代理对象如何实现了 A 接口和 B 接口感兴趣，你一定想知道如果使用代理对象调用相应接口的方法会发生什么感兴趣，下面我们一起来探究一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上面代码的基础上加上下面的代码</span><br><span class="line">a.a();</span><br><span class="line">b.b();</span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/webp.png" alt=""></p><p>我们可以发现什么也没有发生。这是因为我们根本没有为代理对象添加实现逻辑。可是实现逻辑添加在哪里呢？哈哈，当然是<code>InvocationHandler</code>中了。下面就看一看添加了实现逻辑的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 三个参数</span></span><br><span class="line"><span class="comment">        * 1、ClassLoader</span></span><br><span class="line"><span class="comment">        * 方法需要动态生成一个类，这个类实现了A和B两个接口，然后创建这个类的对象</span></span><br><span class="line"><span class="comment">        * 需要生成一个类，这个类也需要加载到方法区中，所以我们需要一个ClassLoader来加载该类</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 2、Class[] interfaces</span></span><br><span class="line"><span class="comment">        * 我们需要代理对象实现的数组</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 3、InvocationHandler</span></span><br><span class="line"><span class="comment">        * 调用处理器</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 代理对象实现的所有接口中的方法，内容都是调用InvocationHandler的invoke()方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">    <span class="comment">//这里创建一个空实现的调用处理器。</span></span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好！！！！&quot;</span>);<span class="comment">//注意这里添加了一点小逻辑</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;A.class, B.class&#125;, invocationHandler);</span><br><span class="line">    <span class="comment">//强转为A和B接口类型，说明生成的代理对象实现了A和B接口</span></span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> (A) obj;</span><br><span class="line">    <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> (B) obj;</span><br><span class="line"></span><br><span class="line">   a.a();</span><br><span class="line">    b.b();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>截图如下：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/02.png" alt=""></p><p>这里我们发现 A 接口和 B 接口的实现逻辑都是调用了<code>invoke</code>这个方法中的逻辑，其实除了调用代理对象的<code>native</code>方法，调用代理对象的其他所有方法本质都是调用了<code>invoke</code>方法，下面我们再来看第三个实例，让我们对动态代理有更深刻的认识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 三个参数</span></span><br><span class="line"><span class="comment">        * 1、ClassLoader</span></span><br><span class="line"><span class="comment">        * 方法需要动态生成一个类，这个类实现了A和B两个接口，然后创建这个类的对象</span></span><br><span class="line"><span class="comment">        * 需要生成一个类，这个类也需要加载到方法区中，所以我们需要一个ClassLoader来加载该类</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 2、Class[] interfaces</span></span><br><span class="line"><span class="comment">        * 我们需要代理对象实现的数组</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 3、InvocationHandler</span></span><br><span class="line"><span class="comment">        * 调用处理器</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 代理对象实现的所有接口中的方法，内容都是调用InvocationHandler的invoke()方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">    <span class="comment">//这里创建一个空实现的调用处理器。</span></span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好！！！！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;<span class="comment">//这里改为返回&quot;Hello&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;A.class, B.class&#125;, invocationHandler);</span><br><span class="line">    <span class="comment">//强转为A和B接口类型，说明生成的代理对象实现了A和B接口</span></span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> (A) obj;</span><br><span class="line">    <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> (B) obj;</span><br><span class="line">    a.toString();<span class="comment">//注意这里调用了toString()方法</span></span><br><span class="line">    b.getClass();<span class="comment">//注意这里调用了getClass()方法</span></span><br><span class="line">    <span class="comment">//这里在A接口中添加了一个方法public Object aaa(String s1, int i);</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">hello</span> <span class="operator">=</span> a.aaa(<span class="string">&quot;Hello&quot;</span>, <span class="number">100</span>);</span><br><span class="line">    System.out.println(obj.getClass());<span class="comment">//这里看一下代理对象是什么</span></span><br><span class="line">    System.out.println(hello);<span class="comment">//这里看一下返回值是什么</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/03.png" alt=""></p><p>通过代码的结果我们大胆的猜测一下，代理对象方法的返回值其实就是<code>invoke</code>方法的返回值，代理对象其实就是使用反射机制实现的一个运行时对象。哈哈，当然这些肯定不是猜测了，其实确实就是这样。下面是时候总结一下<code>InvocationHandler</code>的<code>invoke</code>方法了。如下图所示：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/06.png" alt=""></p><p>当我们调用代理对象的方法时，其对应关系就如上图所示。</p></blockquote><hr><h2 id="初步实现-AOP"><a href="#初步实现-AOP" class="headerlink" title="初步实现 AOP"></a>初步实现 AOP</h2><blockquote><p>在我们对动态代理有了一定的认识之后，我们就可以实现最基本版本的 AOP 了，当然，这是一个非常残缺的 AOP 实现，甚至都不能称之为 AOP 实现。<br>我们先写一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by Yifan Jia on 2018/6/5.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//服务生</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Waiter</span> &#123;</span><br><span class="line">    <span class="comment">//服务方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后给出该接口的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by Yifan Jia on 2018/6/5.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManWaiter</span> <span class="keyword">implements</span> <span class="title class_">Waiter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们就通过动态代理来对上面的<code>ManWaiter</code>进行增强：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by Yifan Jia on 2018/6/5.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Waiter</span> <span class="variable">waiter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManWaiter</span>();</span><br><span class="line">        waiter.server();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Waiter</span> <span class="variable">manWaiter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManWaiter</span>();</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">        Class[] interfaces = &#123;Waiter.class&#125;;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WaiterInvocationHandler</span>(manWaiter);</span><br><span class="line">        <span class="comment">//得到代理对象，代理对象就是在目标对象的基础上进行了增强的对象</span></span><br><span class="line">        <span class="type">Waiter</span> <span class="variable">waiter</span> <span class="operator">=</span> (Waiter) Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        waiter.server();<span class="comment">//前面添加“你好”，后面添加“再见”</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaiterInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Waiter waiter;</span><br><span class="line"></span><br><span class="line">    WaiterInvocationHandler(Waiter waiter) &#123;</span><br><span class="line">        <span class="built_in">this</span>.waiter = waiter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        waiter.server();<span class="comment">//调用目标对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;再见&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/04.png" alt=""></p><p>你肯定要说了，这算什么 AOP，增强的代码都是硬编码到<code>invoke</code>方法中的，大家稍安勿躁，我们不是已经对需要增强的对象做了增强吗。这里可以的目标对象为<code>manWaiter</code>，增强为<code>System.out.println(&quot;你好&quot;);</code>和<code>System.out.println(&quot;再见&quot;);</code>，切点为<code>server()</code>方法调用。其实还是可以看做一下原始的 AOP 的。</p></blockquote><h2 id="完善的-AOP-实现"><a href="#完善的-AOP-实现" class="headerlink" title="完善的 AOP 实现"></a>完善的 AOP 实现</h2><blockquote><p>我们从初步实现的 AOP 中可以发现很多问题，比如我们不能把增强的逻辑硬编码到代码中，我们需要实现可变的增强，下面我们就解决一下这些问题，来实现一个比较完善的 AOP。<br>我们仍然引用上面的<code>Waiter</code>接口和<code>Manwaiter</code>实现类。<br>然后我们添加一个前置增强接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 前置增强</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeforeAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再添加一个后置增强接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AfterAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把产生代理对象的代码封装为一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.regexp.internal.RE;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ProxFactory用来生成代理对象</span></span><br><span class="line"><span class="comment">* 它需要所有的参数：目标对象，增强，</span></span><br><span class="line"><span class="comment">* Created by Yifan Jia on 2018/6/5.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1、创建代理工厂</span></span><br><span class="line"><span class="comment">* 2、给工厂设置目标对象、前置增强、后置增强</span></span><br><span class="line"><span class="comment">* 3、调用creatProxy()得到代理对象</span></span><br><span class="line"><span class="comment">* 4、执行代理对象方法时，先执行前置增强，然后是目标方法，最后是后置增强</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//其实在Spring中的AOP的动态代理实现的一个织入器也是叫做ProxyFactory</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object targetObject;<span class="comment">//目标对象</span></span><br><span class="line">    <span class="keyword">private</span> BeforeAdvice beforeAdvice;<span class="comment">//前值增强</span></span><br><span class="line">    <span class="keyword">private</span> AfterAdvice afterAdvice;<span class="comment">//后置增强</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用来生成代理对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 给出三个参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//获取当前类型所实现的所有接口类型</span></span><br><span class="line">        Class[] interfaces = targetObject.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                * 在调用代理对象的方法时，会执行这里的内容</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span>(beforeAdvice != <span class="literal">null</span>) &#123;</span><br><span class="line">                    beforeAdvice.before();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(targetObject, args);<span class="comment">//调用目标对象的目标方法</span></span><br><span class="line">                <span class="comment">//执行后续增强</span></span><br><span class="line">                afterAdvice.after();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//返回目标对象的返回值</span></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 2、得到代理对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxyObject</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxyObject;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//get和set方法略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们将相关的参数注入到<code>ProxyFactory</code>后就可以通过<code>creatProxy()</code>方法获取代理对象了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by Yifan Jia on 2018/6/5.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tset1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();<span class="comment">//创建工厂</span></span><br><span class="line">        proxyFactory.setTargetObject(<span class="keyword">new</span> <span class="title class_">ManWaiter</span>());<span class="comment">//设置目标对象</span></span><br><span class="line">        <span class="comment">//设置前置增强</span></span><br><span class="line">        proxyFactory.setBeforeAdvice(<span class="keyword">new</span> <span class="title class_">BeforeAdvice</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户你好&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//设置后置增强</span></span><br><span class="line">        proxyFactory.setAfterAdvice(<span class="keyword">new</span> <span class="title class_">AfterAdvice</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户再见&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Waiter</span> <span class="variable">waiter</span> <span class="operator">=</span> (Waiter) proxyFactory.creatProxy();</span><br><span class="line">        waiter.server();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Spring/05.png" alt=""></p><p>这时候我们已经可以自定义任意的增强逻辑了，是不是很神奇。</p></blockquote><h2 id="动态代理实现-AOP-总结"><a href="#动态代理实现-AOP-总结" class="headerlink" title="动态代理实现 AOP 总结"></a>动态代理实现 AOP 总结</h2><blockquote><p>通过上面的内容，我们已经通过动态代理实现了一个非常简陋的 AOP，这里的 AOP 实现还是有很多的不足之处。下面我把 Spring 中的<code>ProxyFactory</code>实现贴出来，大家可以研究一下 Spring 中的<code>ProxyFactory</code>的优势在哪里，另外，Spring 中还有其他的基于动态代理实现的织入器，<code>ProxyFactory</code>只是其中最基础的版本，大家有兴趣可以研究一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> <span class="keyword">extends</span> <span class="title class_">ProxyCreatorSupport</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">()</span> &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">            Assert.notNull(target, <span class="string">&quot;Target object must not be null&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.setInterfaces(ClassUtils.getAllInterfaces(target));</span><br><span class="line">            <span class="built_in">this</span>.setTarget(target);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Class... proxyInterfaces)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setInterfaces(proxyInterfaces);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Class&lt;?&gt; proxyInterface, Interceptor interceptor)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.addInterface(proxyInterface);</span><br><span class="line">            <span class="built_in">this</span>.addAdvice(interceptor);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Class&lt;?&gt; proxyInterface, TargetSource targetSource)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.addInterface(proxyInterface);</span><br><span class="line">            <span class="built_in">this</span>.setTargetSource(targetSource);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.createAopProxy().getProxy();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.createAopProxy().getProxy(classLoader);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Class&lt;T&gt; proxyInterface, Interceptor interceptor)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(proxyInterface, interceptor)).getProxy();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Class&lt;T&gt; proxyInterface, TargetSource targetSource)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(proxyInterface, targetSource)).getProxy();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(TargetSource targetSource)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(targetSource.getTargetClass() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot create class proxy for TargetSource with null target class&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">                proxyFactory.setTargetSource(targetSource);</span><br><span class="line">                proxyFactory.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> proxyFactory.getProxy();</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 后端开发 </category>
          
          <category> Spring全家桶 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat Premium15安装与激活(完整激活版)</title>
      <link href="/posts/b6bbba88.html"/>
      <url>/posts/b6bbba88.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先需要到官网进行下载"><a href="#首先需要到官网进行下载" class="headerlink" title="首先需要到官网进行下载"></a><strong>首先需要到官网进行下载</strong></h2><hr><blockquote><p>破解安装的是 15 版本的别下错了</p><p>官网目前最高版本是<code>V16</code>版本,如果找不到 15 版的话,对应的下载链接已经安利在下面了</p><p>下载安装的步骤就不多说了,直接 next 下一步 —跳过~</p></blockquote><p>Windows10 64bit: <a href="http://download.navicat.com/download/navicat150_premium_cs_x64.exe">http://download.navicat.com/download/navicat150_premium_cs_x64.exe</a></p><hr><p><em>免责声明：本人学生党一枚，本篇博客是从网络中搜集借鉴整理的，仅供个人学习使用，未用于商业用途，对于产生的一切不良后果概不负责，进来借鉴学习的朋友也仅供个人学习，如果侵害了您的权益请立即联系博主，博主会立即删除本文，谢谢(O ^ ~ ^ O)。</em></p><hr><h2 id="Navicat-Premium15-破解过程"><a href="#Navicat-Premium15-破解过程" class="headerlink" title="Navicat Premium15 破解过程"></a><strong>Navicat Premium15 破解过程</strong></h2><h3 id="首先需要下载注册工具"><a href="#首先需要下载注册工具" class="headerlink" title="首先需要下载注册工具"></a>首先需要下载注册工具</h3><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/01.png" alt=""></p><blockquote><p>注册工具: <a href="https://pan.baidu.com/s/1nsYWtBmnBa4Y25ntK-AQ6A?pwd=yyds">https://pan.baidu.com/s/1nsYWtBmnBa4Y25ntK-AQ6A?pwd=yyds</a></p><p>直接双击运行注册工具（本人在未断网未关闭防火墙情况下成功），选择对应的 navicat 版本，此处为 v15,点击 Path 选择刚才安装 navicat 目录下的 navicat.exe 文件</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/02.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/03png" alt=""></p><p><strong>出现此界面表示成功</strong></p></blockquote><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/04.png" alt=""></p><blockquote><p>此处有部分朋友反应解压时工具会被自动删除，因为工具的特殊性，可能会被防护软件监测为病毒删除</p><p>为了保险起见可关闭网络和防火强，若安装了其他防护软件如电脑管家也要一并关闭，并将 windows 的实时保护关闭</p></blockquote><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/05.png" alt=""></p><blockquote><p><strong>选择对应的版本和语言，输入 Your Name 和 Your Organization（可随意输入，也可以不修改使用默认的）,点击生成注册码，然后运行 Navicat 将注册码复制到软注册栏</strong></p></blockquote><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/06.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/07.png" alt=""></p><blockquote><p><strong>点击激活</strong></p><p>此处部分人的激活码后面显示的是红叉，可能是由于上面步骤操作不规范</p><p>未显示 cracked 就启动了 navicate、版本选择不匹配，Patch 未选择等原因，可删除软件和安装目录后重新按照步骤安装</p></blockquote><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/08.png" alt=""></p><p><strong>选择手动激活</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/09.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/10.png" alt=""></p><p><strong>将请求码复制到注册工具的 Request Code 中，点击 Generate</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/11.png" alt=""></p><p><strong>返回 activation code 即为成功</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/12.png" alt=""></p><p><strong>此时手动激活页面的激活码会被自动填充，点击激活即可</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/13.png" alt=""></p><p>​ <strong>至此，Navicat Premium15 的激活已经完成</strong></p><p><strong>若激活失败可以卸载 Navicat Premium 删除安装目录后重新尝试几次</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/14.png" alt=""></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/15.png" alt=""></p><p><strong>激活完成就可以开始使用 Navicat 了 (~ v *)</strong></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/Navicat/16.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 工具与软件 </category>
          
          <category> 数据库工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea安装Ultimate最新版[破解]</title>
      <link href="/posts/bb6ff07f.html"/>
      <url>/posts/bb6ff07f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言:</p><p>前段时间电脑重装了,于是去 Intellij 官网下了一个 IntelliJ IDEA Edu 版本,但是 Edu 的这个版本好想没有 Spring config,经过我一番查询,发现只有 Ultimate 版本才有…..而且不管是社区版还是 Edu 版很多功能都是不齐全的,所以索性就弄个终极版算了</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/01.png" alt="01"></p><p>在网上找了半天发现很多破解的都不行,什么注册码,什么破解器,而且有的套路都好深….让你加公众号回复 6666 领取破解码…..一次就算了,没想到他把破解码分两次,第二段破解码在另外一个公众号,害,真是一言难尽,后面终于还是通过不懈的努力给破解了,今天就把这个方法分享给大家</p><p>破解过程:是通过屏蔽官方的网络校验，达到永久激活的目的。亲测有效，方法也比较简单，下面是详细的图文教程</p><p>声明：本 IntellIj IDEA 激活破解教程，用到的激活补丁均来自网络，请勿商用，仅供个人使用，如有侵权，请联系作者删除。大家如果资金允许的话，最好购买正版</p><p>教程适用 2021.3.2 版本,更新日期在文本头部,后面如果出了 3.3 的版本就不知道能不能适用了,但目前最高版本是 3.2</p></blockquote><hr><p>idea 版本类别:</p><div class="table-container"><table><thead><tr><th style="text-align:center">版本类别</th><th style="text-align:center">注解</th></tr></thead><tbody><tr><td style="text-align:center">Ultimate</td><td style="text-align:center">终极版</td></tr><tr><td style="text-align:center">Community</td><td style="text-align:center">社区版</td></tr><tr><td style="text-align:center">IDEA Edu</td><td style="text-align:center">学生教育版</td></tr></tbody></table></div><blockquote><p>目前最高版本是 2021.3.2 的版本</p></blockquote><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/idea版本.png" alt="image-20220310090056430"></p><hr><h2 id="1-下载-Idea"><a href="#1-下载-Idea" class="headerlink" title="1.下载 Idea"></a>1.下载 Idea</h2><blockquote><p>直接去官方下载最新版就行了,注意是 Ultimate 版本,别下错了</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/02.png" alt="02"></p></blockquote><p>如果还分不清那个是 Ultimate 版,就 <a class="btn-anzhiyu outline blue larger" href="https://www.jetbrains.com/idea/download/download-thanks.html?platform=windows"   title="点我下载"><i class="far fa-hand-point-right"></i><span>点我下载</span></a></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/image-20220309215122241.png" alt=""></p><hr><h2 id="2-下载激活破解补丁"><a href="#2-下载激活破解补丁" class="headerlink" title="2. 下载激活破解补丁"></a>2. 下载激活破解补丁</h2><blockquote><p>为了方便适用,我打包放到了百度网盘里面</p></blockquote><a class="btn-anzhiyu outline blue larger" href="https://pan.baidu.com/s/14ebA6x85epkUECJsigA-2Q?pwd=yyds"   title="点我下载补丁"><i class="far fa-hand-point-right"></i><span>点我下载补丁</span></a><hr><h2 id="3-解压"><a href="#3-解压" class="headerlink" title="3.解压"></a>3.解压</h2><blockquote><p>下载之后进行解压，会看到如下一个目录（建议将整个目录移动到一个稳定的地方，不会被误删的）<mark class="hl-label blue">不要放在有中文的目录下</mark> </p></blockquote><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/03.png" alt="03"></p><blockquote><p><code>ja-netfilter.jar</code> <mark class="hl-label blue">这个文件后面激活破解IDEA的时候要用到，注意一下</mark> </p></blockquote><hr><h2 id="4-开始破解"><a href="#4-开始破解" class="headerlink" title="4. 开始破解"></a>4. 开始破解</h2><h3 id="激活之前需要先进入到-IDEA-中"><a href="#激活之前需要先进入到-IDEA-中" class="headerlink" title="激活之前需要先进入到 IDEA 中"></a>激活之前需要先进入到 IDEA 中</h3><blockquote><p>很多小伙伴说新版的已经没有试用 30 天了，其实只要注册个账号登录授权一下，IDEA 就会送你 30 天的试用时间</p><p>有些小伙伴可能之前已经试用了 30 天，进不去 IDEA 了，没关系 后面会给出解决办法<br>选择 <mark class="hl-label red">`Start trial`</mark> 然后点击<code>Log In to JetBrains Account</code></p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/image-20220310092151939.png" alt="image-20220310092151939"></p><p>这个时候会自动打开你的浏览器，你只需要登录你的账号（没有的话可以去注册，或者使用 GitHub、GitLab、Google 账号登录）</p></blockquote><h3 id="登录之后，会提示授权成功"><a href="#登录之后，会提示授权成功" class="headerlink" title="登录之后，会提示授权成功"></a>登录之后，会提示授权成功</h3><p><img src="https://pic.imgdb.cn/item/61d5aed52ab3f51d918c2df8.jpg" alt="img"></p><blockquote><p>之后，回到 IDEA 界面中，点击下图中标注的<code>Start Trial</code>，然后就可以免费试用 30 天了。</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/61d5aed52ab3f51d918c2df8.jpg" alt="image-20220310092419734"></p><p>然后随便创建一个项目，进入到 IDEA 界面中，点击菜单栏中的<code>Help</code>，然后点击<code>Edit Custom VM Options</code><br>然后在打开的 vmoptions 文件中进行配置</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/image-20220309222921ss898.png" alt="image-20220309222921ss898"></p><h2 id="配置-IDEA-激活破解补丁-gt-gt-gt-gt-重要"><a href="#配置-IDEA-激活破解补丁-gt-gt-gt-gt-重要" class="headerlink" title="配置 IDEA 激活破解补丁&gt;&gt;&gt;&gt;重要"></a>配置 IDEA 激活破解补丁&gt;&gt;&gt;&gt;重要</h2><p>在上面打开的文件中，配置下载的补丁文件中的 <code>ja-netfilter</code> 路径<br>语法为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ja-netfilter:[ja-netfilter.jar路径]</span><br></pre></td></tr></table></figure><p>举个例子:比如我解压到了 E 盘，如下图所示</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/image-20220310093046362.png" alt="image-20220310093046362"></p><p>那我配置的内容就应该是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="attr">javaagent</span>:<span class="attr">E</span>:\<span class="title class_">Program</span> <span class="title class_">Files</span>\<span class="title class_">JetBrains</span>\ja-netfilter\\ja-netfilter.<span class="property">jar</span></span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/image-20220310093432046.png" alt="image-20220310093432046"></p><p>配置完之后保存（ctrl + s） ，关闭 IDEA（重启），再次打开 IDEA</p><p>打开之后我们在检查一下是否激活成功:</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/image-20220310093624328.png" alt="image-20220310093624328"></p><p>可以看到我已经激活到了 9 万年,也不知道我能不能活这么久</p><p>总结一句话:用到死….</p><p>最后我们在看一下,有没有 Spring config:</p><p><img src="https://npm.elemecdn.com/serms-assets@1.0.6/pojie/image-20220309222921898.png" alt="image-20220309222921898"></p><p>好像还多了很多东西呢哈哈哈~</p></blockquote><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5.补充"></a>5.补充</h2><p>从上面可以看到我激活到了 9 万年？ Licensed 的名字为 NoBug，其实这个都可以自定义的。<br>大家直接打开下载的 IDEA 激活补丁中的<code>janf_config.txt</code> 在里面修改就可以啦</p><p>最后，祝大家都可以成功的激活 IDEA!</p>]]></content>
      
      
      <categories>
          
          <category> 工具与软件 </category>
          
          <category> IDE配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习笔记</title>
      <link href="/posts/7fd48667.html"/>
      <url>/posts/7fd48667.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、MyBatis-简介"><a href="#一、MyBatis-简介" class="headerlink" title="一、MyBatis 简介"></a>一、MyBatis 简介</h2><hr><h3 id="1-MyBatis-历史"><a href="#1-MyBatis-历史" class="headerlink" title="1. MyBatis 历史"></a>1. MyBatis 历史</h3><p>MyBatis 最初是 Apache 的一个开源项目 iBatis, 2010 年 6 月这个项目由 Apache Software Foundation 迁 移到了 Google Code。随着开发团队转投 Google Code 旗下， iBatis3.x 正式更名为 MyBatis。代码于 2013 年 11 月迁移到 Github。</p><p>iBatis 一词来源于“internet”和“abatis”的组合，是一个基于 Java 的持久层框架。 iBatis 提供的持久层框架 包括 SQL Maps 和 Data Access Objects（DAO）。</p><hr><h3 id="2-MyBatis-特性"><a href="#2-MyBatis-特性" class="headerlink" title="2. MyBatis 特性"></a>2. MyBatis 特性</h3><p>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</p><p>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</p><p>3） MyBatis 可以使用简单的 XML 或注解用于配置和原始映射，将接口和 Java 的 POJO（Plain Old Java Objects，普通的 Java 对象）映射成数据库中的记录</p><p>4） MyBatis 是一个 半自动的 ORM（Object Relation Mapping）框架</p><hr><h3 id="3-MyBatis-下载"><a href="#3-MyBatis-下载" class="headerlink" title="3. MyBatis 下载"></a>3. MyBatis 下载</h3><blockquote><a class="btn-anzhiyu outline blue larger" href="https://github.com/mybatis/mybatis-3"   title="点我下载"><i class="far fa-hand-point-right"></i><span>点我下载</span></a></blockquote><hr><h3 id="4-和其它持久化层技术对比"><a href="#4-和其它持久化层技术对比" class="headerlink" title="4. 和其它持久化层技术对比"></a>4. 和其它持久化层技术对比</h3><ul><li>JDBC<ul><li>SQL 夹杂在 Java 代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java 代码专注业务、SQL 语句专注数据</li><li>开发效率稍逊于 HIbernate，但是完全能够接受</li></ul></li></ul><hr><h2 id="二、搭建-MyBatis"><a href="#二、搭建-MyBatis" class="headerlink" title="二、搭建 MyBatis"></a>二、搭建 MyBatis</h2><h3 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h3><blockquote><p>IDE：idea 2019.2</p><p>构建工具：maven 3.5.4</p><p>MySQL 版本：MySQL 5.7</p><p>MyBatis 版本：MyBatis 3.5.7</p></blockquote><hr><h3 id="2-创建-maven-工程"><a href="#2-创建-maven-工程" class="headerlink" title="2. 创建 maven 工程"></a>2. 创建 maven 工程</h3><p>​ a&gt;打包方式：jar</p><p>​ b&gt;引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>将来整合Spring 之后,这个配置文件可以省略，所以大家操作时可以直接复制、粘贴, 核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</span><br></pre></td></tr></table></figure><hr><h3 id="3-创建-MyBatis-的核心配置文件"><a href="#3-创建-MyBatis-的核心配置文件" class="headerlink" title="3. 创建 MyBatis 的核心配置文件"></a>3. 创建 MyBatis 的核心配置文件</h3><mark class="hl-label mybatis-config.xml,这个文件名仅仅只是建议,并非强制要求。将来整合">习惯上命名为</mark> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="4、创建-mapper-接口"><a href="#4、创建-mapper-接口" class="headerlink" title="4、创建 mapper 接口"></a>4、创建 mapper 接口</h3><blockquote><p>MyBatis 中的 mapper 接口相当于以前的 dao。但是区别在于，mapper 仅仅是接口，我们不需要 提供实现类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加用户信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5、创建-MyBatis-的映射文件"><a href="#5、创建-MyBatis-的映射文件" class="headerlink" title="5、创建 MyBatis 的映射文件"></a>5、创建 MyBatis 的映射文件</h3><p>相关概念：ORM（Object Relationship Mapping）对象关系映射。</p><ol><li>对象：Java 的实体类对象</li><li>关系：关系型数据库</li><li>映射：二者之间的对应关系</li></ol><div class="table-container"><table><thead><tr><th>Java 概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段/列</td></tr><tr><td>对象</td><td>记录/行</td></tr></tbody></table></div><blockquote><p>1、映射文件的命名规则： 表所对应的实体类的类名+Mapper.xml 例如：表 t_user，映射的实体类为 User，所对应的映射文件为 UserMapper.xml 因此一个映射文件对应一个实体类，对应一张表的操作 MyBatis 映射文件用于编写 SQL，访问以及操作表中的数据 MyBatis 映射文件存放的位置是 src/main/resources/mappers 目录下</p><p>2、MyBatis 中可以面向接口操作数据，要保证两个一致： a&gt;mapper 接口的全类名和映射文件的命名空间（namespace）保持一致 b&gt;mapper 接口中方法的方法名和映射文件中编写 SQL 的标签的 id 属性保持一致</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="6、通过-junit-测试功能"><a href="#6、通过-junit-测试功能" class="headerlink" title="6、通过 junit 测试功能"></a>6、通过 junit 测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line"><span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span></span><br><span class="line">映射文件中的SQL标签，并执行标签中的SQL语句</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line"><span class="comment">//sqlSession.commit();</span></span><br><span class="line">System.out.println(<span class="string">&quot;结果：&quot;</span>+result);</span><br></pre></td></tr></table></figure><blockquote><ul><li>SqlSession：代表 Java 程序和数据库之间的会话。（HttpSession 是 Java 程序和浏览器之间的 会话）</li><li>SqlSessionFactory：是“生产”SqlSession 的“工厂”。</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的 相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</li></ul></blockquote><hr><h3 id="7、加入-log4j-日志功能"><a href="#7、加入-log4j-日志功能" class="headerlink" title="7、加入 log4j 日志功能"></a>7、加入 log4j 日志功能</h3><h4 id="a-gt-加入依赖"><a href="#a-gt-加入依赖" class="headerlink" title="a&gt;加入依赖"></a>a&gt;加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="b-gt-加入-log4j-的配置文件"><a href="#b-gt-加入-log4j-的配置文件" class="headerlink" title="b&gt;加入 log4j 的配置文件"></a>b&gt;加入 log4j 的配置文件</h4><blockquote><mark class="hl-label default">log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</mark> </blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">%m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="日志的级别"><a href="#日志的级别" class="headerlink" title="日志的级别"></a>日志的级别</h3><mark class="hl-label 从左到右打印的内容越来越详细">FATAL(致命)>ERROR(错误)>WARN(警告)>INFO(信息)>DEBUG(调试)</mark> </blockquote><hr><h2 id="三、核心配置文件详解"><a href="#三、核心配置文件详解" class="headerlink" title="三、核心配置文件详解"></a>三、核心配置文件详解</h2><blockquote><p>核心配置文件中的标签必须按照固定的顺序：</p><p>==properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorF actory?,plugins?,environments?,databaseIdProvider?,mappers?==</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    typeAlias：设置某个具体的类型的别名</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    type：需要设置别名的类型的全类名</span></span><br><span class="line"><span class="comment">    alias：设置此类型的别名，若不设置此属性，该类型拥有默认的别名，即类名且不区分大小</span></span><br><span class="line"><span class="comment">    写</span></span><br><span class="line"><span class="comment">    若设置此属性，此时该类型的别名只能使用alias所设置的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;abc&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：设置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environment：设置具体的连接数据库的环境信息</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，</span></span><br><span class="line"><span class="comment">    表示默认使用的环境</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">    type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span></span><br><span class="line"><span class="comment">    type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    dataSource：设置数据源</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">    type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从</span></span><br><span class="line"><span class="comment">    缓存中直接获取，不需要重新创建</span></span><br><span class="line"><span class="comment">    type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span></span><br><span class="line"><span class="comment">    type=&quot;JNDI&quot;：调用上下文中的数据源</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span></span><br><span class="line"><span class="comment">        注意：此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、MyBatis-的增删改查"><a href="#四、MyBatis-的增删改查" class="headerlink" title="四、MyBatis 的增删改查"></a>四、MyBatis 的增删改查</h2><h3 id="1、添加"><a href="#1、添加" class="headerlink" title="1、添加"></a>1、添加</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、删除"><a href="#2、删除" class="headerlink" title="2、删除"></a>2、删除</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">delete from t_user where id = 7</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、修改"><a href="#3、修改" class="headerlink" title="3、修改"></a>3、修改</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">update t_user set username=&#x27;ybc&#x27;,password=&#x27;123&#x27; where id = 6</span><br><span class="line">&lt;/update</span><br></pre></td></tr></table></figure><h3 id="4、查询一个实体类对象"><a href="#4、查询一个实体类对象" class="headerlink" title="4、查询一个实体类对象"></a>4、查询一个实体类对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、查询集合"><a href="#5、查询集合" class="headerlink" title="5、查询集合"></a>5、查询集合</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1、查询的标签 select 必须设置属性 resultType 或 resultMap，用于设置实体类和数据库表的映射关系</p><blockquote><p>resultType：自动映射，用于属性名和表中字段名一致的情况</p><p>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</p></blockquote><p>2、当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常 TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p></blockquote><hr><h2 id="五、MyBatis-获取参数值的两种方式（重点）"><a href="#五、MyBatis-获取参数值的两种方式（重点）" class="headerlink" title="五、MyBatis 获取参数值的两种方式（重点）"></a>五、MyBatis 获取参数值的两种方式（重点）</h2><blockquote><p>MyBatis 获取参数值的两种方式：${}和#{}</p><p>${}的本质就是字符串拼接，#{}的本质就是占位符赋值</p><p>${}使用字符串拼接的方式拼接 sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引 号；但是#{}使用占位符赋值的方式拼接 sql，此时为字符串类型或日期类型的字段进行赋值时，可以自 动添加单引号</p></blockquote><h3 id="1、单个字面量类型的参数"><a href="#1、单个字面量类型的参数" class="headerlink" title="1、单个字面量类型的参数"></a>1、单个字面量类型的参数</h3><blockquote><p>若 mapper 接口中的方法参数为单个的字面量类型 此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p></blockquote><h3 id="2、多个字面量类型的参数"><a href="#2、多个字面量类型的参数" class="headerlink" title="2、多个字面量类型的参数"></a>2、多个字面量类型的参数</h3><blockquote><p>若 mapper 接口中的方法参数为多个时 此时 MyBatis 会自动将这些参数放在一个 map 集合中，以 arg0,arg1…为键，以参数为值；以 param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问map集合的键就可以获取相对应的 值，注意${}需要手动加单引号</p></blockquote><h3 id="3、map-集合类型的参数"><a href="#3、map-集合类型的参数" class="headerlink" title="3、map 集合类型的参数"></a>3、map 集合类型的参数</h3><blockquote><p>若 mapper 接口中的方法需要的参数为多个时，此时可以手动创建 map 集合，将这些数据放在 map 中 只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p></blockquote><h3 id="4、实体类类型的参数"><a href="#4、实体类类型的参数" class="headerlink" title="4、实体类类型的参数"></a>4、实体类类型的参数</h3><blockquote><p>若 mapper 接口中的方法参数为实体类对象时 此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p></blockquote><h3 id="5、使用-Param-标识参数"><a href="#5、使用-Param-标识参数" class="headerlink" title="5、使用@Param 标识参数"></a>5、使用@Param 标识参数</h3><blockquote><p>可以通过@Param 注解标识 mapper 接口中的方法参数</p><p>此时，会将这些参数放在 map 集合中，以@Param 注解的 value 属性值为键，以参数为值；以 param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应的值， 注意${}需要手动加单引号</p></blockquote><h2 id="六、MyBatis-的各种查询功能"><a href="#六、MyBatis-的各种查询功能" class="headerlink" title="六、MyBatis 的各种查询功能"></a>六、MyBatis 的各种查询功能</h2><h3 id="1、查询一个实体类对象"><a href="#1、查询一个实体类对象" class="headerlink" title="1、查询一个实体类对象"></a>1、查询一个实体类对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、查询一个-list-集合"><a href="#2、查询一个-list-集合" class="headerlink" title="2、查询一个 list 集合"></a>2、查询一个 list 集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、查询单个数据"><a href="#3、查询单个数据" class="headerlink" title="3、查询单个数据"></a>3、查询单个数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询用户的总记录数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 在MyBatis中，对于Java中常用的类型都设置了类型别名</span></span><br><span class="line"><span class="comment">* 例如：java.lang.Integer--&gt;int|integer</span></span><br><span class="line"><span class="comment">* 例如：int--&gt;_int|_integer</span></span><br><span class="line"><span class="comment">* 例如：Map--&gt;map,List--&gt;list</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、查询一条数据为-map-集合"><a href="#4、查询一条数据为-map-集合" class="headerlink" title="4、查询一条数据为 map 集合"></a>4、查询一条数据为 map 集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、查询多条数据为-map-集合"><a href="#5、查询多条数据为-map-集合" class="headerlink" title="5、查询多条数据为 map 集合"></a>5、查询多条数据为 map 集合</h3><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此</span></span><br><span class="line"><span class="comment">时可以将这些map放在一个list集合中获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 查询所有用户信息为map集合</span><br><span class="line">* @return</span><br><span class="line">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此</span><br><span class="line">时可以将这些map放在一个list集合中获取</span><br><span class="line">*/</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; getAllUserToMap();</span><br></pre></td></tr></table></figure><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并</span></span><br><span class="line"><span class="comment">且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的</span></span><br><span class="line"><span class="comment">map集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">结果：</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、特殊-SQL-的执行"><a href="#七、特殊-SQL-的执行" class="headerlink" title="七、特殊 SQL 的执行"></a>七、特殊 SQL 的执行</h2><h3 id="1、模糊查询"><a href="#1、模糊查询" class="headerlink" title="1、模糊查询"></a>1、模糊查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试模糊查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> mohu</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">testMohu</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;</span><br><span class="line">&lt;!--List&lt;User&gt; <span class="title function_">testMohu</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;testMohu&quot;</span> resultType=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">&lt;!--select * from t_user where username like <span class="string">&#x27;%$&#123;mohu&#125;%&#x27;</span>--&gt;</span><br><span class="line">&lt;!--select * from t_user where username like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;mohu&#125;,<span class="string">&#x27;%&#x27;</span>)</span>--&gt;</span><br><span class="line">select * from t_user where username like <span class="string">&quot;%&quot;</span>#&#123;mohu&#125;<span class="string">&quot;%&quot;</span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、批量删除"><a href="#2、批量删除" class="headerlink" title="2、批量删除"></a>2、批量删除</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 批量删除</span><br><span class="line">* @param ids</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">int deleteMore(@Param(&quot;ids&quot;) String ids);</span><br><span class="line"><span class="comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、动态设置表名"><a href="#3、动态设置表名" class="headerlink" title="3、动态设置表名"></a>3、动态设置表名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态设置表名，查询所有的用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、添加功能获取自增的主键"><a href="#4、添加功能获取自增的主键" class="headerlink" title="4、添加功能获取自增的主键"></a>4、添加功能获取自增的主键</h3><blockquote><p>t_clazz(clazz_id,clazz_name)</p><p>t_student(student_id,student_name,clazz_id)</p><p>1、添加班级信息</p><p>2、获取新添加的班级的 id</p><p>3、为班级分配学生，即将某学的班级 id 修改为新添加的班级的 id</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* useGeneratedKeys：设置使用自增的主键</span></span><br><span class="line"><span class="comment">* keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参</span></span><br><span class="line"><span class="comment">数user对象的某个属性中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、自定义映射-resultMap"><a href="#八、自定义映射-resultMap" class="headerlink" title="八、自定义映射 resultMap"></a>八、自定义映射 resultMap</h2><h3 id="1、resultMap-处理字段和属性的映射关系"><a href="#1、resultMap-处理字段和属性的映射关系" class="headerlink" title="1、resultMap 处理字段和属性的映射关系"></a>1、resultMap 处理字段和属性的映射关系</h3><blockquote><p>若字段名和实体类中的属性名不一致，则可以通过 resultMap 设置自定义映射</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">resultMap：设置自定义映射</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">id：表示自定义映射的唯一标识</span></span><br><span class="line"><span class="comment">type：查询的数据要映射的实体类的类型</span></span><br><span class="line"><span class="comment">子标签：</span></span><br><span class="line"><span class="comment">id：设置主键的映射关系</span></span><br><span class="line"><span class="comment">result：设置普通字段的映射关系</span></span><br><span class="line"><span class="comment">association：设置多对一的映射关系</span></span><br><span class="line"><span class="comment">collection：设置一对多的映射关系</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">property：设置映射关系中实体类中的属性名</span></span><br><span class="line"><span class="comment">column：设置映射关系中表中的字段名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;User&gt; testMohu(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;testMohu&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span></span><br><span class="line">select id,user_name,password,age,sex from t_user where user_name like</span><br><span class="line">concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用<em>），实体类中的属性 名符合 Java 的规则（使用驼峰） </em></p><p>此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系</p><p>a&gt;可以通过为字段起别名的方式，保证和实体类中的属性名保持一致</p><p>b&gt;可以在 MyBatis 的核心配置文件中设置一个全局配置信息 mapUnderscoreToCamelCase，可 以在查询表中数据时，自动将_类型的字段名转换为驼峰</p><p>例如：字段名 user_name，设置了 mapUnderscoreToCamelCase，此时字段名就会转换为 userName</p></blockquote><h3 id="2、多对一映射处理"><a href="#2、多对一映射处理" class="headerlink" title="2、多对一映射处理"></a>2、多对一映射处理</h3><blockquote><p>查询员工信息以及员工所对应的部门信息</p></blockquote><h4 id="a-gt-级联方式处理映射关系"><a href="#a-gt-级联方式处理映射关系" class="headerlink" title="a&gt;级联方式处理映射关系"></a>a&gt;级联方式处理映射关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByEid(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptMap&quot;</span>&gt;</span></span><br><span class="line">select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =</span><br><span class="line">dept.did where emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="b-gt-使用-association-处理映射关系"><a href="#b-gt-使用-association-处理映射关系" class="headerlink" title="b&gt;使用 association 处理映射关系"></a>b&gt;使用 association 处理映射关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByEid(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptMap&quot;</span>&gt;</span></span><br><span class="line">select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =</span><br><span class="line">dept.did where emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="c-gt-分步查询"><a href="#c-gt-分步查询" class="headerlink" title="c&gt;分步查询"></a>c&gt;分步查询</h4><h5 id="1）查询员工信息"><a href="#1）查询员工信息" class="headerlink" title="1）查询员工信息"></a>1）查询员工信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过分步查询查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> eid</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Emp <span class="title function_">getEmpByStep</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> <span class="type">int</span> eid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptStepMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">select：设置分步查询，查询某个属性的值的sql的标识（namespace.sqlId）</span></span><br><span class="line"><span class="comment">column：将sql以及查询结果中的某个字段设置为分步查询的条件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;com.atguigu.MyBatis.mapper.DeptMapper.getEmpDeptByStep&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpByStep(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptStepMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2）根据员工所对应的部门-id-查询部门信息"><a href="#2）根据员工所对应的部门-id-查询部门信息" class="headerlink" title="2）根据员工所对应的部门 id 查询部门信息"></a>2）根据员工所对应的部门 id 查询部门信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分步查询的第二步：根据员工所对应的did查询部门信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Dept <span class="title function_">getEmpDeptByStep</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dept getEmpDeptByStep(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpDeptByStep&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、一对多映射处理"><a href="#3、一对多映射处理" class="headerlink" title="3、一对多映射处理"></a>3、一对多映射处理</h3><h4 id="a-gt-collection"><a href="#a-gt-collection" class="headerlink" title="a&gt;collection"></a>a&gt;collection</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 根据部门id查新部门以及部门中的员工信息</span><br><span class="line">* @param did</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">Dept getDeptEmpByDid(@Param(&quot;did&quot;) int did);</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptEmpMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">ofType：设置collection标签所处理的集合属性中存储数据的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptEmpByDid(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptEmpByDid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptEmpMap&quot;</span>&gt;</span></span><br><span class="line">select dept.*,emp.* from t_dept dept left join t_emp emp on dept.did =</span><br><span class="line">emp.did where dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="b-gt-分步查询"><a href="#b-gt-分步查询" class="headerlink" title="b&gt;分步查询"></a>b&gt;分步查询</h4><h5 id="1）查询部门信息"><a href="#1）查询部门信息" class="headerlink" title="1）查询部门信息"></a>1）查询部门信息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 分步查询部门和部门中的员工</span><br><span class="line">* @param did</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">Dept getDeptByStep(@Param(&quot;did&quot;) int did);</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptEmpStep&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;com.atguigu.MyBatis.mapper.EmpMapper.getEmpListByDid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptByStep(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptEmpStep&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2）根据部门-id-查询部门中的所有员工"><a href="#2）根据部门-id-查询部门中的所有员工" class="headerlink" title="2）根据部门 id 查询部门中的所有员工"></a>2）根据部门 id 查询部门中的所有员工</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据部门id查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpListByDid</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByDid(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByDid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：</p><p>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</p><p>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个 属性会按需加载 此时就可以实现按需加载，获取的数据是什么，就只会执行相应的 sql。此时可通过 association 和 collection 中的 fetchType 属性设置当前的分步查询是否使用延迟加载，fetchType=”lazy(延迟加 载)|eager(立即加载)”</p></blockquote><h2 id="九、动态-SQL"><a href="#九、动态-SQL" class="headerlink" title="九、动态 SQL"></a>九、动态 SQL</h2><blockquote><p>Mybatis 框架的动态 SQL 技术是一种根据特定条件动态拼装 SQL 语句的功能，它存在的意义是为了解决 拼接 SQL 语句字符串时的痛点问题。</p></blockquote><h3 id="1、if"><a href="#1、if" class="headerlink" title="1、if"></a>1、if</h3><blockquote><p>if 标签可通过 test 属性的表达式进行判断，若表达式的结果为 true，则标签中的内容会执行；反之标签中 的内容不会执行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByMoreTJ(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">and ename = #&#123;ename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、where"><a href="#2、where" class="headerlink" title="2、where"></a>2、where</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">ename = #&#123;ename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>where 和 if 一般结合使用：</p><p>a&gt;若 where 标签中的 if 条件都不满足，则 where 标签没有任何功能，即不会添加 where 关键字</p><p>b&gt;若 where 标签中的 if 条件满足，则 where 标签会自动添加 where 关键字，并将条件最前方多余的 and 去掉</p><p>注意：where 标签不能去掉条件最后多余的 and</p></blockquote><h3 id="3、trim"><a href="#3、trim" class="headerlink" title="3、trim"></a>3、trim</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">ename = #&#123;ename&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">    sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>trim 用于去掉或添加标签中的内容</p><p>常用属性：</p><p>prefix：在 trim 标签中的内容的前面添加某些内容</p><p>prefixOverrides：在 trim 标签中的内容的前面去掉某些内容 suffix：在 trim 标签中的内容的后面添加某些内容</p><p>suffixOverrides：在 trim 标签中的内容的后面去掉某些内容</p></blockquote><h3 id="4、choose、when、otherwise"><a href="#4、choose、when、otherwise" class="headerlink" title="4、choose、when、otherwise"></a>4、choose、when、otherwise</h3><p>choose、when、otherwise 相当于 if…else if..else</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByChoose(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">ename = #&#123;ename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != &#x27;&#x27; and email != null&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、foreach"><a href="#5、foreach" class="headerlink" title="5、foreach"></a>5、foreach</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreEmp(List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="line">insert into t_emp values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">(null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(int[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">delete from t_emp where</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(int[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">delete from t_emp where eid in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>属性：</p><p>collection：设置要循环的数组或集合</p><p>item：表示集合或数组中的每一个数据</p><p>separator：设置循环体之间的分隔符</p><p>open：设置 foreach 标签中的内容的开始符</p><p>close：设置 foreach 标签中的内容的结束符</p></blockquote><h3 id="6、SQL-片段"><a href="#6、SQL-片段" class="headerlink" title="6、SQL 片段"></a>6、SQL 片段</h3><p>sql 片段，可以记录一段公共 sql 片段，在使用的地方通过 include 标签进行引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span></span><br><span class="line">eid,ename,age,sex,did</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br></pre></td></tr></table></figure><h2 id="十、MyBatis-的缓存"><a href="#十、MyBatis-的缓存" class="headerlink" title="十、MyBatis 的缓存"></a>十、MyBatis 的缓存</h2><h3 id="MyBatis-的一级缓存"><a href="#MyBatis-的一级缓存" class="headerlink" title="MyBatis 的一级缓存"></a>MyBatis 的一级缓存</h3><blockquote><p>一级缓存是 SqlSession 级别的，通过同一个 SqlSession 查询的数据会被缓存，下次查询相同的数据，就 会从缓存中直接获取，不会从数据库重新访问</p><p>使一级缓存失效的四种情况：</p><ol><li>不同的 SqlSession 对应不同的一级缓存</li><li>同一个 SqlSession 但是查询条件不同</li><li>同一个 SqlSession 两次查询期间执行了任何一次增删改操作</li><li>同一个 SqlSession 两次查询期间手动清空了缓存</li></ol></blockquote><h3 id="MyBatis-的二级缓存"><a href="#MyBatis-的二级缓存" class="headerlink" title="MyBatis 的二级缓存"></a>MyBatis 的二级缓存</h3><blockquote><p>二级缓存是 SqlSessionFactory 级别，通过同一个 SqlSessionFactory 创建的 SqlSession 查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p>二级缓存开启的条件：</p><p>a&gt;在核心配置文件中，设置全局配置属性 cacheEnabled=”true”，默认为 true，不需要设置</p><p>b&gt;在映射文件中设置标签</p><p>c&gt;二级缓存必须在 SqlSession 关闭或提交之后有效</p><p>d&gt;查询的数据所转换的实体类类型必须实现序列化的接口</p><p>使二级缓存失效的情况： 两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p></blockquote><h3 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h3><blockquote><p>在 mapper 配置文件中添加的 cache 标签可以设置一些属性：</p><ol><li>eviction 属性：缓存回收策略 LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。 FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。 SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。 WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。 默认的是 LRU。</li><li>flushInterval 属性：刷新间隔，单位毫秒 默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li><li>size 属性：引用数目，正整数 代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li><li>readOnly 属性：只读，true/false</li><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重要的性能优势。</li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</li></ol></blockquote><h3 id="MyBatis-缓存查询的顺序"><a href="#MyBatis-缓存查询的顺序" class="headerlink" title="MyBatis 缓存查询的顺序"></a>MyBatis 缓存查询的顺序</h3><ol><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。</li><li>如果二级缓存没有命中，再查询一级缓存</li><li>如果一级缓存也没有命中，则查询数据库</li><li>SqlSession 关闭之后，一级缓存中的数据会写入二级缓存</li></ol><h3 id="整合第三方缓存-EHCache"><a href="#整合第三方缓存-EHCache" class="headerlink" title="整合第三方缓存 EHCache"></a>整合第三方缓存 EHCache</h3><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>各 jar 包功能</li></ul><div class="table-container"><table><thead><tr><th>jar 包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis 和 EHCache 的整合包</td></tr><tr><td>ehcache</td><td>EHCache 核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J 日志门面包</td></tr><tr><td>logback-classic</td><td>支持 SLF4J 门面接口的一个具体实现</td></tr></tbody></table></div><ul><li>创建 EHCache 的配置文件 ehcache.xml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:noNamespaceSchemaLocation=&quot;../config/ehcache.xsd&quot;&gt;</span><br><span class="line">&lt;!-- 磁盘保存路径 --&gt;</span><br><span class="line">&lt;diskStore path=&quot;D:\atguigu\ehcache&quot;/&gt;</span><br><span class="line">&lt;defaultCache</span><br><span class="line">maxElementsInMemory=&quot;1000&quot;</span><br><span class="line">maxElementsOnDisk=&quot;10000000&quot;</span><br><span class="line">eternal=&quot;false&quot;</span><br><span class="line">overflowToDisk=&quot;true&quot;</span><br><span class="line">timeToIdleSeconds=&quot;120&quot;</span><br><span class="line">timeToLiveSeconds=&quot;120&quot;</span><br><span class="line">diskExpiryThreadIntervalSeconds=&quot;120&quot;</span><br><span class="line">memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;</span><br><span class="line">&lt;/defaultCache&gt;</span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure><ul><li>设置二级缓存的类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>加入 logback 日志</li></ul><p>存在 SLF4J 时，作为简易日志的 log4j 将失效，此时我们需要借助 SLF4J 的具体实现 logback 来打印日志。 创建 logback 的配置文件 logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 -</span></span><br><span class="line"><span class="comment">-&gt;</span></span><br><span class="line"><span class="comment">&lt;pattern&gt;[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger]</span></span><br><span class="line"><span class="comment">[%msg]%n&lt;/pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/encoder&gt;</span></span><br><span class="line"><span class="comment">&lt;/appender&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">&lt;/configuration</span><br></pre></td></tr></table></figure><ul><li>EHCache 配置文件说明</li></ul><div class="table-container"><table><thead><tr><th>属性名</th><th>是 否 必 须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的 element 的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的 element 的最大数目，若是 0 表示无 穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的 elements 是否永远不过期。 如果为 true，则缓存的数据始终有效， 如果为 false 那么还 要根据 timeToIdleSeconds、timeToLiveSeconds 判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的 element 缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在 EhCache 中的数据前后两次访问的时间超 过 timeToIdleSeconds 的属性取值时， 这些数据便 会删除，默认值是 0,也就是可闲置时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是 30MB。每个 Cache 都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在 VM 重启的时候是否启用磁盘保存 EhCache 中的数 据，默认是 false。</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是 120 秒。每 个 120s， 相应的线程会进行一次 EhCache 中数据的 清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的 element 加入的时 候， 移除缓存中 element 的策略。 默认是 LRU（最 近最少使用），可选的有 LFU（最不常使用）和 FIFO（先进先出）</td></tr></tbody></table></div><h2 id="十一、MyBatis-的逆向工程"><a href="#十一、MyBatis-的逆向工程" class="headerlink" title="十一、MyBatis 的逆向工程"></a>十一、MyBatis 的逆向工程</h2><ul><li><p>正向工程：先创建 Java 实体类，由框架负责根据实体类生成数据库表。Hibernate 是支持正向工程 的。</p></li><li><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：</p><ul><li>Java 实体类</li><li>Mapper 接口</li><li>Mapper 映射文件</li></ul></li></ul><h3 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h3><h4 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建-MyBatis-的核心配置文件"><a href="#创建-MyBatis-的核心配置文件" class="headerlink" title="创建 MyBatis 的核心配置文件"></a>创建 MyBatis 的核心配置文件</h4><h4 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h4><blockquote><p>文件名必须是：generatorConfig.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="执行-MBG-插件的-generate-目标"><a href="#执行-MBG-插件的-generate-目标" class="headerlink" title="执行 MBG 插件的 generate 目标"></a>执行 MBG 插件的 generate 目标</h4><p><img src="https://lc-gluttony.s3.amazonaws.com/aLy6jTEsBgHJ/nvgz4dicqzr3J37ESAxnSLhKfv2NHMFt/QQ%E6%88%AA%E5%9B%BE20220309154235.png" alt="Mybatis"></p><h3 id="QBC-查询"><a href="#QBC-查询" class="headerlink" title="QBC 查询"></a>QBC 查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">SqlSessionFactoryBuilder</span>().build(is).openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="type">EmpExample</span> <span class="variable">empExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line"><span class="comment">//创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</span></span><br><span class="line">empExample.createCriteria().andEnameLike(<span class="string">&quot;a&quot;</span>).andAgeGreaterThan(<span class="number">20</span>).andDidIsNot</span><br><span class="line"><span class="title function_">Null</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//将之前添加的条件通过or拼接其他条件</span></span><br><span class="line">empExample.or().andSexEqualTo(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">List&lt;Emp&gt; list = mapper.selectByExample(empExample);</span><br><span class="line"><span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">System.out.println(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> MyBatis </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
